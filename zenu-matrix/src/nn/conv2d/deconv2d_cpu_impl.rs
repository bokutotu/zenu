use crate::{
    device::Device,
    dim::DimDyn,
    matrix::{Matrix, Owned, Ref},
    num::Num,
    operation::mul::matmul,
};

use crate::nn::col2im::col2im;

pub(super) fn get_deconv_outsize_(size: usize, k: usize, s: usize, p: usize) -> usize {
    s * (size - 1) + k - 2 * p
}

pub(crate) fn deconv2d_inner<T: Num, D: Device>(
    img: Matrix<Ref<&T>, DimDyn, D>,
    kernel: Matrix<Ref<&T>, DimDyn, D>,
    bias: Option<Matrix<Ref<&T>, DimDyn, D>>,
    padding: (usize, usize),
    stride: (usize, usize),
) -> Matrix<Owned<T>, DimDyn, D> {
    let (batch_size, c, h, w) = (
        img.shape()[0],
        img.shape()[1],
        img.shape()[2],
        img.shape()[3],
    );
    let kernel_shape = kernel.shape();
    let (oc, ic, kh, kw) = (
        kernel_shape[0],
        kernel_shape[1],
        kernel_shape[2],
        kernel_shape[3],
    );
    let (ph, pw) = padding;
    let (sh, sw) = stride;

    let (out_h, out_w) = (
        get_deconv_outsize_(h, kh, sh, ph),
        get_deconv_outsize_(w, kw, sw, pw),
    );

    let img = img.transpose_by_index_new_matrix(&[1, 0, 2, 3]);
    let img = img.reshape_no_alloc_owned([c, batch_size * h * w]);

    let mut kernel = kernel.reshape([oc, ic * kh * kw]);
    kernel.transpose();

    let col = matmul(&kernel, &img);

    let col = col.reshape([ic, kh, kw, batch_size, h, w]);
    let col = col.transpose_by_index_new_matrix(&[3, 0, 1, 2, 4, 5]);

    let mut result = col2im(
        col.to_ref(),
        [batch_size, ic, out_h, out_w],
        (kh, kw),
        stride,
        padding,
    );
    if let Some(bias) = bias {
        result += bias;
    }
    result
}

#[cfg(test)]
mod deconv2d {

    use zenu_test::assert_mat_eq_epsilon;

    use crate::{
        device::cpu::Cpu,
        dim::DimDyn,
        matrix::{Matrix, Owned},
    };

    use super::deconv2d_inner;

    #[test]
    fn deconv2d_3x5x5_img_3x3_kernel_2x2_stride_1x1_padding() {
        let input = (1..=150).map(|x| x as f32).collect::<Vec<f32>>();
        let input = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(input, [2, 3, 5, 5]);
        let kernel = (1..=108).map(|x| x as f32).collect::<Vec<f32>>();
        let kernel = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(kernel, [3, 4, 3, 3]);
        let output = deconv2d_inner(input.to_ref(), kernel.to_ref(), None, (1, 1), (2, 2));
        let ans = vec![
            4998, 10116, 5121, 10362, 5244, 10608, 5367, 10854, 5490, 10566, 21372, 10812, 21864,
            11058, 22356, 11304, 22848, 11550, 5613, 11346, 5736, 11592, 5859, 11838, 5982, 12084,
            6105, 11796, 23832, 12042, 24324, 12288, 24816, 12534, 25308, 12780, 6228, 12576, 6351,
            12822, 6474, 13068, 6597, 13314, 6720, 13026, 26292, 13272, 26784, 13518, 27276, 13764,
            27768, 14010, 6843, 13806, 6966, 14052, 7089, 14298, 7212, 14544, 7335, 14256, 28752,
            14502, 29244, 14748, 29736, 14994, 30228, 15240, 7458, 15036, 7581, 15282, 7704, 15528,
            7827, 15774, 7950, 5700, 11547, 5850, 11847, 6000, 12147, 6150, 12447, 6300, 12105,
            24504, 12405, 25104, 12705, 25704, 13005, 26304, 13305, 6450, 13047, 6600, 13347, 6750,
            13647, 6900, 13947, 7050, 13605, 27504, 13905, 28104, 14205, 28704, 14505, 29304,
            14805, 7200, 14547, 7350, 14847, 7500, 15147, 7650, 15447, 7800, 15105, 30504, 15405,
            31104, 15705, 31704, 16005, 32304, 16305, 7950, 16047, 8100, 16347, 8250, 16647, 8400,
            16947, 8550, 16605, 33504, 16905, 34104, 17205, 34704, 17505, 35304, 17805, 8700,
            17547, 8850, 17847, 9000, 18147, 9150, 18447, 9300, 6402, 12978, 6579, 13332, 6756,
            13686, 6933, 14040, 7110, 13644, 27636, 13998, 28344, 14352, 29052, 14706, 29760,
            15060, 7287, 14748, 7464, 15102, 7641, 15456, 7818, 15810, 7995, 15414, 31176, 15768,
            31884, 16122, 32592, 16476, 33300, 16830, 8172, 16518, 8349, 16872, 8526, 17226, 8703,
            17580, 8880, 17184, 34716, 17538, 35424, 17892, 36132, 18246, 36840, 18600, 9057,
            18288, 9234, 18642, 9411, 18996, 9588, 19350, 9765, 18954, 38256, 19308, 38964, 19662,
            39672, 20016, 40380, 20370, 9942, 20058, 10119, 20412, 10296, 20766, 10473, 21120,
            10650, 7104, 14409, 7308, 14817, 7512, 15225, 7716, 15633, 7920, 15183, 30768, 15591,
            31584, 15999, 32400, 16407, 33216, 16815, 8124, 16449, 8328, 16857, 8532, 17265, 8736,
            17673, 8940, 17223, 34848, 17631, 35664, 18039, 36480, 18447, 37296, 18855, 9144,
            18489, 9348, 18897, 9552, 19305, 9756, 19713, 9960, 19263, 38928, 19671, 39744, 20079,
            40560, 20487, 41376, 20895, 10164, 20529, 10368, 20937, 10572, 21345, 10776, 21753,
            10980, 21303, 43008, 21711, 43824, 22119, 44640, 22527, 45456, 22935, 11184, 22569,
            11388, 22977, 11592, 23385, 11796, 23793, 12000, 14223, 28566, 14346, 28812, 14469,
            29058, 14592, 29304, 14715, 29016, 58272, 29262, 58764, 29508, 59256, 29754, 59748,
            30000, 14838, 29796, 14961, 30042, 15084, 30288, 15207, 30534, 15330, 30246, 60732,
            30492, 61224, 30738, 61716, 30984, 62208, 31230, 15453, 31026, 15576, 31272, 15699,
            31518, 15822, 31764, 15945, 31476, 63192, 31722, 63684, 31968, 64176, 32214, 64668,
            32460, 16068, 32256, 16191, 32502, 16314, 32748, 16437, 32994, 16560, 32706, 65652,
            32952, 66144, 33198, 66636, 33444, 67128, 33690, 16683, 33486, 16806, 33732, 16929,
            33978, 17052, 34224, 17175, 16950, 34047, 17100, 34347, 17250, 34647, 17400, 34947,
            17550, 34605, 69504, 34905, 70104, 35205, 70704, 35505, 71304, 35805, 17700, 35547,
            17850, 35847, 18000, 36147, 18150, 36447, 18300, 36105, 72504, 36405, 73104, 36705,
            73704, 37005, 74304, 37305, 18450, 37047, 18600, 37347, 18750, 37647, 18900, 37947,
            19050, 37605, 75504, 37905, 76104, 38205, 76704, 38505, 77304, 38805, 19200, 38547,
            19350, 38847, 19500, 39147, 19650, 39447, 19800, 39105, 78504, 39405, 79104, 39705,
            79704, 40005, 80304, 40305, 19950, 40047, 20100, 40347, 20250, 40647, 20400, 40947,
            20550, 19677, 39528, 19854, 39882, 20031, 40236, 20208, 40590, 20385, 40194, 80736,
            40548, 81444, 40902, 82152, 41256, 82860, 41610, 20562, 41298, 20739, 41652, 20916,
            42006, 21093, 42360, 21270, 41964, 84276, 42318, 84984, 42672, 85692, 43026, 86400,
            43380, 21447, 43068, 21624, 43422, 21801, 43776, 21978, 44130, 22155, 43734, 87816,
            44088, 88524, 44442, 89232, 44796, 89940, 45150, 22332, 44838, 22509, 45192, 22686,
            45546, 22863, 45900, 23040, 45504, 91356, 45858, 92064, 46212, 92772, 46566, 93480,
            46920, 23217, 46608, 23394, 46962, 23571, 47316, 23748, 47670, 23925, 22404, 45009,
            22608, 45417, 22812, 45825, 23016, 46233, 23220, 45783, 91968, 46191, 92784, 46599,
            93600, 47007, 94416, 47415, 23424, 47049, 23628, 47457, 23832, 47865, 24036, 48273,
            24240, 47823, 96048, 48231, 96864, 48639, 97680, 49047, 98496, 49455, 24444, 49089,
            24648, 49497, 24852, 49905, 25056, 50313, 25260, 49863, 100128, 50271, 100944, 50679,
            101760, 51087, 102576, 51495, 25464, 51129, 25668, 51537, 25872, 51945, 26076, 52353,
            26280, 51903, 104208, 52311, 105024, 52719, 105840, 53127, 106656, 53535, 26484, 53169,
            26688, 53577, 26892, 53985, 27096, 54393, 27300,
        ]
        .into_iter()
        .map(|x| x as f32)
        .collect::<Vec<f32>>();
        let ans = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(ans, [2, 4, 9, 9]);
        // assert!((output - ans).asum() < 1e-6);
        assert_mat_eq_epsilon!(ans, output, 1e-6);
    }

    #[test]
    fn devon2d_3x5x5_img_3x3_kernel_1x1_stride_1x1_padding() {
        let input = vec![
            0.17944778501987457,
            2.5842456817626953,
            1.4055261611938477,
            0.5698798298835754,
            1.0882476568222046,
            -0.54337078332901,
            0.4821759760379791,
            -0.01300729252398014,
            -0.23240502178668976,
            -0.5321969389915466,
            -0.327836275100708,
            0.9461117386817932,
            0.019877921789884567,
            0.22596865892410278,
            0.09347215294837952,
            -0.1360638588666916,
            1.3737605810165405,
            0.44844725728034973,
            0.7495169043540955,
            -1.3965662717819214,
            -0.8759177923202515,
            -0.103871650993824,
            -1.0044399499893188,
            -0.6436463594436646,
            -0.9228576421737671,
            0.11117608845233917,
            1.455820918083191,
            -1.672480821609497,
            -1.0498719215393066,
            -0.20958155393600464,
            1.0058177709579468,
            -0.3569243252277374,
            -0.9189735054969788,
            0.8022083044052124,
            0.00961751863360405,
            -0.44733917713165283,
            1.4043464660644531,
            0.1120714470744133,
            1.241589069366455,
            0.31507986783981323,
            0.12014304846525192,
            -0.4283598065376282,
            -1.021255612373352,
            0.15619589388370514,
            -1.6673479080200195,
            -1.1440004110336304,
            -0.2850443124771118,
            0.9831854104995728,
            1.3703155517578125,
            0.11205276101827621,
            -0.9404323697090149,
            0.6890058517456055,
            0.5313904881477356,
            -0.8581798672676086,
            1.3916325569152832,
            0.49833405017852783,
            -0.8748668432235718,
            0.5857566595077515,
            -0.7165534496307373,
            0.30859360098838806,
            -0.03257802128791809,
            -0.7988536357879639,
            -0.4952332377433777,
            -1.927775502204895,
            1.0198101997375488,
            0.81070476770401,
            -2.24780535697937,
            -0.14626094698905945,
            -1.783301591873169,
            0.4658244252204895,
            -2.1769988536834717,
            -0.6359449625015259,
            0.40424689650535583,
            0.9534857273101807,
            -2.4762778282165527,
            0.9393209218978882,
            -0.6123062968254089,
            0.6094458699226379,
            0.16462144255638123,
            -0.8001217842102051,
            -0.27225053310394287,
            2.2523739337921143,
            0.21054276823997498,
            1.8149017095565796,
            -0.2584826350212097,
            0.16391122341156006,
            0.6153186559677124,
            -1.155381202697754,
            -1.1987074613571167,
            -0.06145606189966202,
            -0.3281289339065552,
            1.0596064329147339,
            1.6668667793273926,
            -0.5601032972335815,
            -0.20906895399093628,
            -0.007305788341909647,
            -0.7801280617713928,
            1.0888198614120483,
            0.301357239484787,
            1.3289146423339844,
            0.39916619658470154,
            -1.5881831645965576,
            1.4257159233093262,
            -1.5716915130615234,
            -0.09719445556402206,
            0.9591987133026123,
            -0.2029607594013214,
            -0.46331652998924255,
            -0.26473742723464966,
            -0.21901929378509521,
            0.9507256150245667,
            0.8899007439613342,
            2.3259778022766113,
            0.21143969893455505,
            1.1713911294937134,
            0.4449675679206848,
            -1.0426738262176514,
            0.8429930210113525,
            -1.4068963527679443,
            2.1880950927734375,
            1.3624979257583618,
            -1.5165942907333374,
            0.7290763258934021,
            0.7847345471382141,
            -0.20716367661952972,
            0.16570916771888733,
            0.8057242035865784,
            0.20553936064243317,
            0.2169375717639923,
            1.090056300163269,
            -0.12237154692411423,
            0.3703386187553406,
            0.3599420487880707,
            0.3067700266838074,
            -2.1254220008850098,
            -0.5515395998954773,
            -0.1602334827184677,
            1.3996895551681519,
            -0.36062151193618774,
            1.511555790901184,
            1.653551697731018,
            -1.7836500406265259,
            2.068953514099121,
            -0.8230754137039185,
            -0.595068097114563,
            -0.438291072845459,
            1.1180692911148071,
            -0.012961586937308311,
            0.25454995036125183,
            0.2409011423587799,
        ];
        let input = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(input, [2, 3, 5, 5]);
        let kernel = vec![
            1.1547038555145264,
            -0.10836013406515121,
            0.2428898960351944,
            0.3530861437320709,
            2.0722100734710693,
            0.15958066284656525,
            0.4297993779182434,
            -1.6032308340072632,
            1.985474705696106,
            1.1252985000610352,
            0.8265207409858704,
            -0.4415295720100403,
            -0.7549787759780884,
            -0.48295941948890686,
            -0.9858214259147644,
            -0.2980036437511444,
            0.5880715847015381,
            0.5161236524581909,
            -0.21596670150756836,
            0.880149781703949,
            0.24559083580970764,
            -0.02932465635240078,
            -1.070786714553833,
            -1.7562994956970215,
            0.8972457647323608,
            1.6106326580047607,
            0.611526370048523,
            -0.8988951444625854,
            -0.39682260155677795,
            -0.280529260635376,
            -0.7514408826828003,
            0.14615170657634735,
            0.3428913950920105,
            -1.1852538585662842,
            -2.0946667194366455,
            1.0695040225982666,
            0.4666804373264313,
            -0.5735284090042114,
            -0.3079746663570404,
            1.0619324445724487,
            -0.2965792119503021,
            0.5036290884017944,
            2.0612003803253174,
            0.5439503788948059,
            0.46910911798477173,
            -1.872380256652832,
            0.6591345071792603,
            -0.25603798031806946,
            -1.3936188220977783,
            -0.01964593678712845,
            0.07578820735216141,
            -1.5270198583602905,
            0.7023164629936218,
            -0.8173133134841919,
            -0.8182370066642761,
            -0.060208093374967575,
            1.7793692350387573,
            -0.5000892877578735,
            1.3207502365112305,
            -0.7423549890518188,
            0.39387163519859314,
            -0.8639122247695923,
            -0.25772538781166077,
            0.3508414328098297,
            0.7304538488388062,
            0.7697275876998901,
            0.3357820510864258,
            -0.8155099153518677,
            0.8407580256462097,
            1.1900690793991089,
            -1.4955307245254517,
            1.0454462766647339,
            0.1093824952840805,
            1.7434824705123901,
            -0.7774214744567871,
            -1.280696153640747,
            0.937251627445221,
            0.8704464435577393,
            -0.5912614464759827,
            1.3716121912002563,
            0.6862384676933289,
            -1.8034770488739014,
            1.8147506713867188,
            -1.8909491300582886,
            -1.085384488105774,
            0.8028450012207031,
            0.09200425446033478,
            0.28843244910240173,
            0.158453106880188,
            -0.9148305654525757,
            -0.4755648672580719,
            -1.2963216304779053,
            -0.35046929121017456,
            1.6665676832199097,
            -0.5377671122550964,
            -0.15298502147197723,
            0.44815942645072937,
            0.564475417137146,
            -0.73647540807724,
            -0.4384194016456604,
            -0.931074321269989,
            0.9838745594024658,
            -0.09457741677761078,
            -1.3576221466064453,
            -1.3456542491912842,
            0.5426536798477173,
            -0.39101871848106384,
            -0.09957949072122574,
        ];
        let kernel = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(kernel, [3, 4, 3, 3]);
        let ans = vec![
            1.678853988647461,
            0.2929646372795105,
            8.321878433227539,
            -3.524102210998535,
            3.2804770469665527,
            4.037138938903809,
            -8.588700294494629,
            4.176543235778809,
            -6.372992515563965,
            1.7852747440338135,
            6.861663818359375,
            -7.925970077514648,
            9.303611755371094,
            -8.719508171081543,
            4.184383869171143,
            3.9953083992004395,
            -1.0855783224105835,
            7.798633575439453,
            -7.286207675933838,
            -7.789611339569092,
            -0.6091028451919556,
            -10.167757987976074,
            -1.4935269355773926,
            -4.759430408477783,
            -0.5404634475708008,
            -1.6647119522094727,
            -2.020331382751465,
            0.879187822341919,
            -7.450754642486572,
            1.2541513442993164,
            -1.783193588256836,
            7.470484733581543,
            1.5136358737945557,
            -2.8813843727111816,
            8.742447853088379,
            6.791200637817383,
            -2.610501766204834,
            5.253398895263672,
            -4.0633344650268555,
            1.6772520542144775,
            -4.3201727867126465,
            -0.007844716310501099,
            -6.328300476074219,
            6.145534992218018,
            -5.558989524841309,
            -0.4071660041809082,
            -0.3044857978820801,
            0.016524553298950195,
            9.944089889526367,
            -0.746341347694397,
            0.22403493523597717,
            3.7498135566711426,
            -11.837414741516113,
            -1.6587690114974976,
            -1.528223991394043,
            2.0187416076660156,
            7.016197681427002,
            4.38410758972168,
            8.829462051391602,
            5.991029262542725,
            -3.901625156402588,
            5.677021026611328,
            -2.5409739017486572,
            4.672309875488281,
            -2.414112091064453,
            -0.141591414809227,
            -2.4273011684417725,
            -9.497654914855957,
            1.9841934442520142,
            3.912330150604248,
            -0.12536320090293884,
            3.5460968017578125,
            7.633419990539551,
            -2.187413215637207,
            3.62062931060791,
            0.005327701568603516,
            -0.7805529832839966,
            -0.34647321701049805,
            1.009967565536499,
            -1.183245062828064,
            -3.2804975509643555,
            -8.293736457824707,
            4.324913024902344,
            0.5079766511917114,
            -3.61929988861084,
            -2.847384452819824,
            0.6945361495018005,
            2.2853899002075195,
            2.575662136077881,
            0.786831796169281,
            1.11387038230896,
            -4.12552547454834,
            7.1638593673706055,
            5.529040336608887,
            8.904233932495117,
            0.2334730476140976,
            0.5097280740737915,
            0.15690457820892334,
            -3.3584794998168945,
            9.163185119628906,
            0.8614054918289185,
            2.236377239227295,
            2.145561933517456,
            -0.006117105484008789,
            -4.4521331787109375,
            -6.348876953125,
            10.220970153808594,
            -3.2605698108673096,
            4.584312438964844,
            2.318352222442627,
            5.234525203704834,
            -4.894401550292969,
            7.000802516937256,
            -4.199979305267334,
            0.2803785800933838,
            0.9493225812911987,
            8.838340759277344,
            8.88904857635498,
            8.257988929748535,
            -2.8451523780822754,
            -1.7508962154388428,
            -1.429842472076416,
            1.0872366428375244,
            10.001291275024414,
            2.0782077312469482,
            3.904484510421753,
            0.3843975067138672,
            3.0944128036499023,
            4.387762546539307,
            -4.5267133712768555,
            0.9702188372612,
            -10.648967742919922,
            2.538430690765381,
            -8.563901901245117,
            2.0681984424591064,
            7.5525336265563965,
            -12.873459815979004,
            15.229077339172363,
            -11.617986679077148,
            4.968071460723877,
            3.1965548992156982,
            -7.371746063232422,
            2.0579614639282227,
            -7.688942909240723,
            1.0981988906860352,
            2.257390022277832,
            -4.07446813583374,
            5.617788314819336,
            -8.571887969970703,
            2.27473783493042,
            0.9520288705825806,
            -0.8751318454742432,
            3.8813228607177734,
            -1.0776188373565674,
            3.3946919441223145,
            2.7417540550231934,
            0.423456609249115,
            -6.292351722717285,
            -3.532195806503296,
            -4.026735305786133,
            0.43079936504364014,
            6.158562183380127,
            4.357151985168457,
            6.198320388793945,
            0.4320226311683655,
            -1.1128759384155273,
            2.0239992141723633,
            -10.398087501525879,
            -9.110350608825684,
            7.059138298034668,
            4.448858261108398,
            -0.29636967182159424,
            6.080966949462891,
            -1.8739709854125977,
            -4.913618564605713,
            -1.8981817960739136,
            -0.654325008392334,
            -7.693691730499268,
            2.4344375133514404,
            -1.5640199184417725,
            -4.835700511932373,
            8.295059204101562,
            -6.7720561027526855,
            9.312597274780273,
            2.5366177558898926,
            -5.298233985900879,
            -1.3143435716629028,
            -6.270026683807373,
            -1.4196096658706665,
            1.0691370964050293,
            -3.854904890060425,
            1.92519211769104,
            0.2927427291870117,
            6.393418312072754,
            -4.646687984466553,
            -4.635306358337402,
            0.9026806354522705,
            -10.249516487121582,
            7.557313442230225,
            -4.132973670959473,
        ];
        let ans = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(ans, [2, 4, 5, 5]);
        let pred = deconv2d_inner(input.to_ref(), kernel.to_ref(), None, (1, 1), (1, 1));
        assert_mat_eq_epsilon!(ans, pred, 1e-6);
    }
}
