use crate::{
    device::Device,
    dim::DimDyn,
    matrix::{Matrix, Owned, Ref},
    num::Num,
    slice_dynamic,
};

fn padding<T: Num, D: Device>(
    input: Matrix<Ref<&T>, DimDyn, D>,
    pad_h: usize,
    pad_w: usize,
) -> Matrix<Owned<T>, DimDyn, D> {
    let batch_size = input.shape()[0];
    let in_channel = input.shape()[1];
    let in_height = input.shape()[2];
    let in_width = input.shape()[3];

    let out_height = in_height + 2 * pad_h;
    let out_width = in_width + 2 * pad_w;

    let mut output =
        Matrix::<Owned<T>, DimDyn, D>::zeros([batch_size, in_channel, out_height, out_width]);
    {
        let sliced = output.to_ref_mut().slice_mut(slice_dynamic![
            ..,
            ..,
            pad_h..pad_h + in_height,
            pad_w..pad_w + in_width
        ]);
        sliced.copy_from(&input);
    }
    output
}

pub(super) struct Im2ColRes<T: Num, D: Device> {
    pub(super) col: Matrix<Owned<T>, DimDyn, D>,
    pub(super) out_size: (usize, usize),
}

pub(super) fn im2col<T: Num, D: Device>(
    img: Matrix<Ref<&T>, DimDyn, D>,
    kernel_size: (usize, usize),
    stride: (usize, usize),
    pad: (usize, usize),
) -> Im2ColRes<T, D> {
    let batch_size = img.shape()[0];
    let c = img.shape()[1];
    let h = img.shape()[2];
    let w = img.shape()[3];
    let kh = kernel_size.0;
    let kw = kernel_size.1;
    let sh = stride.0;
    let sw = stride.1;
    let ph = pad.0;
    let pw = pad.1;
    let oh = (h + 2 * ph - kh) / sh + 1;
    let ow = (w + 2 * pw - kw) / sw + 1;

    let img = padding(img, pad.0, pad.1);
    let mut col = Matrix::<Owned<T>, DimDyn, D>::zeros([batch_size, c, kh, kw, oh, ow]);

    for j in 0..kh {
        let j_lim = j + sh * oh;
        for i in 0..kw {
            let i_lim = i + sw * ow;
            let col = col
                .to_ref_mut()
                .slice_mut_dyn(slice_dynamic!(.., .., j, i, .., ..));
            let im_ref = img.to_ref();
            let im_ref = im_ref.slice_dyn(slice_dynamic!(.., .., j..j_lim;sh, i..i_lim;sw));
            col.copy_from(&im_ref);
        }
    }

    let col = col.reshape_mut([batch_size, c * kh * kw, oh * ow]);
    let col = col.transpose_by_index_new_matrix(&[1, 0, 2]);
    let col = col.reshape_no_alloc_owned([c * kh * kw, batch_size * oh * ow]);
    Im2ColRes {
        col,
        out_size: (oh, ow),
    }
}

#[cfg(test)]
mod im2col {
    use crate::{
        device::cpu::Cpu,
        dim::DimDyn,
        matrix::{Matrix, Owned},
        num::Num,
    };

    use zenu_test::*;

    macro_rules! test_im2col {
        ($test_case_fn:ident, $test_name:ident) => {
            #[test]
            fn $test_name() {
                let test_case = $test_case_fn();
                let res = super::im2col(
                    test_case.input.to_ref(),
                    test_case.kernel_size,
                    test_case.stride,
                    test_case.pad,
                );
                assert_mat_eq_epsilon!(res.col, test_case.ans, 1e-6);
            }
        };
    }
    test_im2col!(small_test_case, small);
    test_im2col!(medium_test_case, medium);

    struct Im2ColTestCase<T: Num> {
        input: Matrix<Owned<T>, DimDyn, Cpu>,
        ans: Matrix<Owned<T>, DimDyn, Cpu>,
        kernel_size: (usize, usize),
        stride: (usize, usize),
        pad: (usize, usize),
    }

    fn small_test_case() -> Im2ColTestCase<f32> {
        let input = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(
            vec![
                1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16.,
            ],
            [1, 1, 4, 4],
        );

        let mut ans = Matrix::from_vec(
            vec![
                1., 2., 5., 6., 2., 3., 6., 7., 3., 4., 7., 8., 5., 6., 9., 10., 6., 7., 10., 11.,
                7., 8., 11., 12., 9., 10., 13., 14., 10., 11., 14., 15., 11., 12., 15., 16.,
            ],
            [9, 4],
        );
        ans.transpose();
        Im2ColTestCase {
            input,
            ans,
            kernel_size: (2, 2),
            stride: (1, 1),
            pad: (0, 0),
        }
    }

    fn medium_test_case() -> Im2ColTestCase<f32> {
        let input = (1..151).map(|x| x as f32).collect::<Vec<f32>>();
        let ans = vec![
            0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 0.0, 6.0, 7.0, 0.0, 0.0, 0.0, 0.0, 26.0, 27.0, 0.0, 31.0,
            32.0, 0.0, 0.0, 0.0, 0.0, 51.0, 52.0, 0.0, 56.0, 57.0, 0.0, 0.0, 0.0, 1.0, 2.0, 3.0,
            6.0, 7.0, 8.0, 0.0, 0.0, 0.0, 26.0, 27.0, 28.0, 31.0, 32.0, 33.0, 0.0, 0.0, 0.0, 51.0,
            52.0, 53.0, 56.0, 57.0, 58.0, 0.0, 0.0, 0.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0, 0.0, 0.0,
            0.0, 27.0, 28.0, 29.0, 32.0, 33.0, 34.0, 0.0, 0.0, 0.0, 52.0, 53.0, 54.0, 57.0, 58.0,
            59.0, 0.0, 0.0, 0.0, 3.0, 4.0, 5.0, 8.0, 9.0, 10.0, 0.0, 0.0, 0.0, 28.0, 29.0, 30.0,
            33.0, 34.0, 35.0, 0.0, 0.0, 0.0, 53.0, 54.0, 55.0, 58.0, 59.0, 60.0, 0.0, 0.0, 0.0,
            4.0, 5.0, 0.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 29.0, 30.0, 0.0, 34.0, 35.0, 0.0, 0.0,
            0.0, 0.0, 54.0, 55.0, 0.0, 59.0, 60.0, 0.0, 0.0, 1.0, 2.0, 0.0, 6.0, 7.0, 0.0, 11.0,
            12.0, 0.0, 26.0, 27.0, 0.0, 31.0, 32.0, 0.0, 36.0, 37.0, 0.0, 51.0, 52.0, 0.0, 56.0,
            57.0, 0.0, 61.0, 62.0, 1.0, 2.0, 3.0, 6.0, 7.0, 8.0, 11.0, 12.0, 13.0, 26.0, 27.0,
            28.0, 31.0, 32.0, 33.0, 36.0, 37.0, 38.0, 51.0, 52.0, 53.0, 56.0, 57.0, 58.0, 61.0,
            62.0, 63.0, 2.0, 3.0, 4.0, 7.0, 8.0, 9.0, 12.0, 13.0, 14.0, 27.0, 28.0, 29.0, 32.0,
            33.0, 34.0, 37.0, 38.0, 39.0, 52.0, 53.0, 54.0, 57.0, 58.0, 59.0, 62.0, 63.0, 64.0,
            3.0, 4.0, 5.0, 8.0, 9.0, 10.0, 13.0, 14.0, 15.0, 28.0, 29.0, 30.0, 33.0, 34.0, 35.0,
            38.0, 39.0, 40.0, 53.0, 54.0, 55.0, 58.0, 59.0, 60.0, 63.0, 64.0, 65.0, 4.0, 5.0, 0.0,
            9.0, 10.0, 0.0, 14.0, 15.0, 0.0, 29.0, 30.0, 0.0, 34.0, 35.0, 0.0, 39.0, 40.0, 0.0,
            54.0, 55.0, 0.0, 59.0, 60.0, 0.0, 64.0, 65.0, 0.0, 0.0, 6.0, 7.0, 0.0, 11.0, 12.0, 0.0,
            16.0, 17.0, 0.0, 31.0, 32.0, 0.0, 36.0, 37.0, 0.0, 41.0, 42.0, 0.0, 56.0, 57.0, 0.0,
            61.0, 62.0, 0.0, 66.0, 67.0, 6.0, 7.0, 8.0, 11.0, 12.0, 13.0, 16.0, 17.0, 18.0, 31.0,
            32.0, 33.0, 36.0, 37.0, 38.0, 41.0, 42.0, 43.0, 56.0, 57.0, 58.0, 61.0, 62.0, 63.0,
            66.0, 67.0, 68.0, 7.0, 8.0, 9.0, 12.0, 13.0, 14.0, 17.0, 18.0, 19.0, 32.0, 33.0, 34.0,
            37.0, 38.0, 39.0, 42.0, 43.0, 44.0, 57.0, 58.0, 59.0, 62.0, 63.0, 64.0, 67.0, 68.0,
            69.0, 8.0, 9.0, 10.0, 13.0, 14.0, 15.0, 18.0, 19.0, 20.0, 33.0, 34.0, 35.0, 38.0, 39.0,
            40.0, 43.0, 44.0, 45.0, 58.0, 59.0, 60.0, 63.0, 64.0, 65.0, 68.0, 69.0, 70.0, 9.0,
            10.0, 0.0, 14.0, 15.0, 0.0, 19.0, 20.0, 0.0, 34.0, 35.0, 0.0, 39.0, 40.0, 0.0, 44.0,
            45.0, 0.0, 59.0, 60.0, 0.0, 64.0, 65.0, 0.0, 69.0, 70.0, 0.0, 0.0, 11.0, 12.0, 0.0,
            16.0, 17.0, 0.0, 21.0, 22.0, 0.0, 36.0, 37.0, 0.0, 41.0, 42.0, 0.0, 46.0, 47.0, 0.0,
            61.0, 62.0, 0.0, 66.0, 67.0, 0.0, 71.0, 72.0, 11.0, 12.0, 13.0, 16.0, 17.0, 18.0, 21.0,
            22.0, 23.0, 36.0, 37.0, 38.0, 41.0, 42.0, 43.0, 46.0, 47.0, 48.0, 61.0, 62.0, 63.0,
            66.0, 67.0, 68.0, 71.0, 72.0, 73.0, 12.0, 13.0, 14.0, 17.0, 18.0, 19.0, 22.0, 23.0,
            24.0, 37.0, 38.0, 39.0, 42.0, 43.0, 44.0, 47.0, 48.0, 49.0, 62.0, 63.0, 64.0, 67.0,
            68.0, 69.0, 72.0, 73.0, 74.0, 13.0, 14.0, 15.0, 18.0, 19.0, 20.0, 23.0, 24.0, 25.0,
            38.0, 39.0, 40.0, 43.0, 44.0, 45.0, 48.0, 49.0, 50.0, 63.0, 64.0, 65.0, 68.0, 69.0,
            70.0, 73.0, 74.0, 75.0, 14.0, 15.0, 0.0, 19.0, 20.0, 0.0, 24.0, 25.0, 0.0, 39.0, 40.0,
            0.0, 44.0, 45.0, 0.0, 49.0, 50.0, 0.0, 64.0, 65.0, 0.0, 69.0, 70.0, 0.0, 74.0, 75.0,
            0.0, 0.0, 16.0, 17.0, 0.0, 21.0, 22.0, 0.0, 0.0, 0.0, 0.0, 41.0, 42.0, 0.0, 46.0, 47.0,
            0.0, 0.0, 0.0, 0.0, 66.0, 67.0, 0.0, 71.0, 72.0, 0.0, 0.0, 0.0, 16.0, 17.0, 18.0, 21.0,
            22.0, 23.0, 0.0, 0.0, 0.0, 41.0, 42.0, 43.0, 46.0, 47.0, 48.0, 0.0, 0.0, 0.0, 66.0,
            67.0, 68.0, 71.0, 72.0, 73.0, 0.0, 0.0, 0.0, 17.0, 18.0, 19.0, 22.0, 23.0, 24.0, 0.0,
            0.0, 0.0, 42.0, 43.0, 44.0, 47.0, 48.0, 49.0, 0.0, 0.0, 0.0, 67.0, 68.0, 69.0, 72.0,
            73.0, 74.0, 0.0, 0.0, 0.0, 18.0, 19.0, 20.0, 23.0, 24.0, 25.0, 0.0, 0.0, 0.0, 43.0,
            44.0, 45.0, 48.0, 49.0, 50.0, 0.0, 0.0, 0.0, 68.0, 69.0, 70.0, 73.0, 74.0, 75.0, 0.0,
            0.0, 0.0, 19.0, 20.0, 0.0, 24.0, 25.0, 0.0, 0.0, 0.0, 0.0, 44.0, 45.0, 0.0, 49.0, 50.0,
            0.0, 0.0, 0.0, 0.0, 69.0, 70.0, 0.0, 74.0, 75.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 76.0, 77.0, 0.0, 81.0, 82.0, 0.0, 0.0, 0.0, 0.0, 101.0, 102.0, 0.0, 106.0, 107.0,
            0.0, 0.0, 0.0, 0.0, 126.0, 127.0, 0.0, 131.0, 132.0, 0.0, 0.0, 0.0, 76.0, 77.0, 78.0,
            81.0, 82.0, 83.0, 0.0, 0.0, 0.0, 101.0, 102.0, 103.0, 106.0, 107.0, 108.0, 0.0, 0.0,
            0.0, 126.0, 127.0, 128.0, 131.0, 132.0, 133.0, 0.0, 0.0, 0.0, 77.0, 78.0, 79.0, 82.0,
            83.0, 84.0, 0.0, 0.0, 0.0, 102.0, 103.0, 104.0, 107.0, 108.0, 109.0, 0.0, 0.0, 0.0,
            127.0, 128.0, 129.0, 132.0, 133.0, 134.0, 0.0, 0.0, 0.0, 78.0, 79.0, 80.0, 83.0, 84.0,
            85.0, 0.0, 0.0, 0.0, 103.0, 104.0, 105.0, 108.0, 109.0, 110.0, 0.0, 0.0, 0.0, 128.0,
            129.0, 130.0, 133.0, 134.0, 135.0, 0.0, 0.0, 0.0, 79.0, 80.0, 0.0, 84.0, 85.0, 0.0,
            0.0, 0.0, 0.0, 104.0, 105.0, 0.0, 109.0, 110.0, 0.0, 0.0, 0.0, 0.0, 129.0, 130.0, 0.0,
            134.0, 135.0, 0.0, 0.0, 76.0, 77.0, 0.0, 81.0, 82.0, 0.0, 86.0, 87.0, 0.0, 101.0,
            102.0, 0.0, 106.0, 107.0, 0.0, 111.0, 112.0, 0.0, 126.0, 127.0, 0.0, 131.0, 132.0, 0.0,
            136.0, 137.0, 76.0, 77.0, 78.0, 81.0, 82.0, 83.0, 86.0, 87.0, 88.0, 101.0, 102.0,
            103.0, 106.0, 107.0, 108.0, 111.0, 112.0, 113.0, 126.0, 127.0, 128.0, 131.0, 132.0,
            133.0, 136.0, 137.0, 138.0, 77.0, 78.0, 79.0, 82.0, 83.0, 84.0, 87.0, 88.0, 89.0,
            102.0, 103.0, 104.0, 107.0, 108.0, 109.0, 112.0, 113.0, 114.0, 127.0, 128.0, 129.0,
            132.0, 133.0, 134.0, 137.0, 138.0, 139.0, 78.0, 79.0, 80.0, 83.0, 84.0, 85.0, 88.0,
            89.0, 90.0, 103.0, 104.0, 105.0, 108.0, 109.0, 110.0, 113.0, 114.0, 115.0, 128.0,
            129.0, 130.0, 133.0, 134.0, 135.0, 138.0, 139.0, 140.0, 79.0, 80.0, 0.0, 84.0, 85.0,
            0.0, 89.0, 90.0, 0.0, 104.0, 105.0, 0.0, 109.0, 110.0, 0.0, 114.0, 115.0, 0.0, 129.0,
            130.0, 0.0, 134.0, 135.0, 0.0, 139.0, 140.0, 0.0, 0.0, 81.0, 82.0, 0.0, 86.0, 87.0,
            0.0, 91.0, 92.0, 0.0, 106.0, 107.0, 0.0, 111.0, 112.0, 0.0, 116.0, 117.0, 0.0, 131.0,
            132.0, 0.0, 136.0, 137.0, 0.0, 141.0, 142.0, 81.0, 82.0, 83.0, 86.0, 87.0, 88.0, 91.0,
            92.0, 93.0, 106.0, 107.0, 108.0, 111.0, 112.0, 113.0, 116.0, 117.0, 118.0, 131.0,
            132.0, 133.0, 136.0, 137.0, 138.0, 141.0, 142.0, 143.0, 82.0, 83.0, 84.0, 87.0, 88.0,
            89.0, 92.0, 93.0, 94.0, 107.0, 108.0, 109.0, 112.0, 113.0, 114.0, 117.0, 118.0, 119.0,
            132.0, 133.0, 134.0, 137.0, 138.0, 139.0, 142.0, 143.0, 144.0, 83.0, 84.0, 85.0, 88.0,
            89.0, 90.0, 93.0, 94.0, 95.0, 108.0, 109.0, 110.0, 113.0, 114.0, 115.0, 118.0, 119.0,
            120.0, 133.0, 134.0, 135.0, 138.0, 139.0, 140.0, 143.0, 144.0, 145.0, 84.0, 85.0, 0.0,
            89.0, 90.0, 0.0, 94.0, 95.0, 0.0, 109.0, 110.0, 0.0, 114.0, 115.0, 0.0, 119.0, 120.0,
            0.0, 134.0, 135.0, 0.0, 139.0, 140.0, 0.0, 144.0, 145.0, 0.0, 0.0, 86.0, 87.0, 0.0,
            91.0, 92.0, 0.0, 96.0, 97.0, 0.0, 111.0, 112.0, 0.0, 116.0, 117.0, 0.0, 121.0, 122.0,
            0.0, 136.0, 137.0, 0.0, 141.0, 142.0, 0.0, 146.0, 147.0, 86.0, 87.0, 88.0, 91.0, 92.0,
            93.0, 96.0, 97.0, 98.0, 111.0, 112.0, 113.0, 116.0, 117.0, 118.0, 121.0, 122.0, 123.0,
            136.0, 137.0, 138.0, 141.0, 142.0, 143.0, 146.0, 147.0, 148.0, 87.0, 88.0, 89.0, 92.0,
            93.0, 94.0, 97.0, 98.0, 99.0, 112.0, 113.0, 114.0, 117.0, 118.0, 119.0, 122.0, 123.0,
            124.0, 137.0, 138.0, 139.0, 142.0, 143.0, 144.0, 147.0, 148.0, 149.0, 88.0, 89.0, 90.0,
            93.0, 94.0, 95.0, 98.0, 99.0, 100.0, 113.0, 114.0, 115.0, 118.0, 119.0, 120.0, 123.0,
            124.0, 125.0, 138.0, 139.0, 140.0, 143.0, 144.0, 145.0, 148.0, 149.0, 150.0, 89.0,
            90.0, 0.0, 94.0, 95.0, 0.0, 99.0, 100.0, 0.0, 114.0, 115.0, 0.0, 119.0, 120.0, 0.0,
            124.0, 125.0, 0.0, 139.0, 140.0, 0.0, 144.0, 145.0, 0.0, 149.0, 150.0, 0.0, 0.0, 91.0,
            92.0, 0.0, 96.0, 97.0, 0.0, 0.0, 0.0, 0.0, 116.0, 117.0, 0.0, 121.0, 122.0, 0.0, 0.0,
            0.0, 0.0, 141.0, 142.0, 0.0, 146.0, 147.0, 0.0, 0.0, 0.0, 91.0, 92.0, 93.0, 96.0, 97.0,
            98.0, 0.0, 0.0, 0.0, 116.0, 117.0, 118.0, 121.0, 122.0, 123.0, 0.0, 0.0, 0.0, 141.0,
            142.0, 143.0, 146.0, 147.0, 148.0, 0.0, 0.0, 0.0, 92.0, 93.0, 94.0, 97.0, 98.0, 99.0,
            0.0, 0.0, 0.0, 117.0, 118.0, 119.0, 122.0, 123.0, 124.0, 0.0, 0.0, 0.0, 142.0, 143.0,
            144.0, 147.0, 148.0, 149.0, 0.0, 0.0, 0.0, 93.0, 94.0, 95.0, 98.0, 99.0, 100.0, 0.0,
            0.0, 0.0, 118.0, 119.0, 120.0, 123.0, 124.0, 125.0, 0.0, 0.0, 0.0, 143.0, 144.0, 145.0,
            148.0, 149.0, 150.0, 0.0, 0.0, 0.0, 94.0, 95.0, 0.0, 99.0, 100.0, 0.0, 0.0, 0.0, 0.0,
            119.0, 120.0, 0.0, 124.0, 125.0, 0.0, 0.0, 0.0, 0.0, 144.0, 145.0, 0.0, 149.0, 150.0,
            0.0, 0.0, 0.0, 0.0,
        ];

        let input = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(input, [2, 3, 5, 5]);
        let mut output = Matrix::<Owned<f32>, DimDyn, Cpu>::from_vec(ans, [50, 27]);
        output.transpose();
        Im2ColTestCase {
            input,
            ans: output,
            kernel_size: (3, 3),
            stride: (1, 1),
            pad: (1, 1),
        }
    }
}
