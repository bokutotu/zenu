<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1237.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="672"><g><title>&lt;&lt;cargo::util::toml::schema::TomlDependency as serde::de::Deserialize&gt;::deserialize&lt;serde_ignored::Deserializer&lt;serde::de::value::StringDeserializer&lt;toml_edit::de::Error&gt;, cargo::util::toml::read_manifest_from_str::{closure#0}&gt;&gt;::{closure#1} as core::ops::function::FnOnce&lt;(serde_untagged::map::Map,)&gt;&gt;::call_once::{shim:vtable#0} (1 samples, 0.15%)</title><rect x="0.0000%" y="1173" width="0.1488%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>[[heap]] (1 samples, 0.15%)</title><rect x="0.1488%" y="1173" width="0.1488%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3988%" y="1183.50"></text></g><g><title>&lt;semver::Prerelease as core::cmp::Ord&gt;::cmp (1 samples, 0.15%)</title><rect x="0.1488%" y="1157" width="0.1488%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3988%" y="1167.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;cargo::util::interning::InternedString, cargo::core::source_id::SourceId&gt;&gt;::insert (1 samples, 0.15%)</title><rect x="0.2976%" y="1157" width="0.1488%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.5476%" y="1167.50"></text></g><g><title>[[stack]] (2 samples, 0.30%)</title><rect x="0.2976%" y="1173" width="0.2976%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.5476%" y="1183.50"></text></g><g><title>semver::parse::numeric_identifier (1 samples, 0.15%)</title><rect x="0.4464%" y="1157" width="0.1488%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.6964%" y="1167.50"></text></g><g><title>[cargo] (1 samples, 0.15%)</title><rect x="0.5952%" y="1173" width="0.1488%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="1"/><text x="0.8452%" y="1183.50"></text></g><g><title>&lt;cargo::util::semver_ext::OptVersionReq&gt;::matches (1 samples, 0.15%)</title><rect x="0.5952%" y="1157" width="0.1488%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="1"/><text x="0.8452%" y="1167.50"></text></g><g><title>&lt;(cargo::core::package_id::PackageId, im_rc::hash::set::HashSet&lt;cargo::core::dependency::Dependency&gt;) as im_rc::nodes::btree::BTreeValue&gt;::search_key::&lt;cargo::core::package_id::PackageId&gt; (1 samples, 0.15%)</title><rect x="0.7440%" y="1157" width="0.1488%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="1"/><text x="0.9940%" y="1167.50"></text></g><g><title>&lt;cargo::core::manifest::Target&gt;::rustc_crate_types (1 samples, 0.15%)</title><rect x="0.8929%" y="1157" width="0.1488%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="1"/><text x="1.1429%" y="1167.50"></text></g><g><title>&lt;cargo::sources::replaced::ReplacedSource as cargo::sources::source::Source&gt;::download (1 samples, 0.15%)</title><rect x="1.0417%" y="1157" width="0.1488%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="1.2917%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;itertools::flatten_ok::FlattenOk&lt;core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;&amp;cargo::core::dependency::Dependency&gt;, &lt;cargo::core::resolver::features::FeatureResolver&gt;::deps::{closure#0}::{closure#1}&gt;, core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;cargo::core::resolver::features::FeaturesFor&gt;, &lt;cargo::core::resolver::features::FeatureResolver&gt;::deps::{closure#0}::{closure#1}::{closure#2}&gt;, anyhow::Error&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="1.1905%" y="1157" width="0.1488%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="1"/><text x="1.4405%" y="1167.50"></text></g><g><title>&lt;indexmap::map::IndexMap&lt;&amp;str, ()&gt;&gt;::hash::&lt;str&gt; (1 samples, 0.15%)</title><rect x="1.3393%" y="1157" width="0.1488%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1"/><text x="1.5893%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1157" width="0.2976%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1141" width="0.2976%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1125" width="0.2976%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1109" width="0.2976%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1093" width="0.2976%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1077" width="0.2976%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1061" width="0.2976%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1045" width="0.2976%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1029" width="0.2976%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="1013" width="0.2976%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="997" width="0.2976%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="2"/><text x="1.7381%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="981" width="0.2976%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="2"/><text x="1.7381%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="965" width="0.2976%" height="15" fill="rgb(249,31,29)" fg:x="10" fg:w="2"/><text x="1.7381%" y="975.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="949" width="0.2976%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="2"/><text x="1.7381%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.4881%" y="933" width="0.2976%" height="15" fill="rgb(238,160,17)" fg:x="10" fg:w="2"/><text x="1.7381%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="1.6369%" y="917" width="0.1488%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="1.8869%" y="927.50"></text></g><g><title>__libc_start_main_impl (1 samples, 0.15%)</title><rect x="1.7857%" y="1157" width="0.1488%" height="15" fill="rgb(232,36,49)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1167.50"></text></g><g><title>__libc_start_call_main (1 samples, 0.15%)</title><rect x="1.7857%" y="1141" width="0.1488%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1151.50"></text></g><g><title>std::rt::lang_start::&lt;()&gt; (1 samples, 0.15%)</title><rect x="1.7857%" y="1125" width="0.1488%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1135.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.15%)</title><rect x="1.7857%" y="1109" width="0.1488%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1119.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.15%)</title><rect x="1.7857%" y="1093" width="0.1488%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1103.50"></text></g><g><title>std::panicking::try (1 samples, 0.15%)</title><rect x="1.7857%" y="1077" width="0.1488%" height="15" fill="rgb(241,83,37)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1087.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.15%)</title><rect x="1.7857%" y="1061" width="0.1488%" height="15" fill="rgb(233,36,39)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1071.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (1 samples, 0.15%)</title><rect x="1.7857%" y="1045" width="0.1488%" height="15" fill="rgb(226,3,54)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.15%)</title><rect x="1.7857%" y="1029" width="0.1488%" height="15" fill="rgb(245,192,40)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1039.50"></text></g><g><title>std::panicking::try (1 samples, 0.15%)</title><rect x="1.7857%" y="1013" width="0.1488%" height="15" fill="rgb(238,167,29)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.15%)</title><rect x="1.7857%" y="997" width="0.1488%" height="15" fill="rgb(232,182,51)" fg:x="12" fg:w="1"/><text x="2.0357%" y="1007.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.15%)</title><rect x="1.7857%" y="981" width="0.1488%" height="15" fill="rgb(231,60,39)" fg:x="12" fg:w="1"/><text x="2.0357%" y="991.50"></text></g><g><title>std::rt::lang_start::&lt;()&gt;::{closure#0} (1 samples, 0.15%)</title><rect x="1.7857%" y="965" width="0.1488%" height="15" fill="rgb(208,69,12)" fg:x="12" fg:w="1"/><text x="2.0357%" y="975.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace::&lt;fn(), ()&gt; (1 samples, 0.15%)</title><rect x="1.7857%" y="949" width="0.1488%" height="15" fill="rgb(235,93,37)" fg:x="12" fg:w="1"/><text x="2.0357%" y="959.50"></text></g><g><title>cargo::main (1 samples, 0.15%)</title><rect x="1.7857%" y="933" width="0.1488%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="1"/><text x="2.0357%" y="943.50"></text></g><g><title>cargo::cli::main (1 samples, 0.15%)</title><rect x="1.7857%" y="917" width="0.1488%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="1"/><text x="2.0357%" y="927.50"></text></g><g><title>cargo::init_git (1 samples, 0.15%)</title><rect x="1.7857%" y="901" width="0.1488%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="1"/><text x="2.0357%" y="911.50"></text></g><g><title>git2::opts::set_verify_owner_validation (1 samples, 0.15%)</title><rect x="1.7857%" y="885" width="0.1488%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="2.0357%" y="895.50"></text></g><g><title>libgit2_sys::init (1 samples, 0.15%)</title><rect x="1.7857%" y="869" width="0.1488%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="2.0357%" y="879.50"></text></g><g><title>&lt;std::sys_common::once::futex::Once&gt;::call::&lt;&lt;std::sync::once::Once&gt;::call_once&lt;libgit2_sys::init::{closure#0}&gt;::{closure#0}&gt; (1 samples, 0.15%)</title><rect x="1.7857%" y="853" width="0.1488%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="2.0357%" y="863.50"></text></g><g><title>git_runtime_init (1 samples, 0.15%)</title><rect x="1.7857%" y="837" width="0.1488%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="2.0357%" y="847.50"></text></g><g><title>git_openssl_stream_global_init (1 samples, 0.15%)</title><rect x="1.7857%" y="821" width="0.1488%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="1"/><text x="2.0357%" y="831.50"></text></g><g><title>X509_STORE_set_default_paths (1 samples, 0.15%)</title><rect x="1.7857%" y="805" width="0.1488%" height="15" fill="rgb(250,213,24)" fg:x="12" fg:w="1"/><text x="2.0357%" y="815.50"></text></g><g><title>by_file_ctrl (1 samples, 0.15%)</title><rect x="1.7857%" y="789" width="0.1488%" height="15" fill="rgb(247,123,22)" fg:x="12" fg:w="1"/><text x="2.0357%" y="799.50"></text></g><g><title>X509_load_cert_crl_file (1 samples, 0.15%)</title><rect x="1.7857%" y="773" width="0.1488%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1"/><text x="2.0357%" y="783.50"></text></g><g><title>PEM_X509_INFO_read_bio (1 samples, 0.15%)</title><rect x="1.7857%" y="757" width="0.1488%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="2.0357%" y="767.50"></text></g><g><title>ASN1_item_d2i (1 samples, 0.15%)</title><rect x="1.7857%" y="741" width="0.1488%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="2.0357%" y="751.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.15%)</title><rect x="1.7857%" y="725" width="0.1488%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="2.0357%" y="735.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.15%)</title><rect x="1.7857%" y="709" width="0.1488%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="2.0357%" y="719.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.15%)</title><rect x="1.7857%" y="693" width="0.1488%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="2.0357%" y="703.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.15%)</title><rect x="1.7857%" y="677" width="0.1488%" height="15" fill="rgb(227,1,9)" fg:x="12" fg:w="1"/><text x="2.0357%" y="687.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.15%)</title><rect x="1.7857%" y="661" width="0.1488%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="1"/><text x="2.0357%" y="671.50"></text></g><g><title>pubkey_cb (1 samples, 0.15%)</title><rect x="1.7857%" y="645" width="0.1488%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="1"/><text x="2.0357%" y="655.50"></text></g><g><title>x509_pubkey_decode (1 samples, 0.15%)</title><rect x="1.7857%" y="629" width="0.1488%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="1"/><text x="2.0357%" y="639.50"></text></g><g><title>eckey_pub_decode (1 samples, 0.15%)</title><rect x="1.7857%" y="613" width="0.1488%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="1"/><text x="2.0357%" y="623.50"></text></g><g><title>eckey_type2param (1 samples, 0.15%)</title><rect x="1.7857%" y="597" width="0.1488%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="2.0357%" y="607.50"></text></g><g><title>EC_KEY_new_method (1 samples, 0.15%)</title><rect x="1.7857%" y="581" width="0.1488%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="2.0357%" y="591.50"></text></g><g><title>CRYPTO_new_ex_data (1 samples, 0.15%)</title><rect x="1.7857%" y="565" width="0.1488%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="1"/><text x="2.0357%" y="575.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.15%)</title><rect x="1.7857%" y="549" width="0.1488%" height="15" fill="rgb(213,79,30)" fg:x="12" fg:w="1"/><text x="2.0357%" y="559.50"></text></g><g><title>___pthread_rwlock_unlock (1 samples, 0.15%)</title><rect x="1.7857%" y="533" width="0.1488%" height="15" fill="rgb(246,177,23)" fg:x="12" fg:w="1"/><text x="2.0357%" y="543.50"></text></g><g><title>__pthread_rwlock_wrunlock (1 samples, 0.15%)</title><rect x="1.7857%" y="517" width="0.1488%" height="15" fill="rgb(230,62,27)" fg:x="12" fg:w="1"/><text x="2.0357%" y="527.50"></text></g><g><title>std::fs::File::metadata (2 samples, 0.30%)</title><rect x="1.9345%" y="997" width="0.2976%" height="15" fill="rgb(216,154,8)" fg:x="13" fg:w="2"/><text x="2.1845%" y="1007.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (2 samples, 0.30%)</title><rect x="1.9345%" y="981" width="0.2976%" height="15" fill="rgb(244,35,45)" fg:x="13" fg:w="2"/><text x="2.1845%" y="991.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.30%)</title><rect x="1.9345%" y="965" width="0.2976%" height="15" fill="rgb(251,115,12)" fg:x="13" fg:w="2"/><text x="2.1845%" y="975.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.30%)</title><rect x="1.9345%" y="949" width="0.2976%" height="15" fill="rgb(240,54,50)" fg:x="13" fg:w="2"/><text x="2.1845%" y="959.50"></text></g><g><title>statx (2 samples, 0.30%)</title><rect x="1.9345%" y="933" width="0.2976%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="2"/><text x="2.1845%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.9345%" y="917" width="0.2976%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="2"/><text x="2.1845%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="1.9345%" y="901" width="0.2976%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="2"/><text x="2.1845%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.0833%" y="885" width="0.1488%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="1"/><text x="2.3333%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.0833%" y="869" width="0.1488%" height="15" fill="rgb(236,212,23)" fg:x="14" fg:w="1"/><text x="2.3333%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.0833%" y="853" width="0.1488%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="1"/><text x="2.3333%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.0833%" y="837" width="0.1488%" height="15" fill="rgb(211,96,35)" fg:x="14" fg:w="1"/><text x="2.3333%" y="847.50"></text></g><g><title>&lt;cargo::core::package::PackageSet&gt;::download_accessible (3 samples, 0.45%)</title><rect x="1.9345%" y="1093" width="0.4464%" height="15" fill="rgb(253,215,40)" fg:x="13" fg:w="3"/><text x="2.1845%" y="1103.50"></text></g><g><title>&lt;cargo::core::package::Downloads&gt;::start (3 samples, 0.45%)</title><rect x="1.9345%" y="1077" width="0.4464%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="3"/><text x="2.1845%" y="1087.50"></text></g><g><title>&lt;cargo::sources::replaced::ReplacedSource as cargo::sources::source::Source&gt;::download (3 samples, 0.45%)</title><rect x="1.9345%" y="1061" width="0.4464%" height="15" fill="rgb(208,190,38)" fg:x="13" fg:w="3"/><text x="2.1845%" y="1071.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::sources::source::Source&gt;::download (3 samples, 0.45%)</title><rect x="1.9345%" y="1045" width="0.4464%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="3"/><text x="2.1845%" y="1055.50"></text></g><g><title>&lt;cargo::sources::registry::http_remote::HttpRegistry as cargo::sources::registry::RegistryData&gt;::download (3 samples, 0.45%)</title><rect x="1.9345%" y="1029" width="0.4464%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="3"/><text x="2.1845%" y="1039.50"></text></g><g><title>cargo::sources::registry::download::download (3 samples, 0.45%)</title><rect x="1.9345%" y="1013" width="0.4464%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="3"/><text x="2.1845%" y="1023.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.15%)</title><rect x="2.2321%" y="997" width="0.1488%" height="15" fill="rgb(240,68,47)" fg:x="15" fg:w="1"/><text x="2.4821%" y="1007.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.15%)</title><rect x="2.2321%" y="981" width="0.1488%" height="15" fill="rgb(210,16,53)" fg:x="15" fg:w="1"/><text x="2.4821%" y="991.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.15%)</title><rect x="2.2321%" y="965" width="0.1488%" height="15" fill="rgb(235,124,12)" fg:x="15" fg:w="1"/><text x="2.4821%" y="975.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.15%)</title><rect x="2.2321%" y="949" width="0.1488%" height="15" fill="rgb(224,169,11)" fg:x="15" fg:w="1"/><text x="2.4821%" y="959.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.15%)</title><rect x="2.2321%" y="933" width="0.1488%" height="15" fill="rgb(250,166,2)" fg:x="15" fg:w="1"/><text x="2.4821%" y="943.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.15%)</title><rect x="2.2321%" y="917" width="0.1488%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="1"/><text x="2.4821%" y="927.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.15%)</title><rect x="2.2321%" y="901" width="0.1488%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="1"/><text x="2.4821%" y="911.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.15%)</title><rect x="2.2321%" y="885" width="0.1488%" height="15" fill="rgb(228,99,48)" fg:x="15" fg:w="1"/><text x="2.4821%" y="895.50"></text></g><g><title>__libc_open64 (1 samples, 0.15%)</title><rect x="2.2321%" y="869" width="0.1488%" height="15" fill="rgb(253,11,6)" fg:x="15" fg:w="1"/><text x="2.4821%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="853" width="0.1488%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="2.4821%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="837" width="0.1488%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="2.4821%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="821" width="0.1488%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="2.4821%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="805" width="0.1488%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="2.4821%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="789" width="0.1488%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="2.4821%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="773" width="0.1488%" height="15" fill="rgb(242,17,10)" fg:x="15" fg:w="1"/><text x="2.4821%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="757" width="0.1488%" height="15" fill="rgb(242,107,0)" fg:x="15" fg:w="1"/><text x="2.4821%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="741" width="0.1488%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="1"/><text x="2.4821%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="725" width="0.1488%" height="15" fill="rgb(233,223,10)" fg:x="15" fg:w="1"/><text x="2.4821%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.2321%" y="709" width="0.1488%" height="15" fill="rgb(215,21,27)" fg:x="15" fg:w="1"/><text x="2.4821%" y="719.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.15%)</title><rect x="2.3810%" y="1093" width="0.1488%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="1"/><text x="2.6310%" y="1103.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.15%)</title><rect x="2.3810%" y="1077" width="0.1488%" height="15" fill="rgb(244,5,23)" fg:x="16" fg:w="1"/><text x="2.6310%" y="1087.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;(cargo::core::dependency::Dependency, ())&gt;&gt;::reserve_rehash::&lt;hashbrown::map::make_hasher&lt;cargo::core::dependency::Dependency, (), std::collections::hash::map::RandomState&gt;::{closure#0}&gt; (1 samples, 0.15%)</title><rect x="2.3810%" y="1061" width="0.1488%" height="15" fill="rgb(226,81,46)" fg:x="16" fg:w="1"/><text x="2.6310%" y="1071.50"></text></g><g><title>cargo::cli::main (5 samples, 0.74%)</title><rect x="1.9345%" y="1157" width="0.7440%" height="15" fill="rgb(247,70,30)" fg:x="13" fg:w="5"/><text x="2.1845%" y="1167.50"></text></g><g><title>cargo::commands::metadata::exec (5 samples, 0.74%)</title><rect x="1.9345%" y="1141" width="0.7440%" height="15" fill="rgb(212,68,19)" fg:x="13" fg:w="5"/><text x="2.1845%" y="1151.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (5 samples, 0.74%)</title><rect x="1.9345%" y="1125" width="0.7440%" height="15" fill="rgb(240,187,13)" fg:x="13" fg:w="5"/><text x="2.1845%" y="1135.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (5 samples, 0.74%)</title><rect x="1.9345%" y="1109" width="0.7440%" height="15" fill="rgb(223,113,26)" fg:x="13" fg:w="5"/><text x="2.1845%" y="1119.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.15%)</title><rect x="2.5298%" y="1093" width="0.1488%" height="15" fill="rgb(206,192,2)" fg:x="17" fg:w="1"/><text x="2.7798%" y="1103.50"></text></g><g><title>cargo::ops::lockfile::write_pkg_lockfile (1 samples, 0.15%)</title><rect x="2.5298%" y="1077" width="0.1488%" height="15" fill="rgb(241,108,4)" fg:x="17" fg:w="1"/><text x="2.7798%" y="1087.50"></text></g><g><title>cargo::ops::lockfile::resolve_to_string_orig (1 samples, 0.15%)</title><rect x="2.5298%" y="1061" width="0.1488%" height="15" fill="rgb(247,173,49)" fg:x="17" fg:w="1"/><text x="2.7798%" y="1071.50"></text></g><g><title>cargo::ops::lockfile::serialize_resolve (1 samples, 0.15%)</title><rect x="2.5298%" y="1045" width="0.1488%" height="15" fill="rgb(224,114,35)" fg:x="17" fg:w="1"/><text x="2.7798%" y="1055.50"></text></g><g><title>cargo::ops::lockfile::emit_package (1 samples, 0.15%)</title><rect x="2.5298%" y="1029" width="0.1488%" height="15" fill="rgb(245,159,27)" fg:x="17" fg:w="1"/><text x="2.7798%" y="1039.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.15%)</title><rect x="2.5298%" y="1013" width="0.1488%" height="15" fill="rgb(245,172,44)" fg:x="17" fg:w="1"/><text x="2.7798%" y="1023.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.15%)</title><rect x="2.5298%" y="997" width="0.1488%" height="15" fill="rgb(236,23,11)" fg:x="17" fg:w="1"/><text x="2.7798%" y="1007.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (1 samples, 0.15%)</title><rect x="2.5298%" y="981" width="0.1488%" height="15" fill="rgb(205,117,38)" fg:x="17" fg:w="1"/><text x="2.7798%" y="991.50"></text></g><g><title>core::fmt::write (1 samples, 0.15%)</title><rect x="2.5298%" y="965" width="0.1488%" height="15" fill="rgb(237,72,25)" fg:x="17" fg:w="1"/><text x="2.7798%" y="975.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="2.5298%" y="949" width="0.1488%" height="15" fill="rgb(244,70,9)" fg:x="17" fg:w="1"/><text x="2.7798%" y="959.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.15%)</title><rect x="2.5298%" y="933" width="0.1488%" height="15" fill="rgb(217,125,39)" fg:x="17" fg:w="1"/><text x="2.7798%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.15%)</title><rect x="2.5298%" y="917" width="0.1488%" height="15" fill="rgb(235,36,10)" fg:x="17" fg:w="1"/><text x="2.7798%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.15%)</title><rect x="2.5298%" y="901" width="0.1488%" height="15" fill="rgb(251,123,47)" fg:x="17" fg:w="1"/><text x="2.7798%" y="911.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.15%)</title><rect x="2.5298%" y="885" width="0.1488%" height="15" fill="rgb(221,13,13)" fg:x="17" fg:w="1"/><text x="2.7798%" y="895.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.15%)</title><rect x="2.6786%" y="1157" width="0.1488%" height="15" fill="rgb(238,131,9)" fg:x="18" fg:w="1"/><text x="2.9286%" y="1167.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.15%)</title><rect x="2.6786%" y="1141" width="0.1488%" height="15" fill="rgb(211,50,8)" fg:x="18" fg:w="1"/><text x="2.9286%" y="1151.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (1 samples, 0.15%)</title><rect x="2.6786%" y="1125" width="0.1488%" height="15" fill="rgb(245,182,24)" fg:x="18" fg:w="1"/><text x="2.9286%" y="1135.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.15%)</title><rect x="2.6786%" y="1109" width="0.1488%" height="15" fill="rgb(242,14,37)" fg:x="18" fg:w="1"/><text x="2.9286%" y="1119.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.15%)</title><rect x="2.6786%" y="1093" width="0.1488%" height="15" fill="rgb(246,228,12)" fg:x="18" fg:w="1"/><text x="2.9286%" y="1103.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.15%)</title><rect x="2.6786%" y="1077" width="0.1488%" height="15" fill="rgb(213,55,15)" fg:x="18" fg:w="1"/><text x="2.9286%" y="1087.50"></text></g><g><title>cargo::core::resolver::encode::encodable_package_id (1 samples, 0.15%)</title><rect x="2.6786%" y="1061" width="0.1488%" height="15" fill="rgb(209,9,3)" fg:x="18" fg:w="1"/><text x="2.9286%" y="1071.50"></text></g><g><title>&lt;(cargo::core::package_id::PackageId, im_rc::ord::map::OrdMap&lt;cargo::core::package_id::PackageId, im_rc::hash::set::HashSet&lt;cargo::core::dependency::Dependency&gt;&gt;) as im_rc::nodes::btree::BTreeValue&gt;::search_key::&lt;cargo::core::package_id::PackageId&gt; (1 samples, 0.15%)</title><rect x="2.8274%" y="1125" width="0.1488%" height="15" fill="rgb(230,59,30)" fg:x="19" fg:w="1"/><text x="3.0774%" y="1135.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.15%)</title><rect x="2.8274%" y="1109" width="0.1488%" height="15" fill="rgb(209,121,21)" fg:x="19" fg:w="1"/><text x="3.0774%" y="1119.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query::{closure#2} (1 samples, 0.15%)</title><rect x="2.9762%" y="1029" width="0.1488%" height="15" fill="rgb(220,109,13)" fg:x="20" fg:w="1"/><text x="3.2262%" y="1039.50"></text></g><g><title>cargo::core::registry::lock (1 samples, 0.15%)</title><rect x="2.9762%" y="1013" width="0.1488%" height="15" fill="rgb(232,18,1)" fg:x="20" fg:w="1"/><text x="3.2262%" y="1023.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency&gt;::lock_to (1 samples, 0.15%)</title><rect x="2.9762%" y="997" width="0.1488%" height="15" fill="rgb(215,41,42)" fg:x="20" fg:w="1"/><text x="3.2262%" y="1007.50"></text></g><g><title>&lt;cargo::core::source_id::SourceId&gt;::with_precise_from (1 samples, 0.15%)</title><rect x="2.9762%" y="981" width="0.1488%" height="15" fill="rgb(224,123,36)" fg:x="20" fg:w="1"/><text x="3.2262%" y="991.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries::{closure#1} (1 samples, 0.15%)</title><rect x="3.1250%" y="1029" width="0.1488%" height="15" fill="rgb(240,125,3)" fg:x="21" fg:w="1"/><text x="3.3750%" y="1039.50"></text></g><g><title>&lt;cargo::sources::registry::index::IndexSummary&gt;::parse (1 samples, 0.15%)</title><rect x="3.1250%" y="1013" width="0.1488%" height="15" fill="rgb(205,98,50)" fg:x="21" fg:w="1"/><text x="3.3750%" y="1023.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.15%)</title><rect x="3.1250%" y="997" width="0.1488%" height="15" fill="rgb(205,185,37)" fg:x="21" fg:w="1"/><text x="3.3750%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;cargo::util::config::value::Value&lt;alloc::string::String&gt;&gt;&gt;::reserve_for_push (1 samples, 0.15%)</title><rect x="3.2738%" y="1013" width="0.1488%" height="15" fill="rgb(238,207,15)" fg:x="22" fg:w="1"/><text x="3.5238%" y="1023.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (1 samples, 0.15%)</title><rect x="3.2738%" y="997" width="0.1488%" height="15" fill="rgb(213,199,42)" fg:x="22" fg:w="1"/><text x="3.5238%" y="1007.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="3.2738%" y="981" width="0.1488%" height="15" fill="rgb(235,201,11)" fg:x="22" fg:w="1"/><text x="3.5238%" y="991.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="3.2738%" y="965" width="0.1488%" height="15" fill="rgb(207,46,11)" fg:x="22" fg:w="1"/><text x="3.5238%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="949" width="0.1488%" height="15" fill="rgb(241,35,35)" fg:x="22" fg:w="1"/><text x="3.5238%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="933" width="0.1488%" height="15" fill="rgb(243,32,47)" fg:x="22" fg:w="1"/><text x="3.5238%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="917" width="0.1488%" height="15" fill="rgb(247,202,23)" fg:x="22" fg:w="1"/><text x="3.5238%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="901" width="0.1488%" height="15" fill="rgb(219,102,11)" fg:x="22" fg:w="1"/><text x="3.5238%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="885" width="0.1488%" height="15" fill="rgb(243,110,44)" fg:x="22" fg:w="1"/><text x="3.5238%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="869" width="0.1488%" height="15" fill="rgb(222,74,54)" fg:x="22" fg:w="1"/><text x="3.5238%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="853" width="0.1488%" height="15" fill="rgb(216,99,12)" fg:x="22" fg:w="1"/><text x="3.5238%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="837" width="0.1488%" height="15" fill="rgb(226,22,26)" fg:x="22" fg:w="1"/><text x="3.5238%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="821" width="0.1488%" height="15" fill="rgb(217,163,10)" fg:x="22" fg:w="1"/><text x="3.5238%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2738%" y="805" width="0.1488%" height="15" fill="rgb(213,25,53)" fg:x="22" fg:w="1"/><text x="3.5238%" y="815.50"></text></g><g><title>std::fs::File::open (1 samples, 0.15%)</title><rect x="3.4226%" y="997" width="0.1488%" height="15" fill="rgb(252,105,26)" fg:x="23" fg:w="1"/><text x="3.6726%" y="1007.50"></text></g><g><title>std::fs::OpenOptions::open (1 samples, 0.15%)</title><rect x="3.4226%" y="981" width="0.1488%" height="15" fill="rgb(220,39,43)" fg:x="23" fg:w="1"/><text x="3.6726%" y="991.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.15%)</title><rect x="3.4226%" y="965" width="0.1488%" height="15" fill="rgb(229,68,48)" fg:x="23" fg:w="1"/><text x="3.6726%" y="975.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.15%)</title><rect x="3.4226%" y="949" width="0.1488%" height="15" fill="rgb(252,8,32)" fg:x="23" fg:w="1"/><text x="3.6726%" y="959.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.15%)</title><rect x="3.4226%" y="933" width="0.1488%" height="15" fill="rgb(223,20,43)" fg:x="23" fg:w="1"/><text x="3.6726%" y="943.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.15%)</title><rect x="3.4226%" y="917" width="0.1488%" height="15" fill="rgb(229,81,49)" fg:x="23" fg:w="1"/><text x="3.6726%" y="927.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.15%)</title><rect x="3.4226%" y="901" width="0.1488%" height="15" fill="rgb(236,28,36)" fg:x="23" fg:w="1"/><text x="3.6726%" y="911.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.15%)</title><rect x="3.4226%" y="885" width="0.1488%" height="15" fill="rgb(249,185,26)" fg:x="23" fg:w="1"/><text x="3.6726%" y="895.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.15%)</title><rect x="3.4226%" y="869" width="0.1488%" height="15" fill="rgb(249,174,33)" fg:x="23" fg:w="1"/><text x="3.6726%" y="879.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.15%)</title><rect x="3.4226%" y="853" width="0.1488%" height="15" fill="rgb(233,201,37)" fg:x="23" fg:w="1"/><text x="3.6726%" y="863.50"></text></g><g><title>__libc_open64 (1 samples, 0.15%)</title><rect x="3.4226%" y="837" width="0.1488%" height="15" fill="rgb(221,78,26)" fg:x="23" fg:w="1"/><text x="3.6726%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.4226%" y="821" width="0.1488%" height="15" fill="rgb(250,127,30)" fg:x="23" fg:w="1"/><text x="3.6726%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.4226%" y="805" width="0.1488%" height="15" fill="rgb(230,49,44)" fg:x="23" fg:w="1"/><text x="3.6726%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.4226%" y="789" width="0.1488%" height="15" fill="rgb(229,67,23)" fg:x="23" fg:w="1"/><text x="3.6726%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.4226%" y="773" width="0.1488%" height="15" fill="rgb(249,83,47)" fg:x="23" fg:w="1"/><text x="3.6726%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.4226%" y="757" width="0.1488%" height="15" fill="rgb(215,43,3)" fg:x="23" fg:w="1"/><text x="3.6726%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.4226%" y="741" width="0.1488%" height="15" fill="rgb(238,154,13)" fg:x="23" fg:w="1"/><text x="3.6726%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.4226%" y="725" width="0.1488%" height="15" fill="rgb(219,56,2)" fg:x="23" fg:w="1"/><text x="3.6726%" y="735.50"></text></g><g><title>std::fs::read::inner (2 samples, 0.30%)</title><rect x="3.4226%" y="1013" width="0.2976%" height="15" fill="rgb(233,0,4)" fg:x="23" fg:w="2"/><text x="3.6726%" y="1023.50"></text></g><g><title>std::io::default_read_to_end (1 samples, 0.15%)</title><rect x="3.5714%" y="997" width="0.1488%" height="15" fill="rgb(235,30,7)" fg:x="24" fg:w="1"/><text x="3.8214%" y="1007.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.15%)</title><rect x="3.5714%" y="981" width="0.1488%" height="15" fill="rgb(250,79,13)" fg:x="24" fg:w="1"/><text x="3.8214%" y="991.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.15%)</title><rect x="3.5714%" y="965" width="0.1488%" height="15" fill="rgb(211,146,34)" fg:x="24" fg:w="1"/><text x="3.8214%" y="975.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (1 samples, 0.15%)</title><rect x="3.5714%" y="949" width="0.1488%" height="15" fill="rgb(228,22,38)" fg:x="24" fg:w="1"/><text x="3.8214%" y="959.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (1 samples, 0.15%)</title><rect x="3.5714%" y="933" width="0.1488%" height="15" fill="rgb(235,168,5)" fg:x="24" fg:w="1"/><text x="3.8214%" y="943.50"></text></g><g><title>__GI___libc_read (1 samples, 0.15%)</title><rect x="3.5714%" y="917" width="0.1488%" height="15" fill="rgb(221,155,16)" fg:x="24" fg:w="1"/><text x="3.8214%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="901" width="0.1488%" height="15" fill="rgb(215,215,53)" fg:x="24" fg:w="1"/><text x="3.8214%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="885" width="0.1488%" height="15" fill="rgb(223,4,10)" fg:x="24" fg:w="1"/><text x="3.8214%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="869" width="0.1488%" height="15" fill="rgb(234,103,6)" fg:x="24" fg:w="1"/><text x="3.8214%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="853" width="0.1488%" height="15" fill="rgb(227,97,0)" fg:x="24" fg:w="1"/><text x="3.8214%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="837" width="0.1488%" height="15" fill="rgb(234,150,53)" fg:x="24" fg:w="1"/><text x="3.8214%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="821" width="0.1488%" height="15" fill="rgb(228,201,54)" fg:x="24" fg:w="1"/><text x="3.8214%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="805" width="0.1488%" height="15" fill="rgb(222,22,37)" fg:x="24" fg:w="1"/><text x="3.8214%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="789" width="0.1488%" height="15" fill="rgb(237,53,32)" fg:x="24" fg:w="1"/><text x="3.8214%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="773" width="0.1488%" height="15" fill="rgb(233,25,53)" fg:x="24" fg:w="1"/><text x="3.8214%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="757" width="0.1488%" height="15" fill="rgb(210,40,34)" fg:x="24" fg:w="1"/><text x="3.8214%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="741" width="0.1488%" height="15" fill="rgb(241,220,44)" fg:x="24" fg:w="1"/><text x="3.8214%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="725" width="0.1488%" height="15" fill="rgb(235,28,35)" fg:x="24" fg:w="1"/><text x="3.8214%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="709" width="0.1488%" height="15" fill="rgb(210,56,17)" fg:x="24" fg:w="1"/><text x="3.8214%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="693" width="0.1488%" height="15" fill="rgb(224,130,29)" fg:x="24" fg:w="1"/><text x="3.8214%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="677" width="0.1488%" height="15" fill="rgb(235,212,8)" fg:x="24" fg:w="1"/><text x="3.8214%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="661" width="0.1488%" height="15" fill="rgb(223,33,50)" fg:x="24" fg:w="1"/><text x="3.8214%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="645" width="0.1488%" height="15" fill="rgb(219,149,13)" fg:x="24" fg:w="1"/><text x="3.8214%" y="655.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="629" width="0.1488%" height="15" fill="rgb(250,156,29)" fg:x="24" fg:w="1"/><text x="3.8214%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="613" width="0.1488%" height="15" fill="rgb(216,193,19)" fg:x="24" fg:w="1"/><text x="3.8214%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="597" width="0.1488%" height="15" fill="rgb(216,135,14)" fg:x="24" fg:w="1"/><text x="3.8214%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="581" width="0.1488%" height="15" fill="rgb(241,47,5)" fg:x="24" fg:w="1"/><text x="3.8214%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="565" width="0.1488%" height="15" fill="rgb(233,42,35)" fg:x="24" fg:w="1"/><text x="3.8214%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="549" width="0.1488%" height="15" fill="rgb(231,13,6)" fg:x="24" fg:w="1"/><text x="3.8214%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.5714%" y="533" width="0.1488%" height="15" fill="rgb(207,181,40)" fg:x="24" fg:w="1"/><text x="3.8214%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.89%)</title><rect x="2.9762%" y="1125" width="0.8929%" height="15" fill="rgb(254,173,49)" fg:x="20" fg:w="6"/><text x="3.2262%" y="1135.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::query (6 samples, 0.89%)</title><rect x="2.9762%" y="1109" width="0.8929%" height="15" fill="rgb(221,1,38)" fg:x="20" fg:w="6"/><text x="3.2262%" y="1119.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (6 samples, 0.89%)</title><rect x="2.9762%" y="1093" width="0.8929%" height="15" fill="rgb(206,124,46)" fg:x="20" fg:w="6"/><text x="3.2262%" y="1103.50"></text></g><g><title>&lt;cargo::sources::replaced::ReplacedSource as cargo::sources::source::Source&gt;::query (6 samples, 0.89%)</title><rect x="2.9762%" y="1077" width="0.8929%" height="15" fill="rgb(249,21,11)" fg:x="20" fg:w="6"/><text x="3.2262%" y="1087.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::sources::source::Source&gt;::query (6 samples, 0.89%)</title><rect x="2.9762%" y="1061" width="0.8929%" height="15" fill="rgb(222,201,40)" fg:x="20" fg:w="6"/><text x="3.2262%" y="1071.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online (6 samples, 0.89%)</title><rect x="2.9762%" y="1045" width="0.8929%" height="15" fill="rgb(235,61,29)" fg:x="20" fg:w="6"/><text x="3.2262%" y="1055.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries (4 samples, 0.60%)</title><rect x="3.2738%" y="1029" width="0.5952%" height="15" fill="rgb(219,207,3)" fg:x="22" fg:w="4"/><text x="3.5238%" y="1039.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.15%)</title><rect x="3.7202%" y="1013" width="0.1488%" height="15" fill="rgb(222,56,46)" fg:x="25" fg:w="1"/><text x="3.9702%" y="1023.50"></text></g><g><title>std::path::Path::to_path_buf (1 samples, 0.15%)</title><rect x="3.7202%" y="997" width="0.1488%" height="15" fill="rgb(239,76,54)" fg:x="25" fg:w="1"/><text x="3.9702%" y="1007.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.15%)</title><rect x="3.7202%" y="981" width="0.1488%" height="15" fill="rgb(231,124,27)" fg:x="25" fg:w="1"/><text x="3.9702%" y="991.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.15%)</title><rect x="3.7202%" y="965" width="0.1488%" height="15" fill="rgb(249,195,6)" fg:x="25" fg:w="1"/><text x="3.9702%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.15%)</title><rect x="3.7202%" y="949" width="0.1488%" height="15" fill="rgb(237,174,47)" fg:x="25" fg:w="1"/><text x="3.9702%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.15%)</title><rect x="3.7202%" y="933" width="0.1488%" height="15" fill="rgb(206,201,31)" fg:x="25" fg:w="1"/><text x="3.9702%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.15%)</title><rect x="3.7202%" y="917" width="0.1488%" height="15" fill="rgb(231,57,52)" fg:x="25" fg:w="1"/><text x="3.9702%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.15%)</title><rect x="3.7202%" y="901" width="0.1488%" height="15" fill="rgb(248,177,22)" fg:x="25" fg:w="1"/><text x="3.9702%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="3.7202%" y="885" width="0.1488%" height="15" fill="rgb(215,211,37)" fg:x="25" fg:w="1"/><text x="3.9702%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="3.7202%" y="869" width="0.1488%" height="15" fill="rgb(241,128,51)" fg:x="25" fg:w="1"/><text x="3.9702%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.15%)</title><rect x="3.7202%" y="853" width="0.1488%" height="15" fill="rgb(227,165,31)" fg:x="25" fg:w="1"/><text x="3.9702%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.15%)</title><rect x="3.7202%" y="837" width="0.1488%" height="15" fill="rgb(228,167,24)" fg:x="25" fg:w="1"/><text x="3.9702%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="3.7202%" y="821" width="0.1488%" height="15" fill="rgb(228,143,12)" fg:x="25" fg:w="1"/><text x="3.9702%" y="831.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="3.7202%" y="805" width="0.1488%" height="15" fill="rgb(249,149,8)" fg:x="25" fg:w="1"/><text x="3.9702%" y="815.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="3.7202%" y="789" width="0.1488%" height="15" fill="rgb(243,35,44)" fg:x="25" fg:w="1"/><text x="3.9702%" y="799.50"></text></g><g><title>&lt;cargo::core::source_id::SourceId as core::hash::Hash&gt;::hash::&lt;std::collections::hash::map::DefaultHasher&gt; (1 samples, 0.15%)</title><rect x="3.8690%" y="1093" width="0.1488%" height="15" fill="rgb(246,89,9)" fg:x="26" fg:w="1"/><text x="4.1190%" y="1103.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt; as core::hash::Hasher&gt;::write (1 samples, 0.15%)</title><rect x="3.8690%" y="1077" width="0.1488%" height="15" fill="rgb(233,213,13)" fg:x="26" fg:w="1"/><text x="4.1190%" y="1087.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (9 samples, 1.34%)</title><rect x="2.8274%" y="1157" width="1.3393%" height="15" fill="rgb(233,141,41)" fg:x="19" fg:w="9"/><text x="3.0774%" y="1167.50"></text></g><g><title>cargo::core::resolver::activate (9 samples, 1.34%)</title><rect x="2.8274%" y="1141" width="1.3393%" height="15" fill="rgb(239,167,4)" fg:x="19" fg:w="9"/><text x="3.0774%" y="1151.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;((core::option::Option&lt;cargo::core::package_id::PackageId&gt;, cargo::core::summary::Summary, cargo::core::resolver::types::ResolveOpts), (alloc::rc::Rc&lt;(std::collections::hash::set::HashSet&lt;cargo::util::interning::InternedString&gt;, alloc::rc::Rc&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt;)&gt;, bool))&gt;&gt;::reserve_rehash::&lt;hashbrown::map::make_hasher&lt;(core::option::Option&lt;cargo::core::package_id::PackageId&gt;, cargo::core::summary::Summary, cargo::core::resolver::types::ResolveOpts), (alloc::rc::Rc&lt;(std::collections::hash::set::HashSet&lt;cargo::util::interning::InternedString&gt;, alloc::rc::Rc&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt;)&gt;, bool), std::collections::hash::map::RandomState&gt;::{closure#0}&gt; (2 samples, 0.30%)</title><rect x="3.8690%" y="1125" width="0.2976%" height="15" fill="rgb(209,217,16)" fg:x="26" fg:w="2"/><text x="4.1190%" y="1135.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::hash_one::&lt;&amp;(core::option::Option&lt;cargo::core::package_id::PackageId&gt;, cargo::core::summary::Summary, cargo::core::resolver::types::ResolveOpts)&gt; (2 samples, 0.30%)</title><rect x="3.8690%" y="1109" width="0.2976%" height="15" fill="rgb(219,88,35)" fg:x="26" fg:w="2"/><text x="4.1190%" y="1119.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt; as core::hash::Hasher&gt;::write (1 samples, 0.15%)</title><rect x="4.0179%" y="1093" width="0.1488%" height="15" fill="rgb(220,193,23)" fg:x="27" fg:w="1"/><text x="4.2679%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::collections::btree::map::IntoIter&lt;cargo::core::package_id::PackageId, cargo::core::package::Package&gt;, cargo::ops::cargo_output_metadata::build_resolve_graph::{closure#1}&gt;, cargo::ops::cargo_output_metadata::build_resolve_graph::{closure#2}&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="4.1667%" y="1093" width="0.1488%" height="15" fill="rgb(230,90,52)" fg:x="28" fg:w="1"/><text x="4.4167%" y="1103.50"></text></g><g><title>&lt;cargo::core::package::Package&gt;::serialized (1 samples, 0.15%)</title><rect x="4.1667%" y="1077" width="0.1488%" height="15" fill="rgb(252,106,19)" fg:x="28" fg:w="1"/><text x="4.4167%" y="1087.50"></text></g><g><title>&lt;cargo::core::resolver::features::FeatureResolver&gt;::resolve (1 samples, 0.15%)</title><rect x="4.3155%" y="1077" width="0.1488%" height="15" fill="rgb(206,74,20)" fg:x="29" fg:w="1"/><text x="4.5655%" y="1087.50"></text></g><g><title>&lt;cargo::core::resolver::features::FeatureResolver&gt;::activate_pkg (1 samples, 0.15%)</title><rect x="4.3155%" y="1061" width="0.1488%" height="15" fill="rgb(230,138,44)" fg:x="29" fg:w="1"/><text x="4.5655%" y="1071.50"></text></g><g><title>&lt;cargo::core::resolver::features::FeatureResolver&gt;::deps (1 samples, 0.15%)</title><rect x="4.3155%" y="1045" width="0.1488%" height="15" fill="rgb(235,182,43)" fg:x="29" fg:w="1"/><text x="4.5655%" y="1055.50"></text></g><g><title>&lt;(cargo::core::package_id::PackageId, im_rc::ord::map::OrdMap&lt;cargo::core::package_id::PackageId, im_rc::hash::set::HashSet&lt;cargo::core::dependency::Dependency&gt;&gt;) as im_rc::nodes::btree::BTreeValue&gt;::search_key::&lt;cargo::core::package_id::PackageId&gt; (1 samples, 0.15%)</title><rect x="4.3155%" y="1029" width="0.1488%" height="15" fill="rgb(242,16,51)" fg:x="29" fg:w="1"/><text x="4.5655%" y="1039.50"></text></g><g><title>&lt;semver::BuildMetadata as core::cmp::Ord&gt;::cmp (1 samples, 0.15%)</title><rect x="4.3155%" y="1013" width="0.1488%" height="15" fill="rgb(248,9,4)" fg:x="29" fg:w="1"/><text x="4.5655%" y="1023.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 0.30%)</title><rect x="4.3155%" y="1093" width="0.2976%" height="15" fill="rgb(210,31,22)" fg:x="29" fg:w="2"/><text x="4.5655%" y="1103.50"></text></g><g><title>cargo::ops::resolve::get_resolved_packages (1 samples, 0.15%)</title><rect x="4.4643%" y="1077" width="0.1488%" height="15" fill="rgb(239,54,39)" fg:x="30" fg:w="1"/><text x="4.7143%" y="1087.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry&gt;::get (1 samples, 0.15%)</title><rect x="4.4643%" y="1061" width="0.1488%" height="15" fill="rgb(230,99,41)" fg:x="30" fg:w="1"/><text x="4.7143%" y="1071.50"></text></g><g><title>&lt;cargo::core::package::PackageSet&gt;::new (1 samples, 0.15%)</title><rect x="4.4643%" y="1045" width="0.1488%" height="15" fill="rgb(253,106,12)" fg:x="30" fg:w="1"/><text x="4.7143%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::hash_one::&lt;&amp;cargo::core::package_id::PackageId&gt; (1 samples, 0.15%)</title><rect x="4.4643%" y="1029" width="0.1488%" height="15" fill="rgb(213,46,41)" fg:x="30" fg:w="1"/><text x="4.7143%" y="1039.50"></text></g><g><title>&lt;cargo::core::package_id::PackageId as core::hash::Hash&gt;::hash::&lt;std::collections::hash::map::DefaultHasher&gt; (1 samples, 0.15%)</title><rect x="4.4643%" y="1013" width="0.1488%" height="15" fill="rgb(215,133,35)" fg:x="30" fg:w="1"/><text x="4.7143%" y="1023.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt; as core::hash::Hasher&gt;::write (1 samples, 0.15%)</title><rect x="4.4643%" y="997" width="0.1488%" height="15" fill="rgb(213,28,5)" fg:x="30" fg:w="1"/><text x="4.7143%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place::&lt;(cargo::core::package_id::PackageId, lazycell::LazyCell&lt;cargo::core::package::Package&gt;)&gt; (1 samples, 0.15%)</title><rect x="4.6131%" y="1061" width="0.1488%" height="15" fill="rgb(215,77,49)" fg:x="31" fg:w="1"/><text x="4.8631%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::core::manifest::Manifest&gt; (1 samples, 0.15%)</title><rect x="4.6131%" y="1045" width="0.1488%" height="15" fill="rgb(248,100,22)" fg:x="31" fg:w="1"/><text x="4.8631%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::util::toml::schema::TomlManifest&gt; (1 samples, 0.15%)</title><rect x="4.6131%" y="1029" width="0.1488%" height="15" fill="rgb(208,67,9)" fg:x="31" fg:w="1"/><text x="4.8631%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place::&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String, cargo::util::toml::schema::MaybeWorkspace&lt;cargo::util::toml::schema::TomlDependency, cargo::util::toml::schema::TomlWorkspaceDependency&gt;&gt;&gt; (1 samples, 0.15%)</title><rect x="4.6131%" y="1013" width="0.1488%" height="15" fill="rgb(219,133,21)" fg:x="31" fg:w="1"/><text x="4.8631%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::util::toml::schema::DetailedTomlDependency&gt; (1 samples, 0.15%)</title><rect x="4.6131%" y="997" width="0.1488%" height="15" fill="rgb(246,46,29)" fg:x="31" fg:w="1"/><text x="4.8631%" y="1007.50"></text></g><g><title>__GI___libc_free (1 samples, 0.15%)</title><rect x="4.6131%" y="981" width="0.1488%" height="15" fill="rgb(246,185,52)" fg:x="31" fg:w="1"/><text x="4.8631%" y="991.50"></text></g><g><title>_int_free (1 samples, 0.15%)</title><rect x="4.6131%" y="965" width="0.1488%" height="15" fill="rgb(252,136,11)" fg:x="31" fg:w="1"/><text x="4.8631%" y="975.50"></text></g><g><title>cargo::main (5 samples, 0.74%)</title><rect x="4.1667%" y="1157" width="0.7440%" height="15" fill="rgb(219,138,53)" fg:x="28" fg:w="5"/><text x="4.4167%" y="1167.50"></text></g><g><title>cargo::cli::main (5 samples, 0.74%)</title><rect x="4.1667%" y="1141" width="0.7440%" height="15" fill="rgb(211,51,23)" fg:x="28" fg:w="5"/><text x="4.4167%" y="1151.50"></text></g><g><title>cargo::commands::metadata::exec (5 samples, 0.74%)</title><rect x="4.1667%" y="1125" width="0.7440%" height="15" fill="rgb(247,221,28)" fg:x="28" fg:w="5"/><text x="4.4167%" y="1135.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (5 samples, 0.74%)</title><rect x="4.1667%" y="1109" width="0.7440%" height="15" fill="rgb(251,222,45)" fg:x="28" fg:w="5"/><text x="4.4167%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::ops::resolve::WorkspaceResolve&gt; (2 samples, 0.30%)</title><rect x="4.6131%" y="1093" width="0.2976%" height="15" fill="rgb(217,162,53)" fg:x="31" fg:w="2"/><text x="4.8631%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::core::package::PackageSet&gt; (2 samples, 0.30%)</title><rect x="4.6131%" y="1077" width="0.2976%" height="15" fill="rgb(229,93,14)" fg:x="31" fg:w="2"/><text x="4.8631%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place::&lt;hashbrown::raw::RawTable&lt;(cargo::core::source_id::SourceId, alloc::boxed::Box&lt;dyn cargo::sources::source::Source&gt;)&gt;&gt; (1 samples, 0.15%)</title><rect x="4.7619%" y="1061" width="0.1488%" height="15" fill="rgb(209,67,49)" fg:x="32" fg:w="1"/><text x="5.0119%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::sources::replaced::ReplacedSource&gt; (1 samples, 0.15%)</title><rect x="4.7619%" y="1045" width="0.1488%" height="15" fill="rgb(213,87,29)" fg:x="32" fg:w="1"/><text x="5.0119%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::sources::registry::RegistrySource&gt; (1 samples, 0.15%)</title><rect x="4.7619%" y="1029" width="0.1488%" height="15" fill="rgb(205,151,52)" fg:x="32" fg:w="1"/><text x="5.0119%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::sources::registry::index::RegistryIndex&gt; (1 samples, 0.15%)</title><rect x="4.7619%" y="1013" width="0.1488%" height="15" fill="rgb(253,215,39)" fg:x="32" fg:w="1"/><text x="5.0119%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::sources::registry::index::Summaries&gt; (1 samples, 0.15%)</title><rect x="4.7619%" y="997" width="0.1488%" height="15" fill="rgb(221,220,41)" fg:x="32" fg:w="1"/><text x="5.0119%" y="1007.50"></text></g><g><title>__GI___libc_free (1 samples, 0.15%)</title><rect x="4.7619%" y="981" width="0.1488%" height="15" fill="rgb(218,133,21)" fg:x="32" fg:w="1"/><text x="5.0119%" y="991.50"></text></g><g><title>__GI___munmap (1 samples, 0.15%)</title><rect x="4.7619%" y="965" width="0.1488%" height="15" fill="rgb(221,193,43)" fg:x="32" fg:w="1"/><text x="5.0119%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="949" width="0.1488%" height="15" fill="rgb(240,128,52)" fg:x="32" fg:w="1"/><text x="5.0119%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="933" width="0.1488%" height="15" fill="rgb(253,114,12)" fg:x="32" fg:w="1"/><text x="5.0119%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="917" width="0.1488%" height="15" fill="rgb(215,223,47)" fg:x="32" fg:w="1"/><text x="5.0119%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="901" width="0.1488%" height="15" fill="rgb(248,225,23)" fg:x="32" fg:w="1"/><text x="5.0119%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="885" width="0.1488%" height="15" fill="rgb(250,108,0)" fg:x="32" fg:w="1"/><text x="5.0119%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="869" width="0.1488%" height="15" fill="rgb(228,208,7)" fg:x="32" fg:w="1"/><text x="5.0119%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="853" width="0.1488%" height="15" fill="rgb(244,45,10)" fg:x="32" fg:w="1"/><text x="5.0119%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="837" width="0.1488%" height="15" fill="rgb(207,125,25)" fg:x="32" fg:w="1"/><text x="5.0119%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="821" width="0.1488%" height="15" fill="rgb(210,195,18)" fg:x="32" fg:w="1"/><text x="5.0119%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="805" width="0.1488%" height="15" fill="rgb(249,80,12)" fg:x="32" fg:w="1"/><text x="5.0119%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="789" width="0.1488%" height="15" fill="rgb(221,65,9)" fg:x="32" fg:w="1"/><text x="5.0119%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.7619%" y="773" width="0.1488%" height="15" fill="rgb(235,49,36)" fg:x="32" fg:w="1"/><text x="5.0119%" y="783.50"></text></g><g><title>&lt;cargo::core::package::PackageSet&gt;::download_accessible (1 samples, 0.15%)</title><rect x="4.9107%" y="1125" width="0.1488%" height="15" fill="rgb(225,32,20)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1135.50"></text></g><g><title>&lt;cargo::core::package::Downloads&gt;::start (1 samples, 0.15%)</title><rect x="4.9107%" y="1109" width="0.1488%" height="15" fill="rgb(215,141,46)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1119.50"></text></g><g><title>&lt;cargo::sources::replaced::ReplacedSource as cargo::sources::source::Source&gt;::download (1 samples, 0.15%)</title><rect x="4.9107%" y="1093" width="0.1488%" height="15" fill="rgb(250,160,47)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1103.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::sources::source::Source&gt;::download (1 samples, 0.15%)</title><rect x="4.9107%" y="1077" width="0.1488%" height="15" fill="rgb(216,222,40)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1087.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource&gt;::get_pkg (1 samples, 0.15%)</title><rect x="4.9107%" y="1061" width="0.1488%" height="15" fill="rgb(234,217,39)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1071.50"></text></g><g><title>&lt;cargo::sources::path::PathSource&gt;::update (1 samples, 0.15%)</title><rect x="4.9107%" y="1045" width="0.1488%" height="15" fill="rgb(207,178,40)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1055.50"></text></g><g><title>&lt;cargo::sources::path::PathSource&gt;::read_packages (1 samples, 0.15%)</title><rect x="4.9107%" y="1029" width="0.1488%" height="15" fill="rgb(221,136,13)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1039.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (1 samples, 0.15%)</title><rect x="4.9107%" y="1013" width="0.1488%" height="15" fill="rgb(249,199,10)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1023.50"></text></g><g><title>&lt;cargo::core::package::Package&gt;::new (1 samples, 0.15%)</title><rect x="4.9107%" y="997" width="0.1488%" height="15" fill="rgb(249,222,13)" fg:x="33" fg:w="1"/><text x="5.1607%" y="1007.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="4.9107%" y="981" width="0.1488%" height="15" fill="rgb(244,185,38)" fg:x="33" fg:w="1"/><text x="5.1607%" y="991.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="4.9107%" y="965" width="0.1488%" height="15" fill="rgb(236,202,9)" fg:x="33" fg:w="1"/><text x="5.1607%" y="975.50"></text></g><g><title>malloc_consolidate (1 samples, 0.15%)</title><rect x="4.9107%" y="949" width="0.1488%" height="15" fill="rgb(250,229,37)" fg:x="33" fg:w="1"/><text x="5.1607%" y="959.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (2 samples, 0.30%)</title><rect x="4.9107%" y="1157" width="0.2976%" height="15" fill="rgb(206,174,23)" fg:x="33" fg:w="2"/><text x="5.1607%" y="1167.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 0.30%)</title><rect x="4.9107%" y="1141" width="0.2976%" height="15" fill="rgb(211,33,43)" fg:x="33" fg:w="2"/><text x="5.1607%" y="1151.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.15%)</title><rect x="5.0595%" y="1125" width="0.1488%" height="15" fill="rgb(245,58,50)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1135.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.15%)</title><rect x="5.0595%" y="1109" width="0.1488%" height="15" fill="rgb(244,68,36)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1119.50"></text></g><g><title>&lt;toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct::&lt;&lt;cargo::core::resolver::encode::EncodableResolve as serde::de::Deserialize&gt;::deserialize::__Visitor&gt; (1 samples, 0.15%)</title><rect x="5.0595%" y="1093" width="0.1488%" height="15" fill="rgb(232,229,15)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1103.50"></text></g><g><title>&lt;toml_edit::de::Deserializer as core::str::traits::FromStr&gt;::from_str (1 samples, 0.15%)</title><rect x="5.0595%" y="1077" width="0.1488%" height="15" fill="rgb(254,30,23)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1087.50"></text></g><g><title>toml_edit::parser::parse_document (1 samples, 0.15%)</title><rect x="5.0595%" y="1061" width="0.1488%" height="15" fill="rgb(235,160,14)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1071.50"></text></g><g><title>winnow::combinator::multi::repeat::&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, ((), ()), (), winnow::error::ContextError, (toml_edit::parser::document::document::{closure#2}, toml_edit::parser::document::parse_ws::{closure#0}), core::ops::range::RangeFrom&lt;usize&gt;&gt;::{closure#0} (1 samples, 0.15%)</title><rect x="5.0595%" y="1045" width="0.1488%" height="15" fill="rgb(212,155,44)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1055.50"></text></g><g><title>&lt;toml_edit::parser::state::ParseState&gt;::on_keyval (1 samples, 0.15%)</title><rect x="5.0595%" y="1029" width="0.1488%" height="15" fill="rgb(226,2,50)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1039.50"></text></g><g><title>&lt;indexmap::map::core::VacantEntry&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::insert (1 samples, 0.15%)</title><rect x="5.0595%" y="1013" width="0.1488%" height="15" fill="rgb(234,177,6)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1023.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::push_entry (1 samples, 0.15%)</title><rect x="5.0595%" y="997" width="0.1488%" height="15" fill="rgb(217,24,9)" fg:x="34" fg:w="1"/><text x="5.3095%" y="1007.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::reserve_entries (1 samples, 0.15%)</title><rect x="5.0595%" y="981" width="0.1488%" height="15" fill="rgb(220,13,46)" fg:x="34" fg:w="1"/><text x="5.3095%" y="991.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (1 samples, 0.15%)</title><rect x="5.0595%" y="965" width="0.1488%" height="15" fill="rgb(239,221,27)" fg:x="34" fg:w="1"/><text x="5.3095%" y="975.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="5.0595%" y="949" width="0.1488%" height="15" fill="rgb(222,198,25)" fg:x="34" fg:w="1"/><text x="5.3095%" y="959.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="5.0595%" y="933" width="0.1488%" height="15" fill="rgb(211,99,13)" fg:x="34" fg:w="1"/><text x="5.3095%" y="943.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="5.0595%" y="917" width="0.1488%" height="15" fill="rgb(232,111,31)" fg:x="34" fg:w="1"/><text x="5.3095%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="901" width="0.1488%" height="15" fill="rgb(245,82,37)" fg:x="34" fg:w="1"/><text x="5.3095%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="885" width="0.1488%" height="15" fill="rgb(227,149,46)" fg:x="34" fg:w="1"/><text x="5.3095%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="869" width="0.1488%" height="15" fill="rgb(218,36,50)" fg:x="34" fg:w="1"/><text x="5.3095%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="853" width="0.1488%" height="15" fill="rgb(226,80,48)" fg:x="34" fg:w="1"/><text x="5.3095%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="837" width="0.1488%" height="15" fill="rgb(238,224,15)" fg:x="34" fg:w="1"/><text x="5.3095%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="821" width="0.1488%" height="15" fill="rgb(241,136,10)" fg:x="34" fg:w="1"/><text x="5.3095%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="805" width="0.1488%" height="15" fill="rgb(208,32,45)" fg:x="34" fg:w="1"/><text x="5.3095%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="789" width="0.1488%" height="15" fill="rgb(207,135,9)" fg:x="34" fg:w="1"/><text x="5.3095%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="773" width="0.1488%" height="15" fill="rgb(206,86,44)" fg:x="34" fg:w="1"/><text x="5.3095%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="757" width="0.1488%" height="15" fill="rgb(245,177,15)" fg:x="34" fg:w="1"/><text x="5.3095%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="741" width="0.1488%" height="15" fill="rgb(206,64,50)" fg:x="34" fg:w="1"/><text x="5.3095%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.0595%" y="725" width="0.1488%" height="15" fill="rgb(234,36,40)" fg:x="34" fg:w="1"/><text x="5.3095%" y="735.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.15%)</title><rect x="5.2083%" y="1157" width="0.1488%" height="15" fill="rgb(213,64,8)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1167.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.15%)</title><rect x="5.2083%" y="1141" width="0.1488%" height="15" fill="rgb(210,75,36)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1151.50"></text></g><g><title>&lt;im_rc::ord::map::Entry&lt;cargo::core::package_id::PackageId, im_rc::ord::map::OrdMap&lt;cargo::core::package_id::PackageId, std::collections::hash::set::HashSet&lt;cargo::core::dependency::Dependency&gt;&gt;&gt;&gt;::or_insert_with::&lt;&lt;im_rc::ord::map::OrdMap&lt;cargo::core::package_id::PackageId, std::collections::hash::set::HashSet&lt;cargo::core::dependency::Dependency&gt;&gt;&gt;::new&gt; (1 samples, 0.15%)</title><rect x="5.2083%" y="1125" width="0.1488%" height="15" fill="rgb(229,88,21)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1135.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="5.2083%" y="1109" width="0.1488%" height="15" fill="rgb(252,204,47)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1119.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="5.2083%" y="1093" width="0.1488%" height="15" fill="rgb(208,77,27)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1103.50"></text></g><g><title>sysmalloc (1 samples, 0.15%)</title><rect x="5.2083%" y="1077" width="0.1488%" height="15" fill="rgb(221,76,26)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1087.50"></text></g><g><title>__glibc_morecore (1 samples, 0.15%)</title><rect x="5.2083%" y="1061" width="0.1488%" height="15" fill="rgb(225,139,18)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1071.50"></text></g><g><title>__GI___sbrk (1 samples, 0.15%)</title><rect x="5.2083%" y="1045" width="0.1488%" height="15" fill="rgb(230,137,11)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1055.50"></text></g><g><title>__GI___sbrk (1 samples, 0.15%)</title><rect x="5.2083%" y="1029" width="0.1488%" height="15" fill="rgb(212,28,1)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1039.50"></text></g><g><title>__brk (1 samples, 0.15%)</title><rect x="5.2083%" y="1013" width="0.1488%" height="15" fill="rgb(248,164,17)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2083%" y="997" width="0.1488%" height="15" fill="rgb(222,171,42)" fg:x="35" fg:w="1"/><text x="5.4583%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2083%" y="981" width="0.1488%" height="15" fill="rgb(243,84,45)" fg:x="35" fg:w="1"/><text x="5.4583%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2083%" y="965" width="0.1488%" height="15" fill="rgb(252,49,23)" fg:x="35" fg:w="1"/><text x="5.4583%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2083%" y="949" width="0.1488%" height="15" fill="rgb(215,19,7)" fg:x="35" fg:w="1"/><text x="5.4583%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2083%" y="933" width="0.1488%" height="15" fill="rgb(238,81,41)" fg:x="35" fg:w="1"/><text x="5.4583%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2083%" y="917" width="0.1488%" height="15" fill="rgb(210,199,37)" fg:x="35" fg:w="1"/><text x="5.4583%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2083%" y="901" width="0.1488%" height="15" fill="rgb(244,192,49)" fg:x="35" fg:w="1"/><text x="5.4583%" y="911.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String, cargo::util::toml::schema::MaybeWorkspace&lt;cargo::util::toml::schema::TomlDependency, cargo::util::toml::schema::TomlWorkspaceDependency&gt;&gt;&gt;::insert (1 samples, 0.15%)</title><rect x="5.5060%" y="1077" width="0.1488%" height="15" fill="rgb(226,211,11)" fg:x="37" fg:w="1"/><text x="5.7560%" y="1087.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="5.5060%" y="1061" width="0.1488%" height="15" fill="rgb(236,162,54)" fg:x="37" fg:w="1"/><text x="5.7560%" y="1071.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="5.5060%" y="1045" width="0.1488%" height="15" fill="rgb(220,229,9)" fg:x="37" fg:w="1"/><text x="5.7560%" y="1055.50"></text></g><g><title>alloc_perturb (1 samples, 0.15%)</title><rect x="5.5060%" y="1029" width="0.1488%" height="15" fill="rgb(250,87,22)" fg:x="37" fg:w="1"/><text x="5.7560%" y="1039.50"></text></g><g><title>&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::read_manifest_from_str::{closure#0}&gt; as serde::de::MapAccess&gt;::next_value::&lt;core::option::Option&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String, cargo::util::toml::schema::MaybeWorkspace&lt;cargo::util::toml::schema::TomlDependency, cargo::util::toml::schema::TomlWorkspaceDependency&gt;&gt;&gt;&gt; (3 samples, 0.45%)</title><rect x="5.3571%" y="1125" width="0.4464%" height="15" fill="rgb(239,43,17)" fg:x="36" fg:w="3"/><text x="5.6071%" y="1135.50"></text></g><g><title>&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String, cargo::util::toml::schema::MaybeWorkspace&lt;cargo::util::toml::schema::TomlDependency, cargo::util::toml::schema::TomlWorkspaceDependency&gt;&gt;&gt;&gt;, cargo::util::toml::read_manifest_from_str::{closure#0}&gt; as serde::de::DeserializeSeed&gt;::deserialize::&lt;toml_edit::de::value::ValueDeserializer&gt; (2 samples, 0.30%)</title><rect x="5.5060%" y="1109" width="0.2976%" height="15" fill="rgb(231,177,25)" fg:x="37" fg:w="2"/><text x="5.7560%" y="1119.50"></text></g><g><title>&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;alloc::collections::btree::map::BTreeMap&lt;_, _&gt; as serde::de::Deserialize&gt;::deserialize::MapVisitor&lt;alloc::string::String, cargo::util::toml::schema::MaybeWorkspace&lt;cargo::util::toml::schema::TomlDependency, cargo::util::toml::schema::TomlWorkspaceDependency&gt;&gt;, cargo::util::toml::read_manifest_from_str::{closure#0}&gt;&gt; (2 samples, 0.30%)</title><rect x="5.5060%" y="1093" width="0.2976%" height="15" fill="rgb(219,179,1)" fg:x="37" fg:w="2"/><text x="5.7560%" y="1103.50"></text></g><g><title>&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::read_manifest_from_str::{closure#0}&gt; as serde::de::MapAccess&gt;::next_key_seed::&lt;core::marker::PhantomData&lt;alloc::string::String&gt;&gt; (1 samples, 0.15%)</title><rect x="5.6548%" y="1077" width="0.1488%" height="15" fill="rgb(238,219,53)" fg:x="38" fg:w="1"/><text x="5.9048%" y="1087.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="5.6548%" y="1061" width="0.1488%" height="15" fill="rgb(232,167,36)" fg:x="38" fg:w="1"/><text x="5.9048%" y="1071.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String, alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::insert (1 samples, 0.15%)</title><rect x="5.8036%" y="1093" width="0.1488%" height="15" fill="rgb(244,19,51)" fg:x="39" fg:w="1"/><text x="6.0536%" y="1103.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.15%)</title><rect x="5.8036%" y="1077" width="0.1488%" height="15" fill="rgb(224,6,22)" fg:x="39" fg:w="1"/><text x="6.0536%" y="1087.50"></text></g><g><title>&lt;&lt;cargo::util::toml::schema::TomlManifest as serde::de::Deserialize&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::&lt;serde_ignored::MapAccess&lt;toml_edit::de::table::TableMapAccess, cargo::util::toml::read_manifest_from_str::{closure#0}&gt;&gt; (5 samples, 0.74%)</title><rect x="5.3571%" y="1141" width="0.7440%" height="15" fill="rgb(224,145,5)" fg:x="36" fg:w="5"/><text x="5.6071%" y="1151.50"></text></g><g><title>&lt;serde_ignored::TrackedSeed&lt;core::marker::PhantomData&lt;core::option::Option&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String, alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;&gt;, cargo::util::toml::read_manifest_from_str::{closure#0}&gt; as serde::de::DeserializeSeed&gt;::deserialize::&lt;toml_edit::de::value::ValueDeserializer&gt; (2 samples, 0.30%)</title><rect x="5.8036%" y="1125" width="0.2976%" height="15" fill="rgb(234,130,49)" fg:x="39" fg:w="2"/><text x="6.0536%" y="1135.50"></text></g><g><title>&lt;toml_edit::de::table::TableDeserializer as serde::de::Deserializer&gt;::deserialize_any::&lt;serde_ignored::Wrap&lt;&lt;alloc::collections::btree::map::BTreeMap&lt;_, _&gt; as serde::de::Deserialize&gt;::deserialize::MapVisitor&lt;alloc::string::String, alloc::vec::Vec&lt;alloc::string::String&gt;&gt;, cargo::util::toml::read_manifest_from_str::{closure#0}&gt;&gt; (2 samples, 0.30%)</title><rect x="5.8036%" y="1109" width="0.2976%" height="15" fill="rgb(254,6,2)" fg:x="39" fg:w="2"/><text x="6.0536%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;alloc::string::String&gt; as serde::de::Deserialize&gt;::deserialize::&lt;serde_ignored::Deserializer&lt;toml_edit::de::value::ValueDeserializer, cargo::util::toml::read_manifest_from_str::{closure#0}&gt;&gt; (1 samples, 0.15%)</title><rect x="5.9524%" y="1093" width="0.1488%" height="15" fill="rgb(208,96,46)" fg:x="40" fg:w="1"/><text x="6.2024%" y="1103.50"></text></g><g><title>&lt;&lt;alloc::vec::Vec&lt;_&gt; as serde::de::Deserialize&gt;::deserialize::VecVisitor&lt;alloc::string::String&gt; as serde::de::Visitor&gt;::visit_seq::&lt;serde_ignored::SeqAccess&lt;toml_edit::de::array::ArraySeqAccess, cargo::util::toml::read_manifest_from_str::{closure#0}&gt;&gt; (1 samples, 0.15%)</title><rect x="5.9524%" y="1077" width="0.1488%" height="15" fill="rgb(239,3,39)" fg:x="40" fg:w="1"/><text x="6.2024%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;indexmap::Bucket&lt;&amp;str, ()&gt;&gt;&gt;::reserve_for_push (1 samples, 0.15%)</title><rect x="5.9524%" y="1061" width="0.1488%" height="15" fill="rgb(233,210,1)" fg:x="40" fg:w="1"/><text x="6.2024%" y="1071.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (1 samples, 0.15%)</title><rect x="5.9524%" y="1045" width="0.1488%" height="15" fill="rgb(244,137,37)" fg:x="40" fg:w="1"/><text x="6.2024%" y="1055.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="5.9524%" y="1029" width="0.1488%" height="15" fill="rgb(240,136,2)" fg:x="40" fg:w="1"/><text x="6.2024%" y="1039.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="5.9524%" y="1013" width="0.1488%" height="15" fill="rgb(239,18,37)" fg:x="40" fg:w="1"/><text x="6.2024%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;cargo::util::toml::schema::TomlPackage&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="6.1012%" y="1125" width="0.1488%" height="15" fill="rgb(218,185,22)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1135.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="6.1012%" y="1109" width="0.1488%" height="15" fill="rgb(225,218,4)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="6.1012%" y="1093" width="0.1488%" height="15" fill="rgb(230,182,32)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1103.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.15%)</title><rect x="6.1012%" y="1077" width="0.1488%" height="15" fill="rgb(242,56,43)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1087.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.15%)</title><rect x="6.1012%" y="1061" width="0.1488%" height="15" fill="rgb(233,99,24)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1071.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.15%)</title><rect x="6.1012%" y="1045" width="0.1488%" height="15" fill="rgb(234,209,42)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="6.1012%" y="1029" width="0.1488%" height="15" fill="rgb(227,7,12)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="6.1012%" y="1013" width="0.1488%" height="15" fill="rgb(245,203,43)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1023.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.15%)</title><rect x="6.1012%" y="997" width="0.1488%" height="15" fill="rgb(238,205,33)" fg:x="41" fg:w="1"/><text x="6.3512%" y="1007.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="6.2500%" y="1125" width="0.1488%" height="15" fill="rgb(231,56,7)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="6.2500%" y="1109" width="0.1488%" height="15" fill="rgb(244,186,29)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.15%)</title><rect x="6.2500%" y="1093" width="0.1488%" height="15" fill="rgb(234,111,31)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.15%)</title><rect x="6.2500%" y="1077" width="0.1488%" height="15" fill="rgb(241,149,10)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.15%)</title><rect x="6.2500%" y="1061" width="0.1488%" height="15" fill="rgb(249,206,44)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1071.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="6.2500%" y="1045" width="0.1488%" height="15" fill="rgb(251,153,30)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.15%)</title><rect x="6.2500%" y="1029" width="0.1488%" height="15" fill="rgb(239,152,38)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.15%)</title><rect x="6.2500%" y="1013" width="0.1488%" height="15" fill="rgb(249,139,47)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.15%)</title><rect x="6.2500%" y="997" width="0.1488%" height="15" fill="rgb(244,64,35)" fg:x="42" fg:w="1"/><text x="6.5000%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.15%)</title><rect x="6.2500%" y="981" width="0.1488%" height="15" fill="rgb(216,46,15)" fg:x="42" fg:w="1"/><text x="6.5000%" y="991.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.15%)</title><rect x="6.2500%" y="965" width="0.1488%" height="15" fill="rgb(250,74,19)" fg:x="42" fg:w="1"/><text x="6.5000%" y="975.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="6.2500%" y="949" width="0.1488%" height="15" fill="rgb(249,42,33)" fg:x="42" fg:w="1"/><text x="6.5000%" y="959.50"></text></g><g><title>&lt;cargo::core::summary::Summary&gt;::new::&lt;&amp;str&gt; (1 samples, 0.15%)</title><rect x="6.3988%" y="1125" width="0.1488%" height="15" fill="rgb(242,149,17)" fg:x="43" fg:w="1"/><text x="6.6488%" y="1135.50"></text></g><g><title>cargo::core::summary::build_feature_map (1 samples, 0.15%)</title><rect x="6.3988%" y="1109" width="0.1488%" height="15" fill="rgb(244,29,21)" fg:x="43" fg:w="1"/><text x="6.6488%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;_, _&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::&lt;core::slice::iter::Iter&lt;cargo::core::summary::FeatureValue&gt;, (), core::iter::adapters::filter_map::filter_map_fold&lt;&amp;cargo::core::summary::FeatureValue, &amp;cargo::util::interning::InternedString, (), cargo::core::summary::build_feature_map::{closure#6}, core::iter::adapters::map::map_fold&lt;&amp;cargo::util::interning::InternedString, (&amp;cargo::util::interning::InternedString, ()), (), &lt;hashbrown::set::HashSet&lt;&amp;cargo::util::interning::InternedString, std::collections::hash::map::RandomState&gt; as core::iter::traits::collect::Extend&lt;&amp;cargo::util::interning::InternedString&gt;&gt;::extend&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::flatten::Flatten&lt;alloc::collections::btree::map::Values&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::core::summary::FeatureValue&gt;&gt;&gt;, cargo::core::summary::build_feature_map::{closure#6}&gt;&gt;::{closure#0}, core::iter::traits::iterator::Iterator::for_each::call&lt;(&amp;cargo::util::interning::InternedString, ()), &lt;hashbrown::map::HashMap&lt;&amp;cargo::util::interning::InternedString, (), std::collections::hash::map::RandomState&gt; as core::iter::traits::collect::Extend&lt;(&amp;cargo::util::interning::InternedString, ())&gt;&gt;::extend&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::flatten::Flatten&lt;alloc::collections::btree::map::Values&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::core::summary::FeatureValue&gt;&gt;&gt;, cargo::core::summary::build_feature_map::{closure#6}&gt;, &lt;hashbrown::set::HashSet&lt;&amp;cargo::util::interning::InternedString, std::collections::hash::map::RandomState&gt; as core::iter::traits::collect::Extend&lt;&amp;cargo::util::interning::InternedString&gt;&gt;::extend&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::flatten::Flatten&lt;alloc::collections::btree::map::Values&lt;cargo::util::interning::InternedString, alloc::vec::Vec&lt;cargo::core::summary::FeatureValue&gt;&gt;&gt;, cargo::core::summary::build_feature_map::{closure#6}&gt;&gt;::{closure#0}&gt;&gt;::{closure#0}&gt;::{closure#0}&gt;::{closure#0}&gt;::{closure#0}&gt;::{closure#0} (1 samples, 0.15%)</title><rect x="6.3988%" y="1093" width="0.1488%" height="15" fill="rgb(220,130,37)" fg:x="43" fg:w="1"/><text x="6.6488%" y="1103.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;(&amp;cargo::util::interning::InternedString, ())&gt;&gt;::reserve_rehash::&lt;hashbrown::map::make_hasher&lt;&amp;cargo::util::interning::InternedString, (), std::collections::hash::map::RandomState&gt;::{closure#0}&gt; (1 samples, 0.15%)</title><rect x="6.3988%" y="1077" width="0.1488%" height="15" fill="rgb(211,67,2)" fg:x="43" fg:w="1"/><text x="6.6488%" y="1087.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::hash_one::&lt;&amp;&amp;cargo::util::interning::InternedString&gt; (1 samples, 0.15%)</title><rect x="6.3988%" y="1061" width="0.1488%" height="15" fill="rgb(235,68,52)" fg:x="43" fg:w="1"/><text x="6.6488%" y="1071.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt; as core::hash::Hasher&gt;::write (1 samples, 0.15%)</title><rect x="6.3988%" y="1045" width="0.1488%" height="15" fill="rgb(246,142,3)" fg:x="43" fg:w="1"/><text x="6.6488%" y="1055.50"></text></g><g><title>&lt;cargo::util::toml::schema::TomlManifest&gt;::to_real_manifest::process_dependencies (1 samples, 0.15%)</title><rect x="6.5476%" y="1125" width="0.1488%" height="15" fill="rgb(241,25,7)" fg:x="44" fg:w="1"/><text x="6.7976%" y="1135.50"></text></g><g><title>&lt;cargo::util::toml::schema::DetailedTomlDependency&gt;::to_dependency (1 samples, 0.15%)</title><rect x="6.5476%" y="1109" width="0.1488%" height="15" fill="rgb(242,119,39)" fg:x="44" fg:w="1"/><text x="6.7976%" y="1119.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency&gt;::parse::&lt;&amp;str&gt; (1 samples, 0.15%)</title><rect x="6.5476%" y="1093" width="0.1488%" height="15" fill="rgb(241,98,45)" fg:x="44" fg:w="1"/><text x="6.7976%" y="1103.50"></text></g><g><title>&lt;semver::VersionReq&gt;::parse (1 samples, 0.15%)</title><rect x="6.5476%" y="1077" width="0.1488%" height="15" fill="rgb(254,28,30)" fg:x="44" fg:w="1"/><text x="6.7976%" y="1087.50"></text></g><g><title>&lt;semver::VersionReq as core::str::traits::FromStr&gt;::from_str (1 samples, 0.15%)</title><rect x="6.5476%" y="1061" width="0.1488%" height="15" fill="rgb(241,142,54)" fg:x="44" fg:w="1"/><text x="6.7976%" y="1071.50"></text></g><g><title>semver::parse::version_req (1 samples, 0.15%)</title><rect x="6.5476%" y="1045" width="0.1488%" height="15" fill="rgb(222,85,15)" fg:x="44" fg:w="1"/><text x="6.7976%" y="1055.50"></text></g><g><title>semver::parse::comparator (1 samples, 0.15%)</title><rect x="6.5476%" y="1029" width="0.1488%" height="15" fill="rgb(210,85,47)" fg:x="44" fg:w="1"/><text x="6.7976%" y="1039.50"></text></g><g><title>&lt;cargo::util_semver::PartialVersion as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="6.6964%" y="1125" width="0.1488%" height="15" fill="rgb(224,206,25)" fg:x="45" fg:w="1"/><text x="6.9464%" y="1135.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::filter_map::FilterMap&lt;std::fs::ReadDir, cargo::util::toml::targets::infer_from_directory::{closure#0}&gt;, cargo::util::toml::targets::is_not_dotfile&gt;, cargo::util::toml::targets::infer_from_directory::{closure#1}&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="6.8452%" y="1093" width="0.1488%" height="15" fill="rgb(243,201,19)" fg:x="46" fg:w="1"/><text x="7.0952%" y="1103.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.15%)</title><rect x="6.8452%" y="1077" width="0.1488%" height="15" fill="rgb(236,59,4)" fg:x="46" fg:w="1"/><text x="7.0952%" y="1087.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.15%)</title><rect x="6.8452%" y="1061" width="0.1488%" height="15" fill="rgb(254,179,45)" fg:x="46" fg:w="1"/><text x="7.0952%" y="1071.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.15%)</title><rect x="6.8452%" y="1045" width="0.1488%" height="15" fill="rgb(226,14,10)" fg:x="46" fg:w="1"/><text x="7.0952%" y="1055.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.15%)</title><rect x="6.8452%" y="1029" width="0.1488%" height="15" fill="rgb(244,27,41)" fg:x="46" fg:w="1"/><text x="7.0952%" y="1039.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.15%)</title><rect x="6.8452%" y="1013" width="0.1488%" height="15" fill="rgb(235,35,32)" fg:x="46" fg:w="1"/><text x="7.0952%" y="1023.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.15%)</title><rect x="6.8452%" y="997" width="0.1488%" height="15" fill="rgb(218,68,31)" fg:x="46" fg:w="1"/><text x="7.0952%" y="1007.50"></text></g><g><title>statx (1 samples, 0.15%)</title><rect x="6.8452%" y="981" width="0.1488%" height="15" fill="rgb(207,120,37)" fg:x="46" fg:w="1"/><text x="7.0952%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="965" width="0.1488%" height="15" fill="rgb(227,98,0)" fg:x="46" fg:w="1"/><text x="7.0952%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="949" width="0.1488%" height="15" fill="rgb(207,7,3)" fg:x="46" fg:w="1"/><text x="7.0952%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="933" width="0.1488%" height="15" fill="rgb(206,98,19)" fg:x="46" fg:w="1"/><text x="7.0952%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="917" width="0.1488%" height="15" fill="rgb(217,5,26)" fg:x="46" fg:w="1"/><text x="7.0952%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="901" width="0.1488%" height="15" fill="rgb(235,190,38)" fg:x="46" fg:w="1"/><text x="7.0952%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="885" width="0.1488%" height="15" fill="rgb(247,86,24)" fg:x="46" fg:w="1"/><text x="7.0952%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="869" width="0.1488%" height="15" fill="rgb(205,101,16)" fg:x="46" fg:w="1"/><text x="7.0952%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.8452%" y="853" width="0.1488%" height="15" fill="rgb(246,168,33)" fg:x="46" fg:w="1"/><text x="7.0952%" y="863.50"></text></g><g><title>cargo::util::toml::targets::infer_from_directory (2 samples, 0.30%)</title><rect x="6.8452%" y="1109" width="0.2976%" height="15" fill="rgb(231,114,1)" fg:x="46" fg:w="2"/><text x="7.0952%" y="1119.50"></text></g><g><title>std::sys::unix::fs::readdir (1 samples, 0.15%)</title><rect x="6.9940%" y="1093" width="0.1488%" height="15" fill="rgb(207,184,53)" fg:x="47" fg:w="1"/><text x="7.2440%" y="1103.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.15%)</title><rect x="6.9940%" y="1077" width="0.1488%" height="15" fill="rgb(224,95,51)" fg:x="47" fg:w="1"/><text x="7.2440%" y="1087.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.15%)</title><rect x="6.9940%" y="1061" width="0.1488%" height="15" fill="rgb(212,188,45)" fg:x="47" fg:w="1"/><text x="7.2440%" y="1071.50"></text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (1 samples, 0.15%)</title><rect x="6.9940%" y="1045" width="0.1488%" height="15" fill="rgb(223,154,38)" fg:x="47" fg:w="1"/><text x="7.2440%" y="1055.50"></text></g><g><title>__opendir (1 samples, 0.15%)</title><rect x="6.9940%" y="1029" width="0.1488%" height="15" fill="rgb(251,22,52)" fg:x="47" fg:w="1"/><text x="7.2440%" y="1039.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.15%)</title><rect x="6.9940%" y="1013" width="0.1488%" height="15" fill="rgb(229,209,22)" fg:x="47" fg:w="1"/><text x="7.2440%" y="1023.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.9940%" y="997" width="0.1488%" height="15" fill="rgb(234,138,34)" fg:x="47" fg:w="1"/><text x="7.2440%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.9940%" y="981" width="0.1488%" height="15" fill="rgb(212,95,11)" fg:x="47" fg:w="1"/><text x="7.2440%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.9940%" y="965" width="0.1488%" height="15" fill="rgb(240,179,47)" fg:x="47" fg:w="1"/><text x="7.2440%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.9940%" y="949" width="0.1488%" height="15" fill="rgb(240,163,11)" fg:x="47" fg:w="1"/><text x="7.2440%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.9940%" y="933" width="0.1488%" height="15" fill="rgb(236,37,12)" fg:x="47" fg:w="1"/><text x="7.2440%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.9940%" y="917" width="0.1488%" height="15" fill="rgb(232,164,16)" fg:x="47" fg:w="1"/><text x="7.2440%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="6.9940%" y="901" width="0.1488%" height="15" fill="rgb(244,205,15)" fg:x="47" fg:w="1"/><text x="7.2440%" y="911.50"></text></g><g><title>cargo::util::toml::targets::targets (3 samples, 0.45%)</title><rect x="6.8452%" y="1125" width="0.4464%" height="15" fill="rgb(223,117,47)" fg:x="46" fg:w="3"/><text x="7.0952%" y="1135.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.15%)</title><rect x="7.1429%" y="1109" width="0.1488%" height="15" fill="rgb(244,107,35)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1119.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.15%)</title><rect x="7.1429%" y="1093" width="0.1488%" height="15" fill="rgb(205,140,8)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1103.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.15%)</title><rect x="7.1429%" y="1077" width="0.1488%" height="15" fill="rgb(228,84,46)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1087.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.15%)</title><rect x="7.1429%" y="1061" width="0.1488%" height="15" fill="rgb(254,188,9)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1071.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.15%)</title><rect x="7.1429%" y="1045" width="0.1488%" height="15" fill="rgb(206,112,54)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.15%)</title><rect x="7.1429%" y="1029" width="0.1488%" height="15" fill="rgb(216,84,49)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.15%)</title><rect x="7.1429%" y="1013" width="0.1488%" height="15" fill="rgb(214,194,35)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.15%)</title><rect x="7.1429%" y="997" width="0.1488%" height="15" fill="rgb(249,28,3)" fg:x="48" fg:w="1"/><text x="7.3929%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="7.1429%" y="981" width="0.1488%" height="15" fill="rgb(222,56,52)" fg:x="48" fg:w="1"/><text x="7.3929%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.15%)</title><rect x="7.1429%" y="965" width="0.1488%" height="15" fill="rgb(245,217,50)" fg:x="48" fg:w="1"/><text x="7.3929%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="7.1429%" y="949" width="0.1488%" height="15" fill="rgb(213,201,24)" fg:x="48" fg:w="1"/><text x="7.3929%" y="959.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.15%)</title><rect x="7.1429%" y="933" width="0.1488%" height="15" fill="rgb(248,116,28)" fg:x="48" fg:w="1"/><text x="7.3929%" y="943.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="7.1429%" y="917" width="0.1488%" height="15" fill="rgb(219,72,43)" fg:x="48" fg:w="1"/><text x="7.3929%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.15%)</title><rect x="7.1429%" y="901" width="0.1488%" height="15" fill="rgb(209,138,14)" fg:x="48" fg:w="1"/><text x="7.3929%" y="911.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.15%)</title><rect x="7.1429%" y="885" width="0.1488%" height="15" fill="rgb(222,18,33)" fg:x="48" fg:w="1"/><text x="7.3929%" y="895.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.15%)</title><rect x="7.1429%" y="869" width="0.1488%" height="15" fill="rgb(213,199,7)" fg:x="48" fg:w="1"/><text x="7.3929%" y="879.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="7.1429%" y="853" width="0.1488%" height="15" fill="rgb(250,110,10)" fg:x="48" fg:w="1"/><text x="7.3929%" y="863.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="7.1429%" y="837" width="0.1488%" height="15" fill="rgb(248,123,6)" fg:x="48" fg:w="1"/><text x="7.3929%" y="847.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="7.1429%" y="821" width="0.1488%" height="15" fill="rgb(206,91,31)" fg:x="48" fg:w="1"/><text x="7.3929%" y="831.50"></text></g><g><title>&lt;cargo::util::toml::schema::TomlManifest&gt;::to_real_manifest (9 samples, 1.34%)</title><rect x="6.1012%" y="1141" width="1.3393%" height="15" fill="rgb(211,154,13)" fg:x="41" fg:w="9"/><text x="6.3512%" y="1151.50"></text></g><g><title>std::path::Path::is_dir (1 samples, 0.15%)</title><rect x="7.2917%" y="1125" width="0.1488%" height="15" fill="rgb(225,148,7)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1135.50"></text></g><g><title>std::fs::metadata (1 samples, 0.15%)</title><rect x="7.2917%" y="1109" width="0.1488%" height="15" fill="rgb(220,160,43)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1119.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.15%)</title><rect x="7.2917%" y="1093" width="0.1488%" height="15" fill="rgb(213,52,39)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1103.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.15%)</title><rect x="7.2917%" y="1077" width="0.1488%" height="15" fill="rgb(243,137,7)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1087.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.15%)</title><rect x="7.2917%" y="1061" width="0.1488%" height="15" fill="rgb(230,79,13)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1071.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.15%)</title><rect x="7.2917%" y="1045" width="0.1488%" height="15" fill="rgb(247,105,23)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1055.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.15%)</title><rect x="7.2917%" y="1029" width="0.1488%" height="15" fill="rgb(223,179,41)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1039.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.15%)</title><rect x="7.2917%" y="1013" width="0.1488%" height="15" fill="rgb(218,9,34)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1023.50"></text></g><g><title>statx (1 samples, 0.15%)</title><rect x="7.2917%" y="997" width="0.1488%" height="15" fill="rgb(222,106,8)" fg:x="49" fg:w="1"/><text x="7.5417%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.2917%" y="981" width="0.1488%" height="15" fill="rgb(211,220,0)" fg:x="49" fg:w="1"/><text x="7.5417%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.2917%" y="965" width="0.1488%" height="15" fill="rgb(229,52,16)" fg:x="49" fg:w="1"/><text x="7.5417%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.2917%" y="949" width="0.1488%" height="15" fill="rgb(212,155,18)" fg:x="49" fg:w="1"/><text x="7.5417%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.2917%" y="933" width="0.1488%" height="15" fill="rgb(242,21,14)" fg:x="49" fg:w="1"/><text x="7.5417%" y="943.50"></text></g><g><title>&lt;toml_edit::parser::state::ParseState&gt;::on_array_header (1 samples, 0.15%)</title><rect x="7.4405%" y="1093" width="0.1488%" height="15" fill="rgb(222,19,48)" fg:x="50" fg:w="1"/><text x="7.6905%" y="1103.50"></text></g><g><title>&lt;toml_edit::parser::state::ParseState&gt;::finalize_table (1 samples, 0.15%)</title><rect x="7.4405%" y="1077" width="0.1488%" height="15" fill="rgb(232,45,27)" fg:x="50" fg:w="1"/><text x="7.6905%" y="1087.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="7.5893%" y="1077" width="0.1488%" height="15" fill="rgb(249,103,42)" fg:x="51" fg:w="1"/><text x="7.8393%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.15%)</title><rect x="7.5893%" y="1061" width="0.1488%" height="15" fill="rgb(246,81,33)" fg:x="51" fg:w="1"/><text x="7.8393%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.15%)</title><rect x="7.5893%" y="1045" width="0.1488%" height="15" fill="rgb(252,33,42)" fg:x="51" fg:w="1"/><text x="7.8393%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.15%)</title><rect x="7.5893%" y="1029" width="0.1488%" height="15" fill="rgb(209,212,41)" fg:x="51" fg:w="1"/><text x="7.8393%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.15%)</title><rect x="7.5893%" y="1013" width="0.1488%" height="15" fill="rgb(207,154,6)" fg:x="51" fg:w="1"/><text x="7.8393%" y="1023.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.15%)</title><rect x="7.5893%" y="997" width="0.1488%" height="15" fill="rgb(223,64,47)" fg:x="51" fg:w="1"/><text x="7.8393%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.15%)</title><rect x="7.5893%" y="981" width="0.1488%" height="15" fill="rgb(211,161,38)" fg:x="51" fg:w="1"/><text x="7.8393%" y="991.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="7.5893%" y="965" width="0.1488%" height="15" fill="rgb(219,138,40)" fg:x="51" fg:w="1"/><text x="7.8393%" y="975.50"></text></g><g><title>&lt;toml_edit::parser::state::ParseState&gt;::on_keyval (2 samples, 0.30%)</title><rect x="7.5893%" y="1093" width="0.2976%" height="15" fill="rgb(241,228,46)" fg:x="51" fg:w="2"/><text x="7.8393%" y="1103.50"></text></g><g><title>&lt;indexmap::map::core::VacantEntry&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::insert (1 samples, 0.15%)</title><rect x="7.7381%" y="1077" width="0.1488%" height="15" fill="rgb(223,209,38)" fg:x="52" fg:w="1"/><text x="7.9881%" y="1087.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::push_entry (1 samples, 0.15%)</title><rect x="7.7381%" y="1061" width="0.1488%" height="15" fill="rgb(236,164,45)" fg:x="52" fg:w="1"/><text x="7.9881%" y="1071.50"></text></g><g><title>&lt;indexmap::map::core::IndexMapCore&lt;toml_edit::internal_string::InternalString, toml_edit::table::TableKeyValue&gt;&gt;::reserve_entries (1 samples, 0.15%)</title><rect x="7.7381%" y="1045" width="0.1488%" height="15" fill="rgb(231,15,5)" fg:x="52" fg:w="1"/><text x="7.9881%" y="1055.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (1 samples, 0.15%)</title><rect x="7.7381%" y="1029" width="0.1488%" height="15" fill="rgb(252,35,15)" fg:x="52" fg:w="1"/><text x="7.9881%" y="1039.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="7.7381%" y="1013" width="0.1488%" height="15" fill="rgb(248,181,18)" fg:x="52" fg:w="1"/><text x="7.9881%" y="1023.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="7.7381%" y="997" width="0.1488%" height="15" fill="rgb(233,39,42)" fg:x="52" fg:w="1"/><text x="7.9881%" y="1007.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="7.7381%" y="981" width="0.1488%" height="15" fill="rgb(238,110,33)" fg:x="52" fg:w="1"/><text x="7.9881%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="965" width="0.1488%" height="15" fill="rgb(233,195,10)" fg:x="52" fg:w="1"/><text x="7.9881%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="949" width="0.1488%" height="15" fill="rgb(254,105,3)" fg:x="52" fg:w="1"/><text x="7.9881%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="933" width="0.1488%" height="15" fill="rgb(221,225,9)" fg:x="52" fg:w="1"/><text x="7.9881%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="917" width="0.1488%" height="15" fill="rgb(224,227,45)" fg:x="52" fg:w="1"/><text x="7.9881%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="901" width="0.1488%" height="15" fill="rgb(229,198,43)" fg:x="52" fg:w="1"/><text x="7.9881%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="885" width="0.1488%" height="15" fill="rgb(206,209,35)" fg:x="52" fg:w="1"/><text x="7.9881%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="869" width="0.1488%" height="15" fill="rgb(245,195,53)" fg:x="52" fg:w="1"/><text x="7.9881%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="853" width="0.1488%" height="15" fill="rgb(240,92,26)" fg:x="52" fg:w="1"/><text x="7.9881%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="837" width="0.1488%" height="15" fill="rgb(207,40,23)" fg:x="52" fg:w="1"/><text x="7.9881%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="821" width="0.1488%" height="15" fill="rgb(223,111,35)" fg:x="52" fg:w="1"/><text x="7.9881%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="7.7381%" y="805" width="0.1488%" height="15" fill="rgb(229,147,28)" fg:x="52" fg:w="1"/><text x="7.9881%" y="815.50"></text></g><g><title>toml_edit::parser::key::key (1 samples, 0.15%)</title><rect x="7.8869%" y="1077" width="0.1488%" height="15" fill="rgb(211,29,28)" fg:x="53" fg:w="1"/><text x="8.1369%" y="1087.50"></text></g><g><title>&lt;winnow::combinator::parser::Map&lt;(winnow::combinator::parser::Span&lt;toml_edit::parser::trivia::ws, winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, &amp;str, winnow::error::ContextError&gt;, toml_edit::parser::key::simple_key, winnow::combinator::parser::Span&lt;toml_edit::parser::trivia::ws, winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, &amp;str, winnow::error::ContextError&gt;), toml_edit::parser::key::key::{closure#0}, winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, (core::ops::range::Range&lt;usize&gt;, (toml_edit::raw_string::RawString, toml_edit::internal_string::InternalString), core::ops::range::Range&lt;usize&gt;), toml_edit::key::Key, winnow::error::ContextError&gt; as winnow::parser::Parser&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, toml_edit::key::Key, winnow::error::ContextError&gt;&gt;::parse_next (1 samples, 0.15%)</title><rect x="7.8869%" y="1061" width="0.1488%" height="15" fill="rgb(228,72,33)" fg:x="53" fg:w="1"/><text x="8.1369%" y="1071.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;toml_edit::item::Item&gt;&gt;::reserve_for_push (1 samples, 0.15%)</title><rect x="8.0357%" y="1061" width="0.1488%" height="15" fill="rgb(205,214,31)" fg:x="54" fg:w="1"/><text x="8.2857%" y="1071.50"></text></g><g><title>alloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt; (1 samples, 0.15%)</title><rect x="8.0357%" y="1045" width="0.1488%" height="15" fill="rgb(224,111,15)" fg:x="54" fg:w="1"/><text x="8.2857%" y="1055.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.15%)</title><rect x="8.0357%" y="1029" width="0.1488%" height="15" fill="rgb(253,21,26)" fg:x="54" fg:w="1"/><text x="8.2857%" y="1039.50"></text></g><g><title>_int_realloc (1 samples, 0.15%)</title><rect x="8.0357%" y="1013" width="0.1488%" height="15" fill="rgb(245,139,43)" fg:x="54" fg:w="1"/><text x="8.2857%" y="1023.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="8.0357%" y="997" width="0.1488%" height="15" fill="rgb(252,170,7)" fg:x="54" fg:w="1"/><text x="8.2857%" y="1007.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.15%)</title><rect x="8.1845%" y="1061" width="0.1488%" height="15" fill="rgb(231,118,14)" fg:x="55" fg:w="1"/><text x="8.4345%" y="1071.50"></text></g><g><title>_int_malloc (1 samples, 0.15%)</title><rect x="8.1845%" y="1045" width="0.1488%" height="15" fill="rgb(238,83,0)" fg:x="55" fg:w="1"/><text x="8.4345%" y="1055.50"></text></g><g><title>cargo::util::toml::read_manifest (21 samples, 3.12%)</title><rect x="5.3571%" y="1157" width="3.1250%" height="15" fill="rgb(221,39,39)" fg:x="36" fg:w="21"/><text x="5.6071%" y="1167.50">car..</text></g><g><title>&lt;toml_edit::de::Deserializer as core::str::traits::FromStr&gt;::from_str (7 samples, 1.04%)</title><rect x="7.4405%" y="1141" width="1.0417%" height="15" fill="rgb(222,119,46)" fg:x="50" fg:w="7"/><text x="7.6905%" y="1151.50"></text></g><g><title>toml_edit::parser::parse_document (7 samples, 1.04%)</title><rect x="7.4405%" y="1125" width="1.0417%" height="15" fill="rgb(222,165,49)" fg:x="50" fg:w="7"/><text x="7.6905%" y="1135.50"></text></g><g><title>winnow::combinator::multi::repeat::&lt;winnow::stream::Located&lt;&amp;winnow::stream::BStr&gt;, ((), ()), (), winnow::error::ContextError, (toml_edit::parser::document::document::{closure#2}, toml_edit::parser::document::parse_ws::{closure#0}), core::ops::range::RangeFrom&lt;usize&gt;&gt;::{closure#0} (7 samples, 1.04%)</title><rect x="7.4405%" y="1109" width="1.0417%" height="15" fill="rgb(219,113,52)" fg:x="50" fg:w="7"/><text x="7.6905%" y="1119.50"></text></g><g><title>toml_edit::parser::document::parse_keyval (4 samples, 0.60%)</title><rect x="7.8869%" y="1093" width="0.5952%" height="15" fill="rgb(214,7,15)" fg:x="53" fg:w="4"/><text x="8.1369%" y="1103.50"></text></g><g><title>toml_edit::parser::value::value::{closure#0} (3 samples, 0.45%)</title><rect x="8.0357%" y="1077" width="0.4464%" height="15" fill="rgb(235,32,4)" fg:x="54" fg:w="3"/><text x="8.2857%" y="1087.50"></text></g><g><title>toml_edit::parser::array::array_value::{closure#0} (1 samples, 0.15%)</title><rect x="8.3333%" y="1061" width="0.1488%" height="15" fill="rgb(238,90,54)" fg:x="56" fg:w="1"/><text x="8.5833%" y="1071.50"></text></g><g><title>toml_edit::parser::value::value::{closure#0} (1 samples, 0.15%)</title><rect x="8.3333%" y="1045" width="0.1488%" height="15" fill="rgb(213,208,19)" fg:x="56" fg:w="1"/><text x="8.5833%" y="1055.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.15%)</title><rect x="8.3333%" y="1029" width="0.1488%" height="15" fill="rgb(233,156,4)" fg:x="56" fg:w="1"/><text x="8.5833%" y="1039.50"></text></g><g><title>[unknown] (53 samples, 7.89%)</title><rect x="0.7440%" y="1173" width="7.8869%" height="15" fill="rgb(207,194,5)" fg:x="5" fg:w="53"/><text x="0.9940%" y="1183.50">[unknown]</text></g><g><title>core::ptr::drop_in_place::&lt;cargo_platform::cfg::CfgExpr&gt; (1 samples, 0.15%)</title><rect x="8.4821%" y="1157" width="0.1488%" height="15" fill="rgb(206,111,30)" fg:x="57" fg:w="1"/><text x="8.7321%" y="1167.50"></text></g><g><title>&lt;&amp;cargo::core::package::SerializedPackage as serde::ser::Serialize&gt;::serialize::&lt;&amp;mut serde_json::ser::Serializer&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;&gt; (1 samples, 0.15%)</title><rect x="8.6310%" y="885" width="0.1488%" height="15" fill="rgb(243,70,54)" fg:x="58" fg:w="1"/><text x="8.8810%" y="895.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;, serde_json::ser::CompactFormatter&gt; as serde::ser::SerializeStruct&gt;::serialize_field::&lt;cargo::core::source_id::SourceId&gt; (1 samples, 0.15%)</title><rect x="8.6310%" y="869" width="0.1488%" height="15" fill="rgb(242,28,8)" fg:x="58" fg:w="1"/><text x="8.8810%" y="879.50"></text></g><g><title>&lt;anstream::auto::AutoStream&lt;std::io::stdio::Stdout&gt; as std::io::Write&gt;::write_fmt (2 samples, 0.30%)</title><rect x="8.7798%" y="885" width="0.2976%" height="15" fill="rgb(219,106,18)" fg:x="59" fg:w="2"/><text x="9.0298%" y="895.50"></text></g><g><title>anstream::strip::write_fmt (2 samples, 0.30%)</title><rect x="8.7798%" y="869" width="0.2976%" height="15" fill="rgb(244,222,10)" fg:x="59" fg:w="2"/><text x="9.0298%" y="879.50"></text></g><g><title>core::fmt::write (2 samples, 0.30%)</title><rect x="8.7798%" y="853" width="0.2976%" height="15" fill="rgb(236,179,52)" fg:x="59" fg:w="2"/><text x="9.0298%" y="863.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.30%)</title><rect x="8.7798%" y="837" width="0.2976%" height="15" fill="rgb(213,23,39)" fg:x="59" fg:w="2"/><text x="9.0298%" y="847.50"></text></g><g><title>&lt;anstream::fmt::Adapter&lt;anstream::strip::write_fmt::{closure#0}&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.30%)</title><rect x="8.7798%" y="821" width="0.2976%" height="15" fill="rgb(238,48,10)" fg:x="59" fg:w="2"/><text x="9.0298%" y="831.50"></text></g><g><title>anstream::adapter::strip::next_bytes (2 samples, 0.30%)</title><rect x="8.7798%" y="805" width="0.2976%" height="15" fill="rgb(251,196,23)" fg:x="59" fg:w="2"/><text x="9.0298%" y="815.50"></text></g><g><title>_start (4 samples, 0.60%)</title><rect x="8.6310%" y="1173" width="0.5952%" height="15" fill="rgb(250,152,24)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1183.50"></text></g><g><title>__libc_start_main_impl (4 samples, 0.60%)</title><rect x="8.6310%" y="1157" width="0.5952%" height="15" fill="rgb(209,150,17)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1167.50"></text></g><g><title>__libc_start_call_main (4 samples, 0.60%)</title><rect x="8.6310%" y="1141" width="0.5952%" height="15" fill="rgb(234,202,34)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1151.50"></text></g><g><title>std::rt::lang_start::&lt;()&gt; (4 samples, 0.60%)</title><rect x="8.6310%" y="1125" width="0.5952%" height="15" fill="rgb(253,148,53)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1135.50"></text></g><g><title>std::rt::lang_start_internal (4 samples, 0.60%)</title><rect x="8.6310%" y="1109" width="0.5952%" height="15" fill="rgb(218,129,16)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1119.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.60%)</title><rect x="8.6310%" y="1093" width="0.5952%" height="15" fill="rgb(216,85,19)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1103.50"></text></g><g><title>std::panicking::try (4 samples, 0.60%)</title><rect x="8.6310%" y="1077" width="0.5952%" height="15" fill="rgb(235,228,7)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1087.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.60%)</title><rect x="8.6310%" y="1061" width="0.5952%" height="15" fill="rgb(245,175,0)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1071.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (4 samples, 0.60%)</title><rect x="8.6310%" y="1045" width="0.5952%" height="15" fill="rgb(208,168,36)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.60%)</title><rect x="8.6310%" y="1029" width="0.5952%" height="15" fill="rgb(246,171,24)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1039.50"></text></g><g><title>std::panicking::try (4 samples, 0.60%)</title><rect x="8.6310%" y="1013" width="0.5952%" height="15" fill="rgb(215,142,24)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.60%)</title><rect x="8.6310%" y="997" width="0.5952%" height="15" fill="rgb(250,187,7)" fg:x="58" fg:w="4"/><text x="8.8810%" y="1007.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 0.60%)</title><rect x="8.6310%" y="981" width="0.5952%" height="15" fill="rgb(228,66,33)" fg:x="58" fg:w="4"/><text x="8.8810%" y="991.50"></text></g><g><title>std::rt::lang_start::&lt;()&gt;::{closure#0} (4 samples, 0.60%)</title><rect x="8.6310%" y="965" width="0.5952%" height="15" fill="rgb(234,215,21)" fg:x="58" fg:w="4"/><text x="8.8810%" y="975.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace::&lt;fn(), ()&gt; (4 samples, 0.60%)</title><rect x="8.6310%" y="949" width="0.5952%" height="15" fill="rgb(222,191,20)" fg:x="58" fg:w="4"/><text x="8.8810%" y="959.50"></text></g><g><title>cargo::main (4 samples, 0.60%)</title><rect x="8.6310%" y="933" width="0.5952%" height="15" fill="rgb(245,79,54)" fg:x="58" fg:w="4"/><text x="8.8810%" y="943.50"></text></g><g><title>cargo::cli::main (4 samples, 0.60%)</title><rect x="8.6310%" y="917" width="0.5952%" height="15" fill="rgb(240,10,37)" fg:x="58" fg:w="4"/><text x="8.8810%" y="927.50"></text></g><g><title>cargo::commands::metadata::exec (4 samples, 0.60%)</title><rect x="8.6310%" y="901" width="0.5952%" height="15" fill="rgb(214,192,32)" fg:x="58" fg:w="4"/><text x="8.8810%" y="911.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::ops::cargo_output_metadata::ExportInfo&gt; (1 samples, 0.15%)</title><rect x="9.0774%" y="885" width="0.1488%" height="15" fill="rgb(209,36,54)" fg:x="61" fg:w="1"/><text x="9.3274%" y="895.50"></text></g><g><title>core::ptr::drop_in_place::&lt;cargo::core::package::SerializedPackage&gt; (1 samples, 0.15%)</title><rect x="9.0774%" y="869" width="0.1488%" height="15" fill="rgb(220,10,11)" fg:x="61" fg:w="1"/><text x="9.3274%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;cargo::core::manifest::TargetInner&gt;&gt;::drop_slow (1 samples, 0.15%)</title><rect x="9.0774%" y="853" width="0.1488%" height="15" fill="rgb(221,106,17)" fg:x="61" fg:w="1"/><text x="9.3274%" y="863.50"></text></g><g><title>__rust_dealloc (1 samples, 0.15%)</title><rect x="9.0774%" y="837" width="0.1488%" height="15" fill="rgb(251,142,44)" fg:x="61" fg:w="1"/><text x="9.3274%" y="847.50"></text></g><g><title>cargo (63 samples, 9.38%)</title><rect x="0.0000%" y="1189" width="9.3750%" height="15" fill="rgb(238,13,15)" fg:x="0" fg:w="63"/><text x="0.2500%" y="1199.50">cargo</text></g><g><title>tracing_log::ERROR_CS (1 samples, 0.15%)</title><rect x="9.2262%" y="1173" width="0.1488%" height="15" fill="rgb(208,107,27)" fg:x="62" fg:w="1"/><text x="9.4762%" y="1183.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.15%)</title><rect x="9.2262%" y="1157" width="0.1488%" height="15" fill="rgb(205,136,37)" fg:x="62" fg:w="1"/><text x="9.4762%" y="1167.50"></text></g><g><title>[unknown] (48 samples, 7.14%)</title><rect x="9.3750%" y="1173" width="7.1429%" height="15" fill="rgb(250,205,27)" fg:x="63" fg:w="48"/><text x="9.6250%" y="1183.50">[unknown]</text></g><g><title>[unknown] (27 samples, 4.02%)</title><rect x="12.5000%" y="1157" width="4.0179%" height="15" fill="rgb(210,80,43)" fg:x="84" fg:w="27"/><text x="12.7500%" y="1167.50">[unk..</text></g><g><title>[unknown] (27 samples, 4.02%)</title><rect x="12.5000%" y="1141" width="4.0179%" height="15" fill="rgb(247,160,36)" fg:x="84" fg:w="27"/><text x="12.7500%" y="1151.50">[unk..</text></g><g><title>[unknown] (27 samples, 4.02%)</title><rect x="12.5000%" y="1125" width="4.0179%" height="15" fill="rgb(234,13,49)" fg:x="84" fg:w="27"/><text x="12.7500%" y="1135.50">[unk..</text></g><g><title>[unknown] (27 samples, 4.02%)</title><rect x="12.5000%" y="1109" width="4.0179%" height="15" fill="rgb(234,122,0)" fg:x="84" fg:w="27"/><text x="12.7500%" y="1119.50">[unk..</text></g><g><title>[unknown] (27 samples, 4.02%)</title><rect x="12.5000%" y="1093" width="4.0179%" height="15" fill="rgb(207,146,38)" fg:x="84" fg:w="27"/><text x="12.7500%" y="1103.50">[unk..</text></g><g><title>[unknown] (27 samples, 4.02%)</title><rect x="12.5000%" y="1077" width="4.0179%" height="15" fill="rgb(207,177,25)" fg:x="84" fg:w="27"/><text x="12.7500%" y="1087.50">[unk..</text></g><g><title>[unknown] (27 samples, 4.02%)</title><rect x="12.5000%" y="1061" width="4.0179%" height="15" fill="rgb(211,178,42)" fg:x="84" fg:w="27"/><text x="12.7500%" y="1071.50">[unk..</text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="16.2202%" y="1045" width="0.2976%" height="15" fill="rgb(230,69,54)" fg:x="109" fg:w="2"/><text x="16.4702%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="16.2202%" y="1029" width="0.2976%" height="15" fill="rgb(214,135,41)" fg:x="109" fg:w="2"/><text x="16.4702%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="16.2202%" y="1013" width="0.2976%" height="15" fill="rgb(237,67,25)" fg:x="109" fg:w="2"/><text x="16.4702%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="16.2202%" y="997" width="0.2976%" height="15" fill="rgb(222,189,50)" fg:x="109" fg:w="2"/><text x="16.4702%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="16.2202%" y="981" width="0.2976%" height="15" fill="rgb(245,148,34)" fg:x="109" fg:w="2"/><text x="16.4702%" y="991.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="16.2202%" y="965" width="0.2976%" height="15" fill="rgb(222,29,6)" fg:x="109" fg:w="2"/><text x="16.4702%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="16.3690%" y="949" width="0.1488%" height="15" fill="rgb(221,189,43)" fg:x="110" fg:w="1"/><text x="16.6190%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="16.3690%" y="933" width="0.1488%" height="15" fill="rgb(207,36,27)" fg:x="110" fg:w="1"/><text x="16.6190%" y="943.50"></text></g><g><title>__GI___sched_yield (293 samples, 43.60%)</title><rect x="16.8155%" y="1125" width="43.6012%" height="15" fill="rgb(217,90,24)" fg:x="113" fg:w="293"/><text x="17.0655%" y="1135.50">__GI___sched_yield</text></g><g><title>[unknown] (286 samples, 42.56%)</title><rect x="17.8571%" y="1109" width="42.5595%" height="15" fill="rgb(224,66,35)" fg:x="120" fg:w="286"/><text x="18.1071%" y="1119.50">[unknown]</text></g><g><title>[unknown] (188 samples, 27.98%)</title><rect x="32.4405%" y="1093" width="27.9762%" height="15" fill="rgb(221,13,50)" fg:x="218" fg:w="188"/><text x="32.6905%" y="1103.50">[unknown]</text></g><g><title>[unknown] (175 samples, 26.04%)</title><rect x="34.3750%" y="1077" width="26.0417%" height="15" fill="rgb(236,68,49)" fg:x="231" fg:w="175"/><text x="34.6250%" y="1087.50">[unknown]</text></g><g><title>[unknown] (103 samples, 15.33%)</title><rect x="45.0893%" y="1061" width="15.3274%" height="15" fill="rgb(229,146,28)" fg:x="303" fg:w="103"/><text x="45.3393%" y="1071.50">[unknown]</text></g><g><title>[unknown] (86 samples, 12.80%)</title><rect x="47.6190%" y="1045" width="12.7976%" height="15" fill="rgb(225,31,38)" fg:x="320" fg:w="86"/><text x="47.8690%" y="1055.50">[unknown]</text></g><g><title>[unknown] (77 samples, 11.46%)</title><rect x="48.9583%" y="1029" width="11.4583%" height="15" fill="rgb(250,208,3)" fg:x="329" fg:w="77"/><text x="49.2083%" y="1039.50">[unknown]</text></g><g><title>[unknown] (63 samples, 9.38%)</title><rect x="51.0417%" y="1013" width="9.3750%" height="15" fill="rgb(246,54,23)" fg:x="343" fg:w="63"/><text x="51.2917%" y="1023.50">[unknown]</text></g><g><title>[unknown] (41 samples, 6.10%)</title><rect x="54.3155%" y="997" width="6.1012%" height="15" fill="rgb(243,76,11)" fg:x="365" fg:w="41"/><text x="54.5655%" y="1007.50">[unknown]</text></g><g><title>[unknown] (33 samples, 4.91%)</title><rect x="55.5060%" y="981" width="4.9107%" height="15" fill="rgb(245,21,50)" fg:x="373" fg:w="33"/><text x="55.7560%" y="991.50">[unkno..</text></g><g><title>[unknown] (17 samples, 2.53%)</title><rect x="57.8869%" y="965" width="2.5298%" height="15" fill="rgb(228,9,43)" fg:x="389" fg:w="17"/><text x="58.1369%" y="975.50">[u..</text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="60.1190%" y="949" width="0.2976%" height="15" fill="rgb(208,100,47)" fg:x="404" fg:w="2"/><text x="60.3690%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="60.1190%" y="933" width="0.2976%" height="15" fill="rgb(232,26,8)" fg:x="404" fg:w="2"/><text x="60.3690%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="60.1190%" y="917" width="0.2976%" height="15" fill="rgb(216,166,38)" fg:x="404" fg:w="2"/><text x="60.3690%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="60.2679%" y="901" width="0.1488%" height="15" fill="rgb(251,202,51)" fg:x="405" fg:w="1"/><text x="60.5179%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="60.2679%" y="885" width="0.1488%" height="15" fill="rgb(254,216,34)" fg:x="405" fg:w="1"/><text x="60.5179%" y="895.50"></text></g><g><title>_dl_runtime_resolve_xsavec (1 samples, 0.15%)</title><rect x="60.4167%" y="1125" width="0.1488%" height="15" fill="rgb(251,32,27)" fg:x="406" fg:w="1"/><text x="60.6667%" y="1135.50"></text></g><g><title>_dl_fixup (1 samples, 0.15%)</title><rect x="60.4167%" y="1109" width="0.1488%" height="15" fill="rgb(208,127,28)" fg:x="406" fg:w="1"/><text x="60.6667%" y="1119.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.15%)</title><rect x="60.4167%" y="1093" width="0.1488%" height="15" fill="rgb(224,137,22)" fg:x="406" fg:w="1"/><text x="60.6667%" y="1103.50"></text></g><g><title>do_lookup_x (1 samples, 0.15%)</title><rect x="60.4167%" y="1077" width="0.1488%" height="15" fill="rgb(254,70,32)" fg:x="406" fg:w="1"/><text x="60.6667%" y="1087.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.45%)</title><rect x="60.5655%" y="1093" width="0.4464%" height="15" fill="rgb(229,75,37)" fg:x="407" fg:w="3"/><text x="60.8155%" y="1103.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.45%)</title><rect x="60.5655%" y="1077" width="0.4464%" height="15" fill="rgb(252,64,23)" fg:x="407" fg:w="3"/><text x="60.8155%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="1061" width="0.4464%" height="15" fill="rgb(232,162,48)" fg:x="407" fg:w="3"/><text x="60.8155%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="1045" width="0.4464%" height="15" fill="rgb(246,160,12)" fg:x="407" fg:w="3"/><text x="60.8155%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="1029" width="0.4464%" height="15" fill="rgb(247,166,0)" fg:x="407" fg:w="3"/><text x="60.8155%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="1013" width="0.4464%" height="15" fill="rgb(249,219,21)" fg:x="407" fg:w="3"/><text x="60.8155%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="997" width="0.4464%" height="15" fill="rgb(205,209,3)" fg:x="407" fg:w="3"/><text x="60.8155%" y="1007.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="981" width="0.4464%" height="15" fill="rgb(243,44,1)" fg:x="407" fg:w="3"/><text x="60.8155%" y="991.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="965" width="0.4464%" height="15" fill="rgb(206,159,16)" fg:x="407" fg:w="3"/><text x="60.8155%" y="975.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="949" width="0.4464%" height="15" fill="rgb(244,77,30)" fg:x="407" fg:w="3"/><text x="60.8155%" y="959.50"></text></g><g><title>[unknown] (3 samples, 0.45%)</title><rect x="60.5655%" y="933" width="0.4464%" height="15" fill="rgb(218,69,12)" fg:x="407" fg:w="3"/><text x="60.8155%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="60.7143%" y="917" width="0.2976%" height="15" fill="rgb(212,87,7)" fg:x="408" fg:w="2"/><text x="60.9643%" y="927.50"></text></g><g><title>__clone3 (300 samples, 44.64%)</title><rect x="16.5179%" y="1173" width="44.6429%" height="15" fill="rgb(245,114,25)" fg:x="111" fg:w="300"/><text x="16.7679%" y="1183.50">__clone3</text></g><g><title>start_thread (300 samples, 44.64%)</title><rect x="16.5179%" y="1157" width="44.6429%" height="15" fill="rgb(210,61,42)" fg:x="111" fg:w="300"/><text x="16.7679%" y="1167.50">start_thread</text></g><g><title>[libopenblasp-r0.3.20.so] (300 samples, 44.64%)</title><rect x="16.5179%" y="1141" width="44.6429%" height="15" fill="rgb(211,52,33)" fg:x="111" fg:w="300"/><text x="16.7679%" y="1151.50">[libopenblasp-r0.3.20.so]</text></g><g><title>blas_memory_alloc (4 samples, 0.60%)</title><rect x="60.5655%" y="1125" width="0.5952%" height="15" fill="rgb(234,58,33)" fg:x="407" fg:w="4"/><text x="60.8155%" y="1135.50"></text></g><g><title>[libopenblasp-r0.3.20.so] (4 samples, 0.60%)</title><rect x="60.5655%" y="1109" width="0.5952%" height="15" fill="rgb(220,115,36)" fg:x="407" fg:w="4"/><text x="60.8155%" y="1119.50"></text></g><g><title>syscall (1 samples, 0.15%)</title><rect x="61.0119%" y="1093" width="0.1488%" height="15" fill="rgb(243,153,54)" fg:x="410" fg:w="1"/><text x="61.2619%" y="1103.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="61.0119%" y="1077" width="0.1488%" height="15" fill="rgb(251,47,18)" fg:x="410" fg:w="1"/><text x="61.2619%" y="1087.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="61.0119%" y="1061" width="0.1488%" height="15" fill="rgb(242,102,42)" fg:x="410" fg:w="1"/><text x="61.2619%" y="1071.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="61.0119%" y="1045" width="0.1488%" height="15" fill="rgb(234,31,38)" fg:x="410" fg:w="1"/><text x="61.2619%" y="1055.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="61.0119%" y="1029" width="0.1488%" height="15" fill="rgb(221,117,51)" fg:x="410" fg:w="1"/><text x="61.2619%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;im2col_function::Im2ColRes&lt;f32&gt;&gt; (14 samples, 2.08%)</title><rect x="61.1607%" y="549" width="2.0833%" height="15" fill="rgb(212,20,18)" fg:x="411" fg:w="14"/><text x="61.4107%" y="559.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;zenu_matrix::matrix_impl::Matrix&lt;zenu_matrix::memory_impl::OwnedMem&lt;f32&gt;,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt; (14 samples, 2.08%)</title><rect x="61.1607%" y="533" width="2.0833%" height="15" fill="rgb(245,133,36)" fg:x="411" fg:w="14"/><text x="61.4107%" y="543.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;zenu_matrix::memory_impl::OwnedMem&lt;f32&gt;&gt; (14 samples, 2.08%)</title><rect x="61.1607%" y="517" width="2.0833%" height="15" fill="rgb(212,6,19)" fg:x="411" fg:w="14"/><text x="61.4107%" y="527.50">c..</text></g><g><title>&lt;zenu_matrix::memory_impl::OwnedMem&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 2.08%)</title><rect x="61.1607%" y="501" width="2.0833%" height="15" fill="rgb(218,1,36)" fg:x="411" fg:w="14"/><text x="61.4107%" y="511.50">&lt;..</text></g><g><title>&lt;zenu_matrix::memory_impl::CpuAccessor&lt;T&gt; as zenu_matrix::memory::MemoryAccessor&gt;::drop (14 samples, 2.08%)</title><rect x="61.1607%" y="485" width="2.0833%" height="15" fill="rgb(246,84,54)" fg:x="411" fg:w="14"/><text x="61.4107%" y="495.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (14 samples, 2.08%)</title><rect x="61.1607%" y="469" width="2.0833%" height="15" fill="rgb(242,110,6)" fg:x="411" fg:w="14"/><text x="61.4107%" y="479.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (14 samples, 2.08%)</title><rect x="61.1607%" y="453" width="2.0833%" height="15" fill="rgb(214,47,5)" fg:x="411" fg:w="14"/><text x="61.4107%" y="463.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 2.08%)</title><rect x="61.1607%" y="437" width="2.0833%" height="15" fill="rgb(218,159,25)" fg:x="411" fg:w="14"/><text x="61.4107%" y="447.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 2.08%)</title><rect x="61.1607%" y="421" width="2.0833%" height="15" fill="rgb(215,211,28)" fg:x="411" fg:w="14"/><text x="61.4107%" y="431.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (14 samples, 2.08%)</title><rect x="61.1607%" y="405" width="2.0833%" height="15" fill="rgb(238,59,32)" fg:x="411" fg:w="14"/><text x="61.4107%" y="415.50">a..</text></g><g><title>__GI___libc_free (14 samples, 2.08%)</title><rect x="61.1607%" y="389" width="2.0833%" height="15" fill="rgb(226,82,3)" fg:x="411" fg:w="14"/><text x="61.4107%" y="399.50">_..</text></g><g><title>__GI___munmap (14 samples, 2.08%)</title><rect x="61.1607%" y="373" width="2.0833%" height="15" fill="rgb(240,164,32)" fg:x="411" fg:w="14"/><text x="61.4107%" y="383.50">_..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="357" width="2.0833%" height="15" fill="rgb(232,46,7)" fg:x="411" fg:w="14"/><text x="61.4107%" y="367.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="341" width="2.0833%" height="15" fill="rgb(229,129,53)" fg:x="411" fg:w="14"/><text x="61.4107%" y="351.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="325" width="2.0833%" height="15" fill="rgb(234,188,29)" fg:x="411" fg:w="14"/><text x="61.4107%" y="335.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="309" width="2.0833%" height="15" fill="rgb(246,141,4)" fg:x="411" fg:w="14"/><text x="61.4107%" y="319.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="293" width="2.0833%" height="15" fill="rgb(229,23,39)" fg:x="411" fg:w="14"/><text x="61.4107%" y="303.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="277" width="2.0833%" height="15" fill="rgb(206,12,3)" fg:x="411" fg:w="14"/><text x="61.4107%" y="287.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="261" width="2.0833%" height="15" fill="rgb(252,226,20)" fg:x="411" fg:w="14"/><text x="61.4107%" y="271.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="245" width="2.0833%" height="15" fill="rgb(216,123,35)" fg:x="411" fg:w="14"/><text x="61.4107%" y="255.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="229" width="2.0833%" height="15" fill="rgb(212,68,40)" fg:x="411" fg:w="14"/><text x="61.4107%" y="239.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="213" width="2.0833%" height="15" fill="rgb(254,125,32)" fg:x="411" fg:w="14"/><text x="61.4107%" y="223.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="197" width="2.0833%" height="15" fill="rgb(253,97,22)" fg:x="411" fg:w="14"/><text x="61.4107%" y="207.50">[..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="61.1607%" y="181" width="2.0833%" height="15" fill="rgb(241,101,14)" fg:x="411" fg:w="14"/><text x="61.4107%" y="191.50">[..</text></g><g><title>[unknown] (11 samples, 1.64%)</title><rect x="61.6071%" y="165" width="1.6369%" height="15" fill="rgb(238,103,29)" fg:x="414" fg:w="11"/><text x="61.8571%" y="175.50"></text></g><g><title>[unknown] (11 samples, 1.64%)</title><rect x="61.6071%" y="149" width="1.6369%" height="15" fill="rgb(233,195,47)" fg:x="414" fg:w="11"/><text x="61.8571%" y="159.50"></text></g><g><title>[unknown] (10 samples, 1.49%)</title><rect x="61.7560%" y="133" width="1.4881%" height="15" fill="rgb(246,218,30)" fg:x="415" fg:w="10"/><text x="62.0060%" y="143.50"></text></g><g><title>[unknown] (9 samples, 1.34%)</title><rect x="61.9048%" y="117" width="1.3393%" height="15" fill="rgb(219,145,47)" fg:x="416" fg:w="9"/><text x="62.1548%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.60%)</title><rect x="62.6488%" y="101" width="0.5952%" height="15" fill="rgb(243,12,26)" fg:x="421" fg:w="4"/><text x="62.8988%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="63.0952%" y="85" width="0.1488%" height="15" fill="rgb(214,87,16)" fg:x="424" fg:w="1"/><text x="63.3452%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="63.0952%" y="69" width="0.1488%" height="15" fill="rgb(208,99,42)" fg:x="424" fg:w="1"/><text x="63.3452%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="63.0952%" y="53" width="0.1488%" height="15" fill="rgb(253,99,2)" fg:x="424" fg:w="1"/><text x="63.3452%" y="63.50"></text></g><g><title>&lt;zenu_matrix::matrix_impl::Matrix&lt;V,D&gt; as zenu_matrix::operation::reshape::Reshape&lt;T&gt;&gt;::reshape_new_matrix (1 samples, 0.15%)</title><rect x="63.2440%" y="533" width="0.1488%" height="15" fill="rgb(220,168,23)" fg:x="425" fg:w="1"/><text x="63.4940%" y="543.50"></text></g><g><title>&lt;zenu_matrix::matrix_impl::Matrix&lt;M,D&gt; as zenu_matrix::operation::to_default_stride::ToDefaultStride&lt;T&gt;&gt;::to_default_stride (1 samples, 0.15%)</title><rect x="63.2440%" y="517" width="0.1488%" height="15" fill="rgb(242,38,24)" fg:x="425" fg:w="1"/><text x="63.4940%" y="527.50"></text></g><g><title>&lt;zenu_matrix::matrix_impl::Matrix&lt;VM,zenu_matrix::dim::dim_dyn::DimDyn&gt; as zenu_matrix::operation::copy_from::CopyFrom&lt;zenu_matrix::matrix_impl::Matrix&lt;V,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt;&gt;::copy_from (1 samples, 0.15%)</title><rect x="63.2440%" y="501" width="0.1488%" height="15" fill="rgb(225,182,9)" fg:x="425" fg:w="1"/><text x="63.4940%" y="511.50"></text></g><g><title>zenu_matrix::operation::copy_from::copy (1 samples, 0.15%)</title><rect x="63.2440%" y="485" width="0.1488%" height="15" fill="rgb(243,178,37)" fg:x="425" fg:w="1"/><text x="63.4940%" y="495.50"></text></g><g><title>&lt;zenu_matrix::operation::copy_from::PointerOffsetIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="63.2440%" y="469" width="0.1488%" height="15" fill="rgb(232,139,19)" fg:x="425" fg:w="1"/><text x="63.4940%" y="479.50"></text></g><g><title>zenu_matrix::operation::copy_from::cal_offset (1 samples, 0.15%)</title><rect x="65.0298%" y="485" width="0.1488%" height="15" fill="rgb(225,201,24)" fg:x="437" fg:w="1"/><text x="65.2798%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.15%)</title><rect x="65.0298%" y="469" width="0.1488%" height="15" fill="rgb(221,47,46)" fg:x="437" fg:w="1"/><text x="65.2798%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (1 samples, 0.15%)</title><rect x="65.0298%" y="453" width="0.1488%" height="15" fill="rgb(249,23,13)" fg:x="437" fg:w="1"/><text x="65.2798%" y="463.50"></text></g><g><title>&lt;zenu_matrix::matrix_impl::Matrix&lt;VM,zenu_matrix::dim::dim_dyn::DimDyn&gt; as zenu_matrix::operation::copy_from::CopyFrom&lt;zenu_matrix::matrix_impl::Matrix&lt;V,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt;&gt;::copy_from (14 samples, 2.08%)</title><rect x="63.3929%" y="533" width="2.0833%" height="15" fill="rgb(219,9,5)" fg:x="426" fg:w="14"/><text x="63.6429%" y="543.50">&lt;..</text></g><g><title>zenu_matrix::operation::copy_from::copy (14 samples, 2.08%)</title><rect x="63.3929%" y="517" width="2.0833%" height="15" fill="rgb(254,171,16)" fg:x="426" fg:w="14"/><text x="63.6429%" y="527.50">z..</text></g><g><title>&lt;zenu_matrix::operation::copy_from::PointerOffsetIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 2.08%)</title><rect x="63.3929%" y="501" width="2.0833%" height="15" fill="rgb(230,171,20)" fg:x="426" fg:w="14"/><text x="63.6429%" y="511.50">&lt;..</text></g><g><title>zenu_matrix::shape_stride::ShapeStride&lt;D&gt;::stride (2 samples, 0.30%)</title><rect x="65.1786%" y="485" width="0.2976%" height="15" fill="rgb(210,71,41)" fg:x="438" fg:w="2"/><text x="65.4286%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;zenu_matrix::matrix_impl::Matrix&lt;zenu_matrix::memory_impl::OwnedMem&lt;f32&gt;,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt; (16 samples, 2.38%)</title><rect x="65.4762%" y="533" width="2.3810%" height="15" fill="rgb(206,173,20)" fg:x="440" fg:w="16"/><text x="65.7262%" y="543.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;zenu_matrix::memory_impl::OwnedMem&lt;f32&gt;&gt; (16 samples, 2.38%)</title><rect x="65.4762%" y="517" width="2.3810%" height="15" fill="rgb(233,88,34)" fg:x="440" fg:w="16"/><text x="65.7262%" y="527.50">co..</text></g><g><title>&lt;zenu_matrix::memory_impl::OwnedMem&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 2.38%)</title><rect x="65.4762%" y="501" width="2.3810%" height="15" fill="rgb(223,209,46)" fg:x="440" fg:w="16"/><text x="65.7262%" y="511.50">&lt;z..</text></g><g><title>&lt;zenu_matrix::memory_impl::CpuAccessor&lt;T&gt; as zenu_matrix::memory::MemoryAccessor&gt;::drop (16 samples, 2.38%)</title><rect x="65.4762%" y="485" width="2.3810%" height="15" fill="rgb(250,43,18)" fg:x="440" fg:w="16"/><text x="65.7262%" y="495.50">&lt;z..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (16 samples, 2.38%)</title><rect x="65.4762%" y="469" width="2.3810%" height="15" fill="rgb(208,13,10)" fg:x="440" fg:w="16"/><text x="65.7262%" y="479.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (16 samples, 2.38%)</title><rect x="65.4762%" y="453" width="2.3810%" height="15" fill="rgb(212,200,36)" fg:x="440" fg:w="16"/><text x="65.7262%" y="463.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 2.38%)</title><rect x="65.4762%" y="437" width="2.3810%" height="15" fill="rgb(225,90,30)" fg:x="440" fg:w="16"/><text x="65.7262%" y="447.50">&lt;a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 2.38%)</title><rect x="65.4762%" y="421" width="2.3810%" height="15" fill="rgb(236,182,39)" fg:x="440" fg:w="16"/><text x="65.7262%" y="431.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (16 samples, 2.38%)</title><rect x="65.4762%" y="405" width="2.3810%" height="15" fill="rgb(212,144,35)" fg:x="440" fg:w="16"/><text x="65.7262%" y="415.50">al..</text></g><g><title>__GI___libc_free (16 samples, 2.38%)</title><rect x="65.4762%" y="389" width="2.3810%" height="15" fill="rgb(228,63,44)" fg:x="440" fg:w="16"/><text x="65.7262%" y="399.50">__..</text></g><g><title>__GI___munmap (16 samples, 2.38%)</title><rect x="65.4762%" y="373" width="2.3810%" height="15" fill="rgb(228,109,6)" fg:x="440" fg:w="16"/><text x="65.7262%" y="383.50">__..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="357" width="2.3810%" height="15" fill="rgb(238,117,24)" fg:x="440" fg:w="16"/><text x="65.7262%" y="367.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="341" width="2.3810%" height="15" fill="rgb(242,26,26)" fg:x="440" fg:w="16"/><text x="65.7262%" y="351.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="325" width="2.3810%" height="15" fill="rgb(221,92,48)" fg:x="440" fg:w="16"/><text x="65.7262%" y="335.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="309" width="2.3810%" height="15" fill="rgb(209,209,32)" fg:x="440" fg:w="16"/><text x="65.7262%" y="319.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="293" width="2.3810%" height="15" fill="rgb(221,70,22)" fg:x="440" fg:w="16"/><text x="65.7262%" y="303.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="277" width="2.3810%" height="15" fill="rgb(248,145,5)" fg:x="440" fg:w="16"/><text x="65.7262%" y="287.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="261" width="2.3810%" height="15" fill="rgb(226,116,26)" fg:x="440" fg:w="16"/><text x="65.7262%" y="271.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="245" width="2.3810%" height="15" fill="rgb(244,5,17)" fg:x="440" fg:w="16"/><text x="65.7262%" y="255.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="229" width="2.3810%" height="15" fill="rgb(252,159,33)" fg:x="440" fg:w="16"/><text x="65.7262%" y="239.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="213" width="2.3810%" height="15" fill="rgb(206,71,0)" fg:x="440" fg:w="16"/><text x="65.7262%" y="223.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="197" width="2.3810%" height="15" fill="rgb(233,118,54)" fg:x="440" fg:w="16"/><text x="65.7262%" y="207.50">[u..</text></g><g><title>[unknown] (16 samples, 2.38%)</title><rect x="65.4762%" y="181" width="2.3810%" height="15" fill="rgb(234,83,48)" fg:x="440" fg:w="16"/><text x="65.7262%" y="191.50">[u..</text></g><g><title>[unknown] (14 samples, 2.08%)</title><rect x="65.7738%" y="165" width="2.0833%" height="15" fill="rgb(228,3,54)" fg:x="442" fg:w="14"/><text x="66.0238%" y="175.50">[..</text></g><g><title>[unknown] (12 samples, 1.79%)</title><rect x="66.0714%" y="149" width="1.7857%" height="15" fill="rgb(226,155,13)" fg:x="444" fg:w="12"/><text x="66.3214%" y="159.50">[..</text></g><g><title>[unknown] (11 samples, 1.64%)</title><rect x="66.2202%" y="133" width="1.6369%" height="15" fill="rgb(241,28,37)" fg:x="445" fg:w="11"/><text x="66.4702%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.89%)</title><rect x="66.9643%" y="117" width="0.8929%" height="15" fill="rgb(233,93,10)" fg:x="450" fg:w="6"/><text x="67.2143%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.60%)</title><rect x="67.2619%" y="101" width="0.5952%" height="15" fill="rgb(225,113,19)" fg:x="452" fg:w="4"/><text x="67.5119%" y="111.50"></text></g><g><title>[unknown] (4 samples, 0.60%)</title><rect x="67.2619%" y="85" width="0.5952%" height="15" fill="rgb(241,2,18)" fg:x="452" fg:w="4"/><text x="67.5119%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="67.5595%" y="69" width="0.2976%" height="15" fill="rgb(228,207,21)" fg:x="454" fg:w="2"/><text x="67.8095%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.30%)</title><rect x="67.5595%" y="53" width="0.2976%" height="15" fill="rgb(213,211,35)" fg:x="454" fg:w="2"/><text x="67.8095%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="67.7083%" y="37" width="0.1488%" height="15" fill="rgb(209,83,10)" fg:x="455" fg:w="1"/><text x="67.9583%" y="47.50"></text></g><g><title>im2col_function::im2col_bench (46 samples, 6.85%)</title><rect x="61.1607%" y="885" width="6.8452%" height="15" fill="rgb(209,164,1)" fg:x="411" fg:w="46"/><text x="61.4107%" y="895.50">im2col_fu..</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (46 samples, 6.85%)</title><rect x="61.1607%" y="869" width="6.8452%" height="15" fill="rgb(213,184,43)" fg:x="411" fg:w="46"/><text x="61.4107%" y="879.50">criterion..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (46 samples, 6.85%)</title><rect x="61.1607%" y="853" width="6.8452%" height="15" fill="rgb(231,61,34)" fg:x="411" fg:w="46"/><text x="61.4107%" y="863.50">criterion..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (46 samples, 6.85%)</title><rect x="61.1607%" y="837" width="6.8452%" height="15" fill="rgb(235,75,3)" fg:x="411" fg:w="46"/><text x="61.4107%" y="847.50">criterion..</text></g><g><title>criterion::routine::Routine::test (46 samples, 6.85%)</title><rect x="61.1607%" y="821" width="6.8452%" height="15" fill="rgb(220,106,47)" fg:x="411" fg:w="46"/><text x="61.4107%" y="831.50">criterion..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (46 samples, 6.85%)</title><rect x="61.1607%" y="805" width="6.8452%" height="15" fill="rgb(210,196,33)" fg:x="411" fg:w="46"/><text x="61.4107%" y="815.50">&lt;criterio..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (46 samples, 6.85%)</title><rect x="61.1607%" y="789" width="6.8452%" height="15" fill="rgb(229,154,42)" fg:x="411" fg:w="46"/><text x="61.4107%" y="799.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (46 samples, 6.85%)</title><rect x="61.1607%" y="773" width="6.8452%" height="15" fill="rgb(228,114,26)" fg:x="411" fg:w="46"/><text x="61.4107%" y="783.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (46 samples, 6.85%)</title><rect x="61.1607%" y="757" width="6.8452%" height="15" fill="rgb(208,144,1)" fg:x="411" fg:w="46"/><text x="61.4107%" y="767.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (46 samples, 6.85%)</title><rect x="61.1607%" y="741" width="6.8452%" height="15" fill="rgb(239,112,37)" fg:x="411" fg:w="46"/><text x="61.4107%" y="751.50">&lt;alloc::v..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (46 samples, 6.85%)</title><rect x="61.1607%" y="725" width="6.8452%" height="15" fill="rgb(210,96,50)" fg:x="411" fg:w="46"/><text x="61.4107%" y="735.50">&lt;alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (46 samples, 6.85%)</title><rect x="61.1607%" y="709" width="6.8452%" height="15" fill="rgb(222,178,2)" fg:x="411" fg:w="46"/><text x="61.4107%" y="719.50">alloc::ve..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (46 samples, 6.85%)</title><rect x="61.1607%" y="693" width="6.8452%" height="15" fill="rgb(226,74,18)" fg:x="411" fg:w="46"/><text x="61.4107%" y="703.50">core::ite..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46 samples, 6.85%)</title><rect x="61.1607%" y="677" width="6.8452%" height="15" fill="rgb(225,67,54)" fg:x="411" fg:w="46"/><text x="61.4107%" y="687.50">&lt;core::it..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (46 samples, 6.85%)</title><rect x="61.1607%" y="661" width="6.8452%" height="15" fill="rgb(251,92,32)" fg:x="411" fg:w="46"/><text x="61.4107%" y="671.50">&lt;core::sl..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (46 samples, 6.85%)</title><rect x="61.1607%" y="645" width="6.8452%" height="15" fill="rgb(228,149,22)" fg:x="411" fg:w="46"/><text x="61.4107%" y="655.50">core::ite..</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (46 samples, 6.85%)</title><rect x="61.1607%" y="629" width="6.8452%" height="15" fill="rgb(243,54,13)" fg:x="411" fg:w="46"/><text x="61.4107%" y="639.50">&lt;criterio..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (46 samples, 6.85%)</title><rect x="61.1607%" y="613" width="6.8452%" height="15" fill="rgb(243,180,28)" fg:x="411" fg:w="46"/><text x="61.4107%" y="623.50">criterion..</text></g><g><title>im2col_function::im2col_bench::{{closure}} (46 samples, 6.85%)</title><rect x="61.1607%" y="597" width="6.8452%" height="15" fill="rgb(208,167,24)" fg:x="411" fg:w="46"/><text x="61.4107%" y="607.50">im2col_fu..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (46 samples, 6.85%)</title><rect x="61.1607%" y="581" width="6.8452%" height="15" fill="rgb(245,73,45)" fg:x="411" fg:w="46"/><text x="61.4107%" y="591.50">criterion..</text></g><g><title>im2col_function::im2col_bench::{{closure}}::{{closure}} (46 samples, 6.85%)</title><rect x="61.1607%" y="565" width="6.8452%" height="15" fill="rgb(237,203,48)" fg:x="411" fg:w="46"/><text x="61.4107%" y="575.50">im2col_fu..</text></g><g><title>im2col_function::im2col (32 samples, 4.76%)</title><rect x="63.2440%" y="549" width="4.7619%" height="15" fill="rgb(211,197,16)" fg:x="425" fg:w="32"/><text x="63.4940%" y="559.50">im2col..</text></g><g><title>im2col_function::padding (1 samples, 0.15%)</title><rect x="67.8571%" y="533" width="0.1488%" height="15" fill="rgb(243,99,51)" fg:x="456" fg:w="1"/><text x="68.1071%" y="543.50"></text></g><g><title>&lt;zenu_matrix::matrix_impl::Matrix&lt;VM,zenu_matrix::dim::dim_dyn::DimDyn&gt; as zenu_matrix::operation::copy_from::CopyFrom&lt;zenu_matrix::matrix_impl::Matrix&lt;V,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt;&gt;::copy_from (1 samples, 0.15%)</title><rect x="67.8571%" y="517" width="0.1488%" height="15" fill="rgb(215,123,29)" fg:x="456" fg:w="1"/><text x="68.1071%" y="527.50"></text></g><g><title>zenu_matrix::operation::copy_from::copy (1 samples, 0.15%)</title><rect x="67.8571%" y="501" width="0.1488%" height="15" fill="rgb(239,186,37)" fg:x="456" fg:w="1"/><text x="68.1071%" y="511.50"></text></g><g><title>&lt;zenu_matrix::operation::copy_from::PointerOffsetIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="67.8571%" y="485" width="0.1488%" height="15" fill="rgb(252,136,39)" fg:x="456" fg:w="1"/><text x="68.1071%" y="495.50"></text></g><g><title>__libc_start_main_impl (47 samples, 6.99%)</title><rect x="61.1607%" y="1157" width="6.9940%" height="15" fill="rgb(223,213,32)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1167.50">__libc_st..</text></g><g><title>__libc_start_call_main (47 samples, 6.99%)</title><rect x="61.1607%" y="1141" width="6.9940%" height="15" fill="rgb(233,115,5)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1151.50">__libc_st..</text></g><g><title>std::rt::lang_start (47 samples, 6.99%)</title><rect x="61.1607%" y="1125" width="6.9940%" height="15" fill="rgb(207,226,44)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1135.50">std::rt::..</text></g><g><title>std::rt::lang_start_internal (47 samples, 6.99%)</title><rect x="61.1607%" y="1109" width="6.9940%" height="15" fill="rgb(208,126,0)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1119.50">std::rt::..</text></g><g><title>std::panic::catch_unwind (47 samples, 6.99%)</title><rect x="61.1607%" y="1093" width="6.9940%" height="15" fill="rgb(244,66,21)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1103.50">std::pani..</text></g><g><title>std::panicking::try (47 samples, 6.99%)</title><rect x="61.1607%" y="1077" width="6.9940%" height="15" fill="rgb(222,97,12)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1087.50">std::pani..</text></g><g><title>std::panicking::try::do_call (47 samples, 6.99%)</title><rect x="61.1607%" y="1061" width="6.9940%" height="15" fill="rgb(219,213,19)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1071.50">std::pani..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (47 samples, 6.99%)</title><rect x="61.1607%" y="1045" width="6.9940%" height="15" fill="rgb(252,169,30)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1055.50">std::rt::..</text></g><g><title>std::panic::catch_unwind (47 samples, 6.99%)</title><rect x="61.1607%" y="1029" width="6.9940%" height="15" fill="rgb(206,32,51)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1039.50">std::pani..</text></g><g><title>std::panicking::try (47 samples, 6.99%)</title><rect x="61.1607%" y="1013" width="6.9940%" height="15" fill="rgb(250,172,42)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1023.50">std::pani..</text></g><g><title>std::panicking::try::do_call (47 samples, 6.99%)</title><rect x="61.1607%" y="997" width="6.9940%" height="15" fill="rgb(209,34,43)" fg:x="411" fg:w="47"/><text x="61.4107%" y="1007.50">std::pani..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (47 samples, 6.99%)</title><rect x="61.1607%" y="981" width="6.9940%" height="15" fill="rgb(223,11,35)" fg:x="411" fg:w="47"/><text x="61.4107%" y="991.50">core::ops..</text></g><g><title>std::rt::lang_start::{{closure}} (47 samples, 6.99%)</title><rect x="61.1607%" y="965" width="6.9940%" height="15" fill="rgb(251,219,26)" fg:x="411" fg:w="47"/><text x="61.4107%" y="975.50">std::rt::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (47 samples, 6.99%)</title><rect x="61.1607%" y="949" width="6.9940%" height="15" fill="rgb(231,119,3)" fg:x="411" fg:w="47"/><text x="61.4107%" y="959.50">std::sys_..</text></g><g><title>core::ops::function::FnOnce::call_once (47 samples, 6.99%)</title><rect x="61.1607%" y="933" width="6.9940%" height="15" fill="rgb(216,97,11)" fg:x="411" fg:w="47"/><text x="61.4107%" y="943.50">core::ops..</text></g><g><title>im2col_function::main (47 samples, 6.99%)</title><rect x="61.1607%" y="917" width="6.9940%" height="15" fill="rgb(223,59,9)" fg:x="411" fg:w="47"/><text x="61.4107%" y="927.50">im2col_fu..</text></g><g><title>im2col_function::benches (47 samples, 6.99%)</title><rect x="61.1607%" y="901" width="6.9940%" height="15" fill="rgb(233,93,31)" fg:x="411" fg:w="47"/><text x="61.4107%" y="911.50">im2col_fu..</text></g><g><title>im2col_function::padding_bench (1 samples, 0.15%)</title><rect x="68.0060%" y="885" width="0.1488%" height="15" fill="rgb(239,81,33)" fg:x="457" fg:w="1"/><text x="68.2560%" y="895.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (1 samples, 0.15%)</title><rect x="68.0060%" y="869" width="0.1488%" height="15" fill="rgb(213,120,34)" fg:x="457" fg:w="1"/><text x="68.2560%" y="879.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1 samples, 0.15%)</title><rect x="68.0060%" y="853" width="0.1488%" height="15" fill="rgb(243,49,53)" fg:x="457" fg:w="1"/><text x="68.2560%" y="863.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (1 samples, 0.15%)</title><rect x="68.0060%" y="837" width="0.1488%" height="15" fill="rgb(247,216,33)" fg:x="457" fg:w="1"/><text x="68.2560%" y="847.50"></text></g><g><title>criterion::routine::Routine::test (1 samples, 0.15%)</title><rect x="68.0060%" y="821" width="0.1488%" height="15" fill="rgb(226,26,14)" fg:x="457" fg:w="1"/><text x="68.2560%" y="831.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (1 samples, 0.15%)</title><rect x="68.0060%" y="805" width="0.1488%" height="15" fill="rgb(215,49,53)" fg:x="457" fg:w="1"/><text x="68.2560%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.15%)</title><rect x="68.0060%" y="789" width="0.1488%" height="15" fill="rgb(245,162,40)" fg:x="457" fg:w="1"/><text x="68.2560%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="68.0060%" y="773" width="0.1488%" height="15" fill="rgb(229,68,17)" fg:x="457" fg:w="1"/><text x="68.2560%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="68.0060%" y="757" width="0.1488%" height="15" fill="rgb(213,182,10)" fg:x="457" fg:w="1"/><text x="68.2560%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="68.0060%" y="741" width="0.1488%" height="15" fill="rgb(245,125,30)" fg:x="457" fg:w="1"/><text x="68.2560%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.15%)</title><rect x="68.0060%" y="725" width="0.1488%" height="15" fill="rgb(232,202,2)" fg:x="457" fg:w="1"/><text x="68.2560%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.15%)</title><rect x="68.0060%" y="709" width="0.1488%" height="15" fill="rgb(237,140,51)" fg:x="457" fg:w="1"/><text x="68.2560%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.15%)</title><rect x="68.0060%" y="693" width="0.1488%" height="15" fill="rgb(236,157,25)" fg:x="457" fg:w="1"/><text x="68.2560%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.15%)</title><rect x="68.0060%" y="677" width="0.1488%" height="15" fill="rgb(219,209,0)" fg:x="457" fg:w="1"/><text x="68.2560%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.15%)</title><rect x="68.0060%" y="661" width="0.1488%" height="15" fill="rgb(240,116,54)" fg:x="457" fg:w="1"/><text x="68.2560%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.15%)</title><rect x="68.0060%" y="645" width="0.1488%" height="15" fill="rgb(216,10,36)" fg:x="457" fg:w="1"/><text x="68.2560%" y="655.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (1 samples, 0.15%)</title><rect x="68.0060%" y="629" width="0.1488%" height="15" fill="rgb(222,72,44)" fg:x="457" fg:w="1"/><text x="68.2560%" y="639.50"></text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (1 samples, 0.15%)</title><rect x="68.0060%" y="613" width="0.1488%" height="15" fill="rgb(232,159,9)" fg:x="457" fg:w="1"/><text x="68.2560%" y="623.50"></text></g><g><title>im2col_function::padding_bench::{{closure}} (1 samples, 0.15%)</title><rect x="68.0060%" y="597" width="0.1488%" height="15" fill="rgb(210,39,32)" fg:x="457" fg:w="1"/><text x="68.2560%" y="607.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1 samples, 0.15%)</title><rect x="68.0060%" y="581" width="0.1488%" height="15" fill="rgb(216,194,45)" fg:x="457" fg:w="1"/><text x="68.2560%" y="591.50"></text></g><g><title>im2col_function::padding_bench::{{closure}}::{{closure}} (1 samples, 0.15%)</title><rect x="68.0060%" y="565" width="0.1488%" height="15" fill="rgb(218,18,35)" fg:x="457" fg:w="1"/><text x="68.2560%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;zenu_matrix::matrix_impl::Matrix&lt;zenu_matrix::memory_impl::OwnedMem&lt;f32&gt;,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt; (1 samples, 0.15%)</title><rect x="68.0060%" y="549" width="0.1488%" height="15" fill="rgb(207,83,51)" fg:x="457" fg:w="1"/><text x="68.2560%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;zenu_matrix::memory_impl::OwnedMem&lt;f32&gt;&gt; (1 samples, 0.15%)</title><rect x="68.0060%" y="533" width="0.1488%" height="15" fill="rgb(225,63,43)" fg:x="457" fg:w="1"/><text x="68.2560%" y="543.50"></text></g><g><title>&lt;zenu_matrix::memory_impl::OwnedMem&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="68.0060%" y="517" width="0.1488%" height="15" fill="rgb(207,57,36)" fg:x="457" fg:w="1"/><text x="68.2560%" y="527.50"></text></g><g><title>&lt;zenu_matrix::memory_impl::CpuAccessor&lt;T&gt; as zenu_matrix::memory::MemoryAccessor&gt;::drop (1 samples, 0.15%)</title><rect x="68.0060%" y="501" width="0.1488%" height="15" fill="rgb(216,99,33)" fg:x="457" fg:w="1"/><text x="68.2560%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (1 samples, 0.15%)</title><rect x="68.0060%" y="485" width="0.1488%" height="15" fill="rgb(225,42,16)" fg:x="457" fg:w="1"/><text x="68.2560%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (1 samples, 0.15%)</title><rect x="68.0060%" y="469" width="0.1488%" height="15" fill="rgb(220,201,45)" fg:x="457" fg:w="1"/><text x="68.2560%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="68.0060%" y="453" width="0.1488%" height="15" fill="rgb(225,33,4)" fg:x="457" fg:w="1"/><text x="68.2560%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.15%)</title><rect x="68.0060%" y="437" width="0.1488%" height="15" fill="rgb(224,33,50)" fg:x="457" fg:w="1"/><text x="68.2560%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.15%)</title><rect x="68.0060%" y="421" width="0.1488%" height="15" fill="rgb(246,198,51)" fg:x="457" fg:w="1"/><text x="68.2560%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.15%)</title><rect x="68.0060%" y="405" width="0.1488%" height="15" fill="rgb(205,22,4)" fg:x="457" fg:w="1"/><text x="68.2560%" y="415.50"></text></g><g><title>__GI___munmap (1 samples, 0.15%)</title><rect x="68.0060%" y="389" width="0.1488%" height="15" fill="rgb(206,3,8)" fg:x="457" fg:w="1"/><text x="68.2560%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="373" width="0.1488%" height="15" fill="rgb(251,23,15)" fg:x="457" fg:w="1"/><text x="68.2560%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="357" width="0.1488%" height="15" fill="rgb(252,88,28)" fg:x="457" fg:w="1"/><text x="68.2560%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="341" width="0.1488%" height="15" fill="rgb(212,127,14)" fg:x="457" fg:w="1"/><text x="68.2560%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="325" width="0.1488%" height="15" fill="rgb(247,145,37)" fg:x="457" fg:w="1"/><text x="68.2560%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="309" width="0.1488%" height="15" fill="rgb(209,117,53)" fg:x="457" fg:w="1"/><text x="68.2560%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="293" width="0.1488%" height="15" fill="rgb(212,90,42)" fg:x="457" fg:w="1"/><text x="68.2560%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="277" width="0.1488%" height="15" fill="rgb(218,164,37)" fg:x="457" fg:w="1"/><text x="68.2560%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="261" width="0.1488%" height="15" fill="rgb(246,65,34)" fg:x="457" fg:w="1"/><text x="68.2560%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="245" width="0.1488%" height="15" fill="rgb(231,100,33)" fg:x="457" fg:w="1"/><text x="68.2560%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="229" width="0.1488%" height="15" fill="rgb(228,126,14)" fg:x="457" fg:w="1"/><text x="68.2560%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="213" width="0.1488%" height="15" fill="rgb(215,173,21)" fg:x="457" fg:w="1"/><text x="68.2560%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.0060%" y="197" width="0.1488%" height="15" fill="rgb(210,6,40)" fg:x="457" fg:w="1"/><text x="68.2560%" y="207.50"></text></g><g><title>_start (48 samples, 7.14%)</title><rect x="61.1607%" y="1173" width="7.1429%" height="15" fill="rgb(212,48,18)" fg:x="411" fg:w="48"/><text x="61.4107%" y="1183.50">_start</text></g><g><title>_dl_start (1 samples, 0.15%)</title><rect x="68.1548%" y="1157" width="0.1488%" height="15" fill="rgb(230,214,11)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1167.50"></text></g><g><title>_dl_start_final (1 samples, 0.15%)</title><rect x="68.1548%" y="1141" width="0.1488%" height="15" fill="rgb(254,105,39)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1151.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.15%)</title><rect x="68.1548%" y="1125" width="0.1488%" height="15" fill="rgb(245,158,5)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1135.50"></text></g><g><title>dl_main (1 samples, 0.15%)</title><rect x="68.1548%" y="1109" width="0.1488%" height="15" fill="rgb(249,208,11)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1119.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.15%)</title><rect x="68.1548%" y="1093" width="0.1488%" height="15" fill="rgb(210,39,28)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1103.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="68.1548%" y="1077" width="0.1488%" height="15" fill="rgb(211,56,53)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1087.50"></text></g><g><title>openaux (1 samples, 0.15%)</title><rect x="68.1548%" y="1061" width="0.1488%" height="15" fill="rgb(226,201,30)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1071.50"></text></g><g><title>_dl_map_object (1 samples, 0.15%)</title><rect x="68.1548%" y="1045" width="0.1488%" height="15" fill="rgb(239,101,34)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1055.50"></text></g><g><title>open_path (1 samples, 0.15%)</title><rect x="68.1548%" y="1029" width="0.1488%" height="15" fill="rgb(226,209,5)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1039.50"></text></g><g><title>open_verify (1 samples, 0.15%)</title><rect x="68.1548%" y="1013" width="0.1488%" height="15" fill="rgb(250,105,47)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1023.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 0.15%)</title><rect x="68.1548%" y="997" width="0.1488%" height="15" fill="rgb(230,72,3)" fg:x="458" fg:w="1"/><text x="68.4048%" y="1007.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.1548%" y="981" width="0.1488%" height="15" fill="rgb(232,218,39)" fg:x="458" fg:w="1"/><text x="68.4048%" y="991.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.1548%" y="965" width="0.1488%" height="15" fill="rgb(248,166,6)" fg:x="458" fg:w="1"/><text x="68.4048%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.1548%" y="949" width="0.1488%" height="15" fill="rgb(247,89,20)" fg:x="458" fg:w="1"/><text x="68.4048%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.1548%" y="933" width="0.1488%" height="15" fill="rgb(248,130,54)" fg:x="458" fg:w="1"/><text x="68.4048%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.1548%" y="917" width="0.1488%" height="15" fill="rgb(234,196,4)" fg:x="458" fg:w="1"/><text x="68.4048%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="68.1548%" y="901" width="0.1488%" height="15" fill="rgb(250,143,31)" fg:x="458" fg:w="1"/><text x="68.4048%" y="911.50"></text></g><g><title>im2col_function (604 samples, 89.88%)</title><rect x="9.3750%" y="1189" width="89.8810%" height="15" fill="rgb(211,110,34)" fg:x="63" fg:w="604"/><text x="9.6250%" y="1199.50">im2col_function</text></g><g><title>scopy_k_HASWELL (208 samples, 30.95%)</title><rect x="68.3036%" y="1173" width="30.9524%" height="15" fill="rgb(215,124,48)" fg:x="459" fg:w="208"/><text x="68.5536%" y="1183.50">scopy_k_HASWELL</text></g><g><title>[unknown] (167 samples, 24.85%)</title><rect x="74.4048%" y="1157" width="24.8512%" height="15" fill="rgb(216,46,13)" fg:x="500" fg:w="167"/><text x="74.6548%" y="1167.50">[unknown]</text></g><g><title>[unknown] (130 samples, 19.35%)</title><rect x="79.9107%" y="1141" width="19.3452%" height="15" fill="rgb(205,184,25)" fg:x="537" fg:w="130"/><text x="80.1607%" y="1151.50">[unknown]</text></g><g><title>[unknown] (128 samples, 19.05%)</title><rect x="80.2083%" y="1125" width="19.0476%" height="15" fill="rgb(228,1,10)" fg:x="539" fg:w="128"/><text x="80.4583%" y="1135.50">[unknown]</text></g><g><title>[unknown] (125 samples, 18.60%)</title><rect x="80.6548%" y="1109" width="18.6012%" height="15" fill="rgb(213,116,27)" fg:x="542" fg:w="125"/><text x="80.9048%" y="1119.50">[unknown]</text></g><g><title>[unknown] (93 samples, 13.84%)</title><rect x="85.4167%" y="1093" width="13.8393%" height="15" fill="rgb(241,95,50)" fg:x="574" fg:w="93"/><text x="85.6667%" y="1103.50">[unknown]</text></g><g><title>[unknown] (86 samples, 12.80%)</title><rect x="86.4583%" y="1077" width="12.7976%" height="15" fill="rgb(238,48,32)" fg:x="581" fg:w="86"/><text x="86.7083%" y="1087.50">[unknown]</text></g><g><title>[unknown] (79 samples, 11.76%)</title><rect x="87.5000%" y="1061" width="11.7560%" height="15" fill="rgb(235,113,49)" fg:x="588" fg:w="79"/><text x="87.7500%" y="1071.50">[unknown]</text></g><g><title>[unknown] (69 samples, 10.27%)</title><rect x="88.9881%" y="1045" width="10.2679%" height="15" fill="rgb(205,127,43)" fg:x="598" fg:w="69"/><text x="89.2381%" y="1055.50">[unknown]</text></g><g><title>[unknown] (61 samples, 9.08%)</title><rect x="90.1786%" y="1029" width="9.0774%" height="15" fill="rgb(250,162,2)" fg:x="606" fg:w="61"/><text x="90.4286%" y="1039.50">[unknown]</text></g><g><title>[unknown] (48 samples, 7.14%)</title><rect x="92.1131%" y="1013" width="7.1429%" height="15" fill="rgb(220,13,41)" fg:x="619" fg:w="48"/><text x="92.3631%" y="1023.50">[unknown]</text></g><g><title>[unknown] (40 samples, 5.95%)</title><rect x="93.3036%" y="997" width="5.9524%" height="15" fill="rgb(249,221,25)" fg:x="627" fg:w="40"/><text x="93.5536%" y="1007.50">[unknown]</text></g><g><title>[unknown] (30 samples, 4.46%)</title><rect x="94.7917%" y="981" width="4.4643%" height="15" fill="rgb(215,208,19)" fg:x="637" fg:w="30"/><text x="95.0417%" y="991.50">[unkn..</text></g><g><title>[unknown] (4 samples, 0.60%)</title><rect x="98.6607%" y="965" width="0.5952%" height="15" fill="rgb(236,175,2)" fg:x="663" fg:w="4"/><text x="98.9107%" y="975.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="99.1071%" y="949" width="0.1488%" height="15" fill="rgb(241,52,2)" fg:x="666" fg:w="1"/><text x="99.3571%" y="959.50"></text></g><g><title>all (672 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(248,140,14)" fg:x="0" fg:w="672"/><text x="0.2500%" y="1215.50"></text></g><g><title>perf-exec (5 samples, 0.74%)</title><rect x="99.2560%" y="1189" width="0.7440%" height="15" fill="rgb(253,22,42)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1199.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1173" width="0.7440%" height="15" fill="rgb(234,61,47)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1183.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1157" width="0.7440%" height="15" fill="rgb(208,226,15)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1141" width="0.7440%" height="15" fill="rgb(217,221,4)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1125" width="0.7440%" height="15" fill="rgb(212,174,34)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1109" width="0.7440%" height="15" fill="rgb(253,83,4)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1093" width="0.7440%" height="15" fill="rgb(250,195,49)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1077" width="0.7440%" height="15" fill="rgb(241,192,25)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1061" width="0.7440%" height="15" fill="rgb(208,124,10)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1045" width="0.7440%" height="15" fill="rgb(222,33,0)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1029" width="0.7440%" height="15" fill="rgb(234,209,28)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="1013" width="0.7440%" height="15" fill="rgb(224,11,23)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="997" width="0.7440%" height="15" fill="rgb(232,99,1)" fg:x="667" fg:w="5"/><text x="99.5060%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="981" width="0.7440%" height="15" fill="rgb(237,95,45)" fg:x="667" fg:w="5"/><text x="99.5060%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="965" width="0.7440%" height="15" fill="rgb(208,109,11)" fg:x="667" fg:w="5"/><text x="99.5060%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="949" width="0.7440%" height="15" fill="rgb(216,190,48)" fg:x="667" fg:w="5"/><text x="99.5060%" y="959.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="933" width="0.7440%" height="15" fill="rgb(251,171,36)" fg:x="667" fg:w="5"/><text x="99.5060%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.74%)</title><rect x="99.2560%" y="917" width="0.7440%" height="15" fill="rgb(230,62,22)" fg:x="667" fg:w="5"/><text x="99.5060%" y="927.50"></text></g></svg></svg>