<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="485.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="485.00"> </text><svg id="frames" x="10" width="1180" total_samples="1149"><g><title>conv2d-96b0c3255318d82c`once_cell::imp::OnceCell&lt;T&gt;::initialize (4 samples, 0.35%)</title><rect x="0.0000%" y="261" width="0.3481%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="271.50"></text></g><g><title>conv2d-96b0c3255318d82c`once_cell::imp::initialize_or_wait (4 samples, 0.35%)</title><rect x="0.0000%" y="245" width="0.3481%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="255.50"></text></g><g><title>conv2d-96b0c3255318d82c`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (4 samples, 0.35%)</title><rect x="0.0000%" y="229" width="0.3481%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="239.50"></text></g><g><title>conv2d-96b0c3255318d82c`criterion_plot::version (4 samples, 0.35%)</title><rect x="0.0000%" y="213" width="0.3481%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="223.50"></text></g><g><title>conv2d-96b0c3255318d82c`std::process::Command::output (4 samples, 0.35%)</title><rect x="0.0000%" y="197" width="0.3481%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="207.50"></text></g><g><title>conv2d-96b0c3255318d82c`std::sys::pal::unix::process::process_inner::_&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (4 samples, 0.35%)</title><rect x="0.0000%" y="181" width="0.3481%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (4 samples, 0.35%)</title><rect x="0.0000%" y="165" width="0.3481%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="4"/><text x="0.2500%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (4 samples, 0.35%)</title><rect x="0.0000%" y="149" width="0.3481%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="159.50"></text></g><g><title>conv2d-96b0c3255318d82c`serde_json::de::from_trait (1 samples, 0.09%)</title><rect x="0.3481%" y="261" width="0.0870%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.5981%" y="271.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.09%)</title><rect x="0.3481%" y="245" width="0.0870%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.5981%" y="255.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;criterion::Criterion as core::default::Default&gt;::default (6 samples, 0.52%)</title><rect x="0.0000%" y="341" width="0.5222%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="351.50"></text></g><g><title>conv2d-96b0c3255318d82c`once_cell::imp::OnceCell&lt;T&gt;::initialize (6 samples, 0.52%)</title><rect x="0.0000%" y="325" width="0.5222%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="335.50"></text></g><g><title>conv2d-96b0c3255318d82c`once_cell::imp::initialize_or_wait (6 samples, 0.52%)</title><rect x="0.0000%" y="309" width="0.5222%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="319.50"></text></g><g><title>conv2d-96b0c3255318d82c`once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (6 samples, 0.52%)</title><rect x="0.0000%" y="293" width="0.5222%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="303.50"></text></g><g><title>conv2d-96b0c3255318d82c`core::ops::function::FnOnce::call_once (6 samples, 0.52%)</title><rect x="0.0000%" y="277" width="0.5222%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="287.50"></text></g><g><title>conv2d-96b0c3255318d82c`std::process::Command::output (1 samples, 0.09%)</title><rect x="0.4352%" y="261" width="0.0870%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.6852%" y="271.50"></text></g><g><title>conv2d-96b0c3255318d82c`std::sys::pal::unix::process::process_inner::_&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (1 samples, 0.09%)</title><rect x="0.4352%" y="245" width="0.0870%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.6852%" y="255.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.09%)</title><rect x="0.4352%" y="229" width="0.0870%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.6852%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.09%)</title><rect x="0.4352%" y="213" width="0.0870%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="0.6852%" y="223.50"></text></g><g><title>conv2d-96b0c3255318d82c`core::ptr::drop_in_place&lt;zenu_autograd::VariableInner&lt;f32&gt;&gt; (1 samples, 0.09%)</title><rect x="0.5222%" y="341" width="0.0870%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.7722%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.09%)</title><rect x="0.5222%" y="325" width="0.0870%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.7722%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.09%)</title><rect x="0.5222%" y="309" width="0.0870%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="0.7722%" y="319.50"></text></g><g><title>conv2d-96b0c3255318d82c`core::ptr::drop_in_place&lt;zenu_autograd::VariableInner&lt;f32&gt;&gt; (1 samples, 0.09%)</title><rect x="0.6092%" y="277" width="0.0870%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.8592%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.09%)</title><rect x="0.6092%" y="261" width="0.0870%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="0.8592%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.09%)</title><rect x="0.6092%" y="245" width="0.0870%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="0.8592%" y="255.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (2 samples, 0.17%)</title><rect x="0.6963%" y="117" width="0.1741%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="2"/><text x="0.9463%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.17%)</title><rect x="0.6963%" y="101" width="0.1741%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="2"/><text x="0.9463%" y="111.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait_end (8 samples, 0.70%)</title><rect x="0.6963%" y="133" width="0.6963%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="8"/><text x="0.9463%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (6 samples, 0.52%)</title><rect x="0.8703%" y="117" width="0.5222%" height="15" fill="rgb(214,148,48)" fg:x="10" fg:w="6"/><text x="1.1203%" y="127.50"></text></g><g><title>libgomp.1.dylib`gomp_team_start (10 samples, 0.87%)</title><rect x="0.6963%" y="149" width="0.8703%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="10"/><text x="0.9463%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.17%)</title><rect x="1.3925%" y="133" width="0.1741%" height="15" fill="rgb(209,103,24)" fg:x="16" fg:w="2"/><text x="1.6425%" y="143.50"></text></g><g><title>libgomp.1.dylib`DYLD-STUB$$__emutls_get_address (1 samples, 0.09%)</title><rect x="1.5666%" y="133" width="0.0870%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="1"/><text x="1.8166%" y="143.50"></text></g><g><title>libgomp.1.dylib`omp_get_num_threads (1 samples, 0.09%)</title><rect x="1.6536%" y="133" width="0.0870%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="1"/><text x="1.9036%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (1 samples, 0.09%)</title><rect x="1.6536%" y="117" width="0.0870%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="1"/><text x="1.9036%" y="127.50"></text></g><g><title>libgomp.1.dylib`GOMP_parallel (14 samples, 1.22%)</title><rect x="0.6963%" y="165" width="1.2185%" height="15" fill="rgb(241,83,37)" fg:x="8" fg:w="14"/><text x="0.9463%" y="175.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas._omp_fn.1 (4 samples, 0.35%)</title><rect x="1.5666%" y="149" width="0.3481%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="4"/><text x="1.8166%" y="159.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_threads (2 samples, 0.17%)</title><rect x="1.7406%" y="133" width="0.1741%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="2"/><text x="1.9906%" y="143.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`do_copy.isra.0 (2 samples, 0.17%)</title><rect x="1.7406%" y="117" width="0.1741%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="2"/><text x="1.9906%" y="127.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (3 samples, 0.26%)</title><rect x="1.9147%" y="133" width="0.2611%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="3"/><text x="2.1647%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.26%)</title><rect x="1.9147%" y="117" width="0.2611%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="3"/><text x="2.1647%" y="127.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::matrix_impl::Matrix&lt;M,zenu_matrix::dim::dim_dyn::DimDyn&gt; as zenu_matrix::operation::transpose::TransposeInplace&lt;T&gt;&gt;::transpose_swap_index_inplace (22 samples, 1.91%)</title><rect x="0.6963%" y="245" width="1.9147%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="22"/><text x="0.9463%" y="255.50">c..</text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::operation::copy_from::copy (22 samples, 1.91%)</title><rect x="0.6963%" y="229" width="1.9147%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="22"/><text x="0.9463%" y="239.50">c..</text></g><g><title>libopenblasp-r0.3.26.dylib`scopy_k_NEOVERSEN1 (22 samples, 1.91%)</title><rect x="0.6963%" y="213" width="1.9147%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="22"/><text x="0.9463%" y="223.50">l..</text></g><g><title>libopenblasp-r0.3.26.dylib`blas_level1_thread (22 samples, 1.91%)</title><rect x="0.6963%" y="197" width="1.9147%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="22"/><text x="0.9463%" y="207.50">l..</text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas (22 samples, 1.91%)</title><rect x="0.6963%" y="181" width="1.9147%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="22"/><text x="0.9463%" y="191.50">l..</text></g><g><title>libgomp.1.dylib`gomp_team_end (8 samples, 0.70%)</title><rect x="1.9147%" y="165" width="0.6963%" height="15" fill="rgb(206,96,30)" fg:x="22" fg:w="8"/><text x="2.1647%" y="175.50"></text></g><g><title>libgomp.1.dylib`gomp_team_barrier_wait_end (8 samples, 0.70%)</title><rect x="1.9147%" y="149" width="0.6963%" height="15" fill="rgb(218,138,4)" fg:x="22" fg:w="8"/><text x="2.1647%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (5 samples, 0.44%)</title><rect x="2.1758%" y="133" width="0.4352%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="5"/><text x="2.4258%" y="143.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lgemm_beta_zero_03 (2 samples, 0.17%)</title><rect x="2.6110%" y="101" width="0.1741%" height="15" fill="rgb(239,60,40)" fg:x="30" fg:w="2"/><text x="2.8610%" y="111.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_100 (1 samples, 0.09%)</title><rect x="2.7850%" y="101" width="0.0870%" height="15" fill="rgb(206,27,48)" fg:x="32" fg:w="1"/><text x="3.0350%" y="111.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_22 (9 samples, 0.78%)</title><rect x="2.8721%" y="101" width="0.7833%" height="15" fill="rgb(225,35,8)" fg:x="33" fg:w="9"/><text x="3.1221%" y="111.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_22a (1 samples, 0.09%)</title><rect x="3.6554%" y="101" width="0.0870%" height="15" fill="rgb(250,213,24)" fg:x="42" fg:w="1"/><text x="3.9054%" y="111.50"></text></g><g><title>libgomp.1.dylib`GOMP_parallel (18 samples, 1.57%)</title><rect x="2.6110%" y="149" width="1.5666%" height="15" fill="rgb(247,123,22)" fg:x="30" fg:w="18"/><text x="2.8610%" y="159.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas._omp_fn.1 (18 samples, 1.57%)</title><rect x="2.6110%" y="133" width="1.5666%" height="15" fill="rgb(231,138,38)" fg:x="30" fg:w="18"/><text x="2.8610%" y="143.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_threads (18 samples, 1.57%)</title><rect x="2.6110%" y="117" width="1.5666%" height="15" fill="rgb(231,145,46)" fg:x="30" fg:w="18"/><text x="2.8610%" y="127.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_tcopy_L8_M16_20 (5 samples, 0.44%)</title><rect x="3.7424%" y="101" width="0.4352%" height="15" fill="rgb(251,118,11)" fg:x="43" fg:w="5"/><text x="3.9924%" y="111.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::matrix_impl::Matrix&lt;M3,D3&gt; as zenu_matrix::operation::mul::Gemm&lt;zenu_matrix::matrix_impl::Matrix&lt;M1,D1&gt;,zenu_matrix::matrix_impl::Matrix&lt;M2,D2&gt;&gt;&gt;::gemm (19 samples, 1.65%)</title><rect x="2.6110%" y="245" width="1.6536%" height="15" fill="rgb(217,147,25)" fg:x="30" fg:w="19"/><text x="2.8610%" y="255.50"></text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::matrix_blas::gemm::gemm_unchecked (19 samples, 1.65%)</title><rect x="2.6110%" y="229" width="1.6536%" height="15" fill="rgb(247,81,37)" fg:x="30" fg:w="19"/><text x="2.8610%" y="239.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`cblas_sgemm (19 samples, 1.65%)</title><rect x="2.6110%" y="213" width="1.6536%" height="15" fill="rgb(209,12,38)" fg:x="30" fg:w="19"/><text x="2.8610%" y="223.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`sgemm_thread_nn (19 samples, 1.65%)</title><rect x="2.6110%" y="197" width="1.6536%" height="15" fill="rgb(227,1,9)" fg:x="30" fg:w="19"/><text x="2.8610%" y="207.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`gemm_driver.isra.0 (19 samples, 1.65%)</title><rect x="2.6110%" y="181" width="1.6536%" height="15" fill="rgb(248,47,43)" fg:x="30" fg:w="19"/><text x="2.8610%" y="191.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas (19 samples, 1.65%)</title><rect x="2.6110%" y="165" width="1.6536%" height="15" fill="rgb(221,10,30)" fg:x="30" fg:w="19"/><text x="2.8610%" y="175.50"></text></g><g><title>libgomp.1.dylib`gomp_team_end (1 samples, 0.09%)</title><rect x="4.1775%" y="149" width="0.0870%" height="15" fill="rgb(210,229,1)" fg:x="48" fg:w="1"/><text x="4.4275%" y="159.50"></text></g><g><title>libgomp.1.dylib`gomp_fini_work_share (1 samples, 0.09%)</title><rect x="4.1775%" y="133" width="0.0870%" height="15" fill="rgb(222,148,37)" fg:x="48" fg:w="1"/><text x="4.4275%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.09%)</title><rect x="4.1775%" y="117" width="0.0870%" height="15" fill="rgb(234,67,33)" fg:x="48" fg:w="1"/><text x="4.4275%" y="127.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::matrix_impl::Matrix&lt;VM,zenu_matrix::dim::dim_dyn::DimDyn&gt; as zenu_matrix::operation::copy_from::CopyFrom&lt;zenu_matrix::matrix_impl::Matrix&lt;V,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt;&gt;::copy_from (4 samples, 0.35%)</title><rect x="4.2646%" y="245" width="0.3481%" height="15" fill="rgb(247,98,35)" fg:x="49" fg:w="4"/><text x="4.5146%" y="255.50"></text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::operation::copy_from::copy (4 samples, 0.35%)</title><rect x="4.2646%" y="229" width="0.3481%" height="15" fill="rgb(247,138,52)" fg:x="49" fg:w="4"/><text x="4.5146%" y="239.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`scopy_k_NEOVERSEN1 (4 samples, 0.35%)</title><rect x="4.2646%" y="213" width="0.3481%" height="15" fill="rgb(213,79,30)" fg:x="49" fg:w="4"/><text x="4.5146%" y="223.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`blas_level1_thread (4 samples, 0.35%)</title><rect x="4.2646%" y="197" width="0.3481%" height="15" fill="rgb(246,177,23)" fg:x="49" fg:w="4"/><text x="4.5146%" y="207.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas (4 samples, 0.35%)</title><rect x="4.2646%" y="181" width="0.3481%" height="15" fill="rgb(230,62,27)" fg:x="49" fg:w="4"/><text x="4.5146%" y="191.50"></text></g><g><title>libgomp.1.dylib`GOMP_parallel (4 samples, 0.35%)</title><rect x="4.2646%" y="165" width="0.3481%" height="15" fill="rgb(216,154,8)" fg:x="49" fg:w="4"/><text x="4.5146%" y="175.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas._omp_fn.1 (4 samples, 0.35%)</title><rect x="4.2646%" y="149" width="0.3481%" height="15" fill="rgb(244,35,45)" fg:x="49" fg:w="4"/><text x="4.5146%" y="159.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_threads (4 samples, 0.35%)</title><rect x="4.2646%" y="133" width="0.3481%" height="15" fill="rgb(251,115,12)" fg:x="49" fg:w="4"/><text x="4.5146%" y="143.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`do_copy.isra.0 (4 samples, 0.35%)</title><rect x="4.2646%" y="117" width="0.3481%" height="15" fill="rgb(240,54,50)" fg:x="49" fg:w="4"/><text x="4.5146%" y="127.50"></text></g><g><title>conv2d-96b0c3255318d82c`__rdl_alloc_zeroed (1 samples, 0.09%)</title><rect x="4.6127%" y="149" width="0.0870%" height="15" fill="rgb(233,84,52)" fg:x="53" fg:w="1"/><text x="4.8627%" y="159.50"></text></g><g><title>conv2d-96b0c3255318d82c`__rust_alloc_zeroed (1 samples, 0.09%)</title><rect x="4.6997%" y="149" width="0.0870%" height="15" fill="rgb(207,117,47)" fg:x="54" fg:w="1"/><text x="4.9497%" y="159.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::operation::copy_from::PointerOffsetIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.35%)</title><rect x="4.6127%" y="165" width="0.3481%" height="15" fill="rgb(249,43,39)" fg:x="53" fg:w="4"/><text x="4.8627%" y="175.50"></text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::operation::copy_from::idx_to_dim (2 samples, 0.17%)</title><rect x="4.7868%" y="149" width="0.1741%" height="15" fill="rgb(209,38,44)" fg:x="55" fg:w="2"/><text x="5.0368%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.09%)</title><rect x="4.8738%" y="133" width="0.0870%" height="15" fill="rgb(236,212,23)" fg:x="56" fg:w="1"/><text x="5.1238%" y="143.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (12 samples, 1.04%)</title><rect x="5.1349%" y="69" width="1.0444%" height="15" fill="rgb(242,79,21)" fg:x="59" fg:w="12"/><text x="5.3849%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (12 samples, 1.04%)</title><rect x="5.1349%" y="53" width="1.0444%" height="15" fill="rgb(211,96,35)" fg:x="59" fg:w="12"/><text x="5.3849%" y="63.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait_end (13 samples, 1.13%)</title><rect x="5.1349%" y="85" width="1.1314%" height="15" fill="rgb(253,215,40)" fg:x="59" fg:w="13"/><text x="5.3849%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.09%)</title><rect x="6.1793%" y="69" width="0.0870%" height="15" fill="rgb(211,81,21)" fg:x="71" fg:w="1"/><text x="6.4293%" y="79.50"></text></g><g><title>libgomp.1.dylib`gomp_team_start (16 samples, 1.39%)</title><rect x="4.9608%" y="101" width="1.3925%" height="15" fill="rgb(208,190,38)" fg:x="57" fg:w="16"/><text x="5.2108%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.09%)</title><rect x="6.2663%" y="85" width="0.0870%" height="15" fill="rgb(235,213,38)" fg:x="72" fg:w="1"/><text x="6.5163%" y="95.50"></text></g><g><title>libgomp.1.dylib`GOMP_parallel (22 samples, 1.91%)</title><rect x="4.9608%" y="117" width="1.9147%" height="15" fill="rgb(237,122,38)" fg:x="57" fg:w="22"/><text x="5.2108%" y="127.50">l..</text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas._omp_fn.1 (6 samples, 0.52%)</title><rect x="6.3534%" y="101" width="0.5222%" height="15" fill="rgb(244,218,35)" fg:x="73" fg:w="6"/><text x="6.6034%" y="111.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_threads (6 samples, 0.52%)</title><rect x="6.3534%" y="85" width="0.5222%" height="15" fill="rgb(240,68,47)" fg:x="73" fg:w="6"/><text x="6.6034%" y="95.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`do_copy.isra.0 (6 samples, 0.52%)</title><rect x="6.3534%" y="69" width="0.5222%" height="15" fill="rgb(210,16,53)" fg:x="73" fg:w="6"/><text x="6.6034%" y="79.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_post (1 samples, 0.09%)</title><rect x="6.9626%" y="85" width="0.0870%" height="15" fill="rgb(235,124,12)" fg:x="80" fg:w="1"/><text x="7.2126%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.09%)</title><rect x="6.9626%" y="69" width="0.0870%" height="15" fill="rgb(224,169,11)" fg:x="80" fg:w="1"/><text x="7.2126%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (18 samples, 1.57%)</title><rect x="7.0496%" y="69" width="1.5666%" height="15" fill="rgb(250,166,2)" fg:x="81" fg:w="18"/><text x="7.2996%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.09%)</title><rect x="8.6162%" y="69" width="0.0870%" height="15" fill="rgb(242,216,29)" fg:x="99" fg:w="1"/><text x="8.8662%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.09%)</title><rect x="8.6162%" y="53" width="0.0870%" height="15" fill="rgb(230,116,27)" fg:x="99" fg:w="1"/><text x="8.8662%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.09%)</title><rect x="8.6162%" y="37" width="0.0870%" height="15" fill="rgb(228,99,48)" fg:x="99" fg:w="1"/><text x="8.8662%" y="47.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (20 samples, 1.74%)</title><rect x="7.0496%" y="85" width="1.7406%" height="15" fill="rgb(253,11,6)" fg:x="81" fg:w="20"/><text x="7.2996%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.09%)</title><rect x="8.7032%" y="69" width="0.0870%" height="15" fill="rgb(247,143,39)" fg:x="100" fg:w="1"/><text x="8.9532%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.09%)</title><rect x="8.7032%" y="53" width="0.0870%" height="15" fill="rgb(236,97,10)" fg:x="100" fg:w="1"/><text x="8.9532%" y="63.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`scopy_k_NEOVERSEN1 (46 samples, 4.00%)</title><rect x="4.9608%" y="165" width="4.0035%" height="15" fill="rgb(233,208,19)" fg:x="57" fg:w="46"/><text x="5.2108%" y="175.50">libo..</text></g><g><title>libopenblasp-r0.3.26.dylib`blas_level1_thread (46 samples, 4.00%)</title><rect x="4.9608%" y="149" width="4.0035%" height="15" fill="rgb(216,164,2)" fg:x="57" fg:w="46"/><text x="5.2108%" y="159.50">libo..</text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas (46 samples, 4.00%)</title><rect x="4.9608%" y="133" width="4.0035%" height="15" fill="rgb(220,129,5)" fg:x="57" fg:w="46"/><text x="5.2108%" y="143.50">libo..</text></g><g><title>libgomp.1.dylib`gomp_team_end (24 samples, 2.09%)</title><rect x="6.8755%" y="117" width="2.0888%" height="15" fill="rgb(242,17,10)" fg:x="79" fg:w="24"/><text x="7.1255%" y="127.50">l..</text></g><g><title>libgomp.1.dylib`gomp_team_barrier_wait_end (24 samples, 2.09%)</title><rect x="6.8755%" y="101" width="2.0888%" height="15" fill="rgb(242,107,0)" fg:x="79" fg:w="24"/><text x="7.1255%" y="111.50">l..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.17%)</title><rect x="8.7903%" y="85" width="0.1741%" height="15" fill="rgb(251,28,31)" fg:x="101" fg:w="2"/><text x="9.0403%" y="95.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::matrix_impl::Matrix&lt;V,D&gt; as zenu_matrix::operation::reshape::Reshape&lt;T&gt;&gt;::reshape_new_matrix (51 samples, 4.44%)</title><rect x="4.6127%" y="229" width="4.4386%" height="15" fill="rgb(233,223,10)" fg:x="53" fg:w="51"/><text x="4.8627%" y="239.50">conv2..</text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::matrix_impl::Matrix&lt;M,D&gt; as zenu_matrix::operation::to_default_stride::ToDefaultStride&lt;T&gt;&gt;::to_default_stride (51 samples, 4.44%)</title><rect x="4.6127%" y="213" width="4.4386%" height="15" fill="rgb(215,21,27)" fg:x="53" fg:w="51"/><text x="4.8627%" y="223.50">conv2..</text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::matrix_impl::Matrix&lt;VM,zenu_matrix::dim::dim_dyn::DimDyn&gt; as zenu_matrix::operation::copy_from::CopyFrom&lt;zenu_matrix::matrix_impl::Matrix&lt;V,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt;&gt;::copy_from (51 samples, 4.44%)</title><rect x="4.6127%" y="197" width="4.4386%" height="15" fill="rgb(232,23,21)" fg:x="53" fg:w="51"/><text x="4.8627%" y="207.50">conv2..</text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::operation::copy_from::copy (51 samples, 4.44%)</title><rect x="4.6127%" y="181" width="4.4386%" height="15" fill="rgb(244,5,23)" fg:x="53" fg:w="51"/><text x="4.8627%" y="191.50">conv2..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.09%)</title><rect x="8.9643%" y="165" width="0.0870%" height="15" fill="rgb(226,81,46)" fg:x="103" fg:w="1"/><text x="9.2143%" y="175.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::matrix_impl::Matrix&lt;VM,zenu_matrix::dim::dim_dyn::DimDyn&gt; as zenu_matrix::operation::copy_from::CopyFrom&lt;zenu_matrix::matrix_impl::Matrix&lt;V,zenu_matrix::dim::dim_dyn::DimDyn&gt;&gt;&gt;::copy_from (1 samples, 0.09%)</title><rect x="9.0513%" y="229" width="0.0870%" height="15" fill="rgb(247,70,30)" fg:x="104" fg:w="1"/><text x="9.3013%" y="239.50"></text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::operation::copy_from::copy (1 samples, 0.09%)</title><rect x="9.0513%" y="213" width="0.0870%" height="15" fill="rgb(212,68,19)" fg:x="104" fg:w="1"/><text x="9.3013%" y="223.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`scopy_k_NEOVERSEN1 (1 samples, 0.09%)</title><rect x="9.0513%" y="197" width="0.0870%" height="15" fill="rgb(240,187,13)" fg:x="104" fg:w="1"/><text x="9.3013%" y="207.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`blas_level1_thread (1 samples, 0.09%)</title><rect x="9.0513%" y="181" width="0.0870%" height="15" fill="rgb(223,113,26)" fg:x="104" fg:w="1"/><text x="9.3013%" y="191.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas (1 samples, 0.09%)</title><rect x="9.0513%" y="165" width="0.0870%" height="15" fill="rgb(206,192,2)" fg:x="104" fg:w="1"/><text x="9.3013%" y="175.50"></text></g><g><title>libgomp.1.dylib`GOMP_parallel (1 samples, 0.09%)</title><rect x="9.0513%" y="149" width="0.0870%" height="15" fill="rgb(241,108,4)" fg:x="104" fg:w="1"/><text x="9.3013%" y="159.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas._omp_fn.1 (1 samples, 0.09%)</title><rect x="9.0513%" y="133" width="0.0870%" height="15" fill="rgb(247,173,49)" fg:x="104" fg:w="1"/><text x="9.3013%" y="143.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`exec_threads (1 samples, 0.09%)</title><rect x="9.0513%" y="117" width="0.0870%" height="15" fill="rgb(224,114,35)" fg:x="104" fg:w="1"/><text x="9.3013%" y="127.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`do_copy.isra.0 (1 samples, 0.09%)</title><rect x="9.0513%" y="101" width="0.0870%" height="15" fill="rgb(245,159,27)" fg:x="104" fg:w="1"/><text x="9.3013%" y="111.50"></text></g><g><title>conv2d-96b0c3255318d82c`DYLD-STUB$$cblas_scopy (1 samples, 0.09%)</title><rect x="9.1384%" y="229" width="0.0870%" height="15" fill="rgb(245,172,44)" fg:x="105" fg:w="1"/><text x="9.3884%" y="239.50"></text></g><g><title>conv2d-96b0c3255318d82c`__rdl_alloc_zeroed (1 samples, 0.09%)</title><rect x="9.4865%" y="197" width="0.0870%" height="15" fill="rgb(236,23,11)" fg:x="109" fg:w="1"/><text x="9.7365%" y="207.50"></text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::operation::copy_from::idx_to_dim (8 samples, 0.70%)</title><rect x="9.5735%" y="197" width="0.6963%" height="15" fill="rgb(205,117,38)" fg:x="110" fg:w="8"/><text x="9.8235%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (5 samples, 0.44%)</title><rect x="9.8346%" y="181" width="0.4352%" height="15" fill="rgb(237,72,25)" fg:x="113" fg:w="5"/><text x="10.0846%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (2 samples, 0.17%)</title><rect x="10.2698%" y="197" width="0.1741%" height="15" fill="rgb(244,70,9)" fg:x="118" fg:w="2"/><text x="10.5198%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.35%)</title><rect x="10.4439%" y="197" width="0.3481%" height="15" fill="rgb(217,125,39)" fg:x="120" fg:w="4"/><text x="10.6939%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.09%)</title><rect x="10.7920%" y="197" width="0.0870%" height="15" fill="rgb(235,36,10)" fg:x="124" fg:w="1"/><text x="11.0420%" y="207.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_matrix::operation::copy_from::PointerOffsetIter as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 2.00%)</title><rect x="9.2254%" y="213" width="2.0017%" height="15" fill="rgb(251,123,47)" fg:x="106" fg:w="23"/><text x="9.4754%" y="223.50">c..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.35%)</title><rect x="10.8790%" y="197" width="0.3481%" height="15" fill="rgb(221,13,13)" fg:x="125" fg:w="4"/><text x="11.1290%" y="207.50"></text></g><g><title>conv2d-96b0c3255318d82c`DYLD-STUB$$free (1 samples, 0.09%)</title><rect x="11.2272%" y="213" width="0.0870%" height="15" fill="rgb(238,131,9)" fg:x="129" fg:w="1"/><text x="11.4772%" y="223.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`do_copy.isra.0 (50 samples, 4.35%)</title><rect x="11.3142%" y="213" width="4.3516%" height="15" fill="rgb(211,50,8)" fg:x="130" fg:w="50"/><text x="11.5642%" y="223.50">libop..</text></g><g><title>libopenblasp-r0.3.26.dylib`scopy_k_NEOVERSEN1 (1 samples, 0.09%)</title><rect x="15.6658%" y="213" width="0.0870%" height="15" fill="rgb(245,182,24)" fg:x="180" fg:w="1"/><text x="15.9158%" y="223.50"></text></g><g><title>conv2d-96b0c3255318d82c`zenu_matrix::operation::copy_from::copy (77 samples, 6.70%)</title><rect x="9.2254%" y="229" width="6.7015%" height="15" fill="rgb(242,14,37)" fg:x="106" fg:w="77"/><text x="9.4754%" y="239.50">conv2d-96..</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.17%)</title><rect x="15.7528%" y="213" width="0.1741%" height="15" fill="rgb(246,228,12)" fg:x="181" fg:w="2"/><text x="16.0028%" y="223.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`scopy_k_NEOVERSEN1 (1 samples, 0.09%)</title><rect x="15.9269%" y="229" width="0.0870%" height="15" fill="rgb(213,55,15)" fg:x="183" fg:w="1"/><text x="16.1769%" y="239.50"></text></g><g><title>conv2d-96b0c3255318d82c`zenu_autograd::functions::conv2d::im2col::im2col (136 samples, 11.84%)</title><rect x="4.6127%" y="245" width="11.8364%" height="15" fill="rgb(209,9,3)" fg:x="53" fg:w="136"/><text x="4.8627%" y="255.50">conv2d-96b0c325531..</text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.44%)</title><rect x="16.0139%" y="229" width="0.4352%" height="15" fill="rgb(230,59,30)" fg:x="184" fg:w="5"/><text x="16.2639%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.44%)</title><rect x="16.0139%" y="213" width="0.4352%" height="15" fill="rgb(209,121,21)" fg:x="184" fg:w="5"/><text x="16.2639%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (12 samples, 1.04%)</title><rect x="16.4491%" y="245" width="1.0444%" height="15" fill="rgb(220,109,13)" fg:x="189" fg:w="12"/><text x="16.6991%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 1.04%)</title><rect x="16.4491%" y="229" width="1.0444%" height="15" fill="rgb(232,18,1)" fg:x="189" fg:w="12"/><text x="16.6991%" y="239.50"></text></g><g><title>conv2d-96b0c3255318d82c`&lt;zenu_autograd::functions::conv2d::Conv2d&lt;T&gt; as zenu_autograd::Function&lt;T&gt;&gt;::forward (195 samples, 16.97%)</title><rect x="0.6963%" y="261" width="16.9713%" height="15" fill="rgb(215,41,42)" fg:x="8" fg:w="195"/><text x="0.9463%" y="271.50">conv2d-96b0c3255318d82c`&lt;z..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.17%)</title><rect x="17.4935%" y="245" width="0.1741%" height="15" fill="rgb(224,123,36)" fg:x="201" fg:w="2"/><text x="17.7435%" y="255.50"></text></g><g><title>conv2d-96b0c3255318d82c`main (210 samples, 18.28%)</title><rect x="0.0000%" y="421" width="18.2768%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="210"/><text x="0.2500%" y="431.50">conv2d-96b0c3255318d82c`main</text></g><g><title>conv2d-96b0c3255318d82c`std::rt::lang_start_internal (210 samples, 18.28%)</title><rect x="0.0000%" y="405" width="18.2768%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="210"/><text x="0.2500%" y="415.50">conv2d-96b0c3255318d82c`std:..</text></g><g><title>conv2d-96b0c3255318d82c`std::rt::lang_start::_{{closure}} (210 samples, 18.28%)</title><rect x="0.0000%" y="389" width="18.2768%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="210"/><text x="0.2500%" y="399.50">conv2d-96b0c3255318d82c`std:..</text></g><g><title>conv2d-96b0c3255318d82c`std::sys_common::backtrace::__rust_begin_short_backtrace (210 samples, 18.28%)</title><rect x="0.0000%" y="373" width="18.2768%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="210"/><text x="0.2500%" y="383.50">conv2d-96b0c3255318d82c`std:..</text></g><g><title>conv2d-96b0c3255318d82c`conv2d::main (210 samples, 18.28%)</title><rect x="0.0000%" y="357" width="18.2768%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="210"/><text x="0.2500%" y="367.50">conv2d-96b0c3255318d82c`conv..</text></g><g><title>conv2d-96b0c3255318d82c`criterion::Criterion&lt;M&gt;::bench_function (203 samples, 17.67%)</title><rect x="0.6092%" y="341" width="17.6675%" height="15" fill="rgb(235,201,11)" fg:x="7" fg:w="203"/><text x="0.8592%" y="351.50">conv2d-96b0c3255318d82c`cri..</text></g><g><title>conv2d-96b0c3255318d82c`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (203 samples, 17.67%)</title><rect x="0.6092%" y="325" width="17.6675%" height="15" fill="rgb(207,46,11)" fg:x="7" fg:w="203"/><text x="0.8592%" y="335.50">conv2d-96b0c3255318d82c`cri..</text></g><g><title>conv2d-96b0c3255318d82c`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (203 samples, 17.67%)</title><rect x="0.6092%" y="309" width="17.6675%" height="15" fill="rgb(241,35,35)" fg:x="7" fg:w="203"/><text x="0.8592%" y="319.50">conv2d-96b0c3255318d82c`&lt;al..</text></g><g><title>conv2d-96b0c3255318d82c`criterion::bencher::Bencher&lt;M&gt;::iter (203 samples, 17.67%)</title><rect x="0.6092%" y="293" width="17.6675%" height="15" fill="rgb(243,32,47)" fg:x="7" fg:w="203"/><text x="0.8592%" y="303.50">conv2d-96b0c3255318d82c`cri..</text></g><g><title>conv2d-96b0c3255318d82c`zenu_autograd::functions::conv2d::conv2d (202 samples, 17.58%)</title><rect x="0.6963%" y="277" width="17.5805%" height="15" fill="rgb(247,202,23)" fg:x="8" fg:w="202"/><text x="0.9463%" y="287.50">conv2d-96b0c3255318d82c`zen..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.61%)</title><rect x="17.6675%" y="261" width="0.6092%" height="15" fill="rgb(219,102,11)" fg:x="203" fg:w="7"/><text x="17.9175%" y="271.50"></text></g><g><title>libsystem_c.dylib`exit (1 samples, 0.09%)</title><rect x="18.2768%" y="405" width="0.0870%" height="15" fill="rgb(243,110,44)" fg:x="210" fg:w="1"/><text x="18.5268%" y="415.50"></text></g><g><title>libsystem_c.dylib`__cxa_finalize_ranges (1 samples, 0.09%)</title><rect x="18.2768%" y="389" width="0.0870%" height="15" fill="rgb(222,74,54)" fg:x="210" fg:w="1"/><text x="18.5268%" y="399.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`gotoblas_quit (1 samples, 0.09%)</title><rect x="18.2768%" y="373" width="0.0870%" height="15" fill="rgb(216,99,12)" fg:x="210" fg:w="1"/><text x="18.5268%" y="383.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`blas_shutdown (1 samples, 0.09%)</title><rect x="18.2768%" y="357" width="0.0870%" height="15" fill="rgb(226,22,26)" fg:x="210" fg:w="1"/><text x="18.5268%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__munmap (1 samples, 0.09%)</title><rect x="18.2768%" y="341" width="0.0870%" height="15" fill="rgb(217,163,10)" fg:x="210" fg:w="1"/><text x="18.5268%" y="351.50"></text></g><g><title>dyld`start (215 samples, 18.71%)</title><rect x="0.0000%" y="437" width="18.7119%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="215"/><text x="0.2500%" y="447.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (5 samples, 0.44%)</title><rect x="18.2768%" y="421" width="0.4352%" height="15" fill="rgb(252,105,26)" fg:x="210" fg:w="5"/><text x="18.5268%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.35%)</title><rect x="18.3638%" y="405" width="0.3481%" height="15" fill="rgb(220,39,43)" fg:x="211" fg:w="4"/><text x="18.6138%" y="415.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`do_copy.isra.0 (9 samples, 0.78%)</title><rect x="18.7119%" y="437" width="0.7833%" height="15" fill="rgb(229,68,48)" fg:x="215" fg:w="9"/><text x="18.9619%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__exit (14 samples, 1.22%)</title><rect x="19.4952%" y="437" width="1.2185%" height="15" fill="rgb(252,8,32)" fg:x="224" fg:w="14"/><text x="19.7452%" y="447.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait (1 samples, 0.09%)</title><rect x="20.7137%" y="389" width="0.0870%" height="15" fill="rgb(223,20,43)" fg:x="238" fg:w="1"/><text x="20.9637%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.09%)</title><rect x="20.7137%" y="373" width="0.0870%" height="15" fill="rgb(229,81,49)" fg:x="238" fg:w="1"/><text x="20.9637%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (150 samples, 13.05%)</title><rect x="21.2359%" y="357" width="13.0548%" height="15" fill="rgb(236,28,36)" fg:x="244" fg:w="150"/><text x="21.4859%" y="367.50">libsystem_kernel.dyl..</text></g><g><title>libgomp.1.dylib`gomp_sem_wait (152 samples, 13.23%)</title><rect x="21.1488%" y="373" width="13.2289%" height="15" fill="rgb(249,185,26)" fg:x="243" fg:w="152"/><text x="21.3988%" y="383.50">libgomp.1.dylib`gomp..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.09%)</title><rect x="34.2907%" y="357" width="0.0870%" height="15" fill="rgb(249,174,33)" fg:x="394" fg:w="1"/><text x="34.5407%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.09%)</title><rect x="34.2907%" y="341" width="0.0870%" height="15" fill="rgb(233,201,37)" fg:x="394" fg:w="1"/><text x="34.5407%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (66 samples, 5.74%)</title><rect x="34.3777%" y="373" width="5.7441%" height="15" fill="rgb(221,78,26)" fg:x="395" fg:w="66"/><text x="34.6277%" y="383.50">libsyst..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2 samples, 0.17%)</title><rect x="40.1218%" y="373" width="0.1741%" height="15" fill="rgb(250,127,30)" fg:x="461" fg:w="2"/><text x="40.3718%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (2 samples, 0.17%)</title><rect x="40.1218%" y="357" width="0.1741%" height="15" fill="rgb(230,49,44)" fg:x="461" fg:w="2"/><text x="40.3718%" y="367.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait_end (225 samples, 19.58%)</title><rect x="20.8007%" y="389" width="19.5822%" height="15" fill="rgb(229,67,23)" fg:x="239" fg:w="225"/><text x="21.0507%" y="399.50">libgomp.1.dylib`gomp_barrier_wa..</text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (1 samples, 0.09%)</title><rect x="40.2959%" y="373" width="0.0870%" height="15" fill="rgb(249,83,47)" fg:x="463" fg:w="1"/><text x="40.5459%" y="383.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_post (1 samples, 0.09%)</title><rect x="40.3829%" y="389" width="0.0870%" height="15" fill="rgb(215,43,3)" fg:x="464" fg:w="1"/><text x="40.6329%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.09%)</title><rect x="40.3829%" y="373" width="0.0870%" height="15" fill="rgb(238,154,13)" fg:x="464" fg:w="1"/><text x="40.6329%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.26%)</title><rect x="40.5570%" y="373" width="0.2611%" height="15" fill="rgb(219,56,2)" fg:x="466" fg:w="3"/><text x="40.8070%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.26%)</title><rect x="40.5570%" y="357" width="0.2611%" height="15" fill="rgb(233,0,4)" fg:x="466" fg:w="3"/><text x="40.8070%" y="367.50"></text></g><g><title>libgomp.1.dylib`gomp_team_barrier_wait (5 samples, 0.44%)</title><rect x="40.4700%" y="389" width="0.4352%" height="15" fill="rgb(235,30,7)" fg:x="465" fg:w="5"/><text x="40.7200%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.09%)</title><rect x="40.8181%" y="373" width="0.0870%" height="15" fill="rgb(250,79,13)" fg:x="469" fg:w="1"/><text x="41.0681%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (183 samples, 15.93%)</title><rect x="41.0792%" y="357" width="15.9269%" height="15" fill="rgb(211,146,34)" fg:x="472" fg:w="183"/><text x="41.3292%" y="367.50">libsystem_kernel.dylib`_..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (2 samples, 0.17%)</title><rect x="57.1802%" y="341" width="0.1741%" height="15" fill="rgb(228,22,38)" fg:x="657" fg:w="2"/><text x="57.4302%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.26%)</title><rect x="57.3542%" y="341" width="0.2611%" height="15" fill="rgb(235,168,5)" fg:x="659" fg:w="3"/><text x="57.6042%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.26%)</title><rect x="57.3542%" y="325" width="0.2611%" height="15" fill="rgb(221,155,16)" fg:x="659" fg:w="3"/><text x="57.6042%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (8 samples, 0.70%)</title><rect x="57.0061%" y="357" width="0.6963%" height="15" fill="rgb(215,215,53)" fg:x="655" fg:w="8"/><text x="57.2561%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.09%)</title><rect x="57.6153%" y="341" width="0.0870%" height="15" fill="rgb(223,4,10)" fg:x="662" fg:w="1"/><text x="57.8653%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.09%)</title><rect x="57.7023%" y="357" width="0.0870%" height="15" fill="rgb(234,103,6)" fg:x="663" fg:w="1"/><text x="57.9523%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (1 samples, 0.09%)</title><rect x="57.7023%" y="341" width="0.0870%" height="15" fill="rgb(227,97,0)" fg:x="663" fg:w="1"/><text x="57.9523%" y="351.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (196 samples, 17.06%)</title><rect x="41.0792%" y="373" width="17.0583%" height="15" fill="rgb(234,150,53)" fg:x="472" fg:w="196"/><text x="41.3292%" y="383.50">libgomp.1.dylib`gomp_sem_w..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.35%)</title><rect x="57.7894%" y="357" width="0.3481%" height="15" fill="rgb(228,201,54)" fg:x="664" fg:w="4"/><text x="58.0394%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (68 samples, 5.92%)</title><rect x="58.1375%" y="373" width="5.9182%" height="15" fill="rgb(222,22,37)" fg:x="668" fg:w="68"/><text x="58.3875%" y="383.50">libsyste..</text></g><g><title>libgomp.1.dylib`gomp_team_barrier_wait_end (270 samples, 23.50%)</title><rect x="40.9051%" y="389" width="23.4987%" height="15" fill="rgb(237,53,32)" fg:x="470" fg:w="270"/><text x="41.1551%" y="399.50">libgomp.1.dylib`gomp_team_barrier_wai..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (4 samples, 0.35%)</title><rect x="64.0557%" y="373" width="0.3481%" height="15" fill="rgb(233,25,53)" fg:x="736" fg:w="4"/><text x="64.3057%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (4 samples, 0.35%)</title><rect x="64.0557%" y="357" width="0.3481%" height="15" fill="rgb(210,40,34)" fg:x="736" fg:w="4"/><text x="64.3057%" y="367.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lgemm_beta_zero_03 (47 samples, 4.09%)</title><rect x="64.4038%" y="357" width="4.0905%" height="15" fill="rgb(241,220,44)" fg:x="740" fg:w="47"/><text x="64.6538%" y="367.50">libo..</text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_BEGIN (1 samples, 0.09%)</title><rect x="68.4943%" y="357" width="0.0870%" height="15" fill="rgb(235,28,35)" fg:x="787" fg:w="1"/><text x="68.7443%" y="367.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_100 (8 samples, 0.70%)</title><rect x="68.5814%" y="357" width="0.6963%" height="15" fill="rgb(210,56,17)" fg:x="788" fg:w="8"/><text x="68.8314%" y="367.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_20 (2 samples, 0.17%)</title><rect x="69.2776%" y="357" width="0.1741%" height="15" fill="rgb(224,130,29)" fg:x="796" fg:w="2"/><text x="69.5276%" y="367.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_22 (47 samples, 4.09%)</title><rect x="69.4517%" y="357" width="4.0905%" height="15" fill="rgb(235,212,8)" fg:x="798" fg:w="47"/><text x="69.7017%" y="367.50">libo..</text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_22a (4 samples, 0.35%)</title><rect x="73.5422%" y="357" width="0.3481%" height="15" fill="rgb(223,33,50)" fg:x="845" fg:w="4"/><text x="73.7922%" y="367.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_kernel_L4_M16_44 (1 samples, 0.09%)</title><rect x="73.8903%" y="357" width="0.0870%" height="15" fill="rgb(219,149,13)" fg:x="849" fg:w="1"/><text x="74.1403%" y="367.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_tcopy_L8_M16_20 (52 samples, 4.53%)</title><rect x="73.9774%" y="357" width="4.5257%" height="15" fill="rgb(250,156,29)" fg:x="850" fg:w="52"/><text x="74.2274%" y="367.50">libop..</text></g><g><title>libopenblasp-r0.3.26.dylib`.Lsgemm_tcopy_L8_M16_60 (1 samples, 0.09%)</title><rect x="78.5030%" y="357" width="0.0870%" height="15" fill="rgb(216,193,19)" fg:x="902" fg:w="1"/><text x="78.7530%" y="367.50"></text></g><g><title>libopenblasp-r0.3.26.dylib`do_copy.isra.0 (222 samples, 19.32%)</title><rect x="78.5901%" y="357" width="19.3211%" height="15" fill="rgb(216,135,14)" fg:x="903" fg:w="222"/><text x="78.8401%" y="367.50">libopenblasp-r0.3.26.dylib`do_..</text></g><g><title>libopenblasp-r0.3.26.dylib`exec_blas._omp_fn.1 (394 samples, 34.29%)</title><rect x="64.4038%" y="389" width="34.2907%" height="15" fill="rgb(241,47,5)" fg:x="740" fg:w="394"/><text x="64.6538%" y="399.50">libopenblasp-r0.3.26.dylib`exec_blas._omp_fn.1</text></g><g><title>libopenblasp-r0.3.26.dylib`exec_threads (394 samples, 34.29%)</title><rect x="64.4038%" y="373" width="34.2907%" height="15" fill="rgb(233,42,35)" fg:x="740" fg:w="394"/><text x="64.6538%" y="383.50">libopenblasp-r0.3.26.dylib`exec_threads</text></g><g><title>libopenblasp-r0.3.26.dylib`inner_thread (9 samples, 0.78%)</title><rect x="97.9112%" y="357" width="0.7833%" height="15" fill="rgb(231,13,6)" fg:x="1125" fg:w="9"/><text x="98.1612%" y="367.50"></text></g><g><title>all (1,149 samples, 100%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="1149"/><text x="0.2500%" y="463.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (911 samples, 79.29%)</title><rect x="20.7137%" y="437" width="79.2863%" height="15" fill="rgb(254,173,49)" fg:x="238" fg:w="911"/><text x="20.9637%" y="447.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (911 samples, 79.29%)</title><rect x="20.7137%" y="421" width="79.2863%" height="15" fill="rgb(221,1,38)" fg:x="238" fg:w="911"/><text x="20.9637%" y="431.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libgomp.1.dylib`gomp_thread_start (911 samples, 79.29%)</title><rect x="20.7137%" y="405" width="79.2863%" height="15" fill="rgb(206,124,46)" fg:x="238" fg:w="911"/><text x="20.9637%" y="415.50">libgomp.1.dylib`gomp_thread_start</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (15 samples, 1.31%)</title><rect x="98.6945%" y="389" width="1.3055%" height="15" fill="rgb(249,21,11)" fg:x="1134" fg:w="15"/><text x="98.9445%" y="399.50"></text></g></svg></svg>